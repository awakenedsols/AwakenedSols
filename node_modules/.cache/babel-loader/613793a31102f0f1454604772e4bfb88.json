{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrHorizontalRangeCategorySeries } from \"./igr-horizontal-range-category-series\";\nimport { RangeColumnSeries } from \"./RangeColumnSeries\";\nimport { toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent range column series.\n*\n* The `IgrRangeColumnSeries` class represents range column series of the IgxDataChartComponent.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrRangeColumnSeries\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* const series1 = new IgrRangeColumnSeries({ name: \"series1\" });\n* series1.highMemberPath = \"High\";\n* series1.lowMemberPath  = \"Low\";\n* series1.xAxisName = \"xAxis\";\n* series1.yAxisName = \"yAxis\";\n* this.chart.series.add(series1);\n* ```\n*/\n\nvar IgrRangeColumnSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrRangeColumnSeries, _super);\n\n  function IgrRangeColumnSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrRangeColumnSeries.prototype.createImplementation = function () {\n    return new RangeColumnSeries();\n  };\n\n  Object.defineProperty(IgrRangeColumnSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRangeColumnSeries.prototype, \"isColumn\", {\n    /**\n     * Gets whether the current series shows a column shape.\n    */\n    get: function () {\n      return this.i.dh;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRangeColumnSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n    /**\n     * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n    */\n    get: function () {\n      return this.i.d2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRangeColumnSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n    *\n    * Use the `radiusX` property to round the corners of the column.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *     <IgrRangeColumnSeries\n    *         name=\"series1\"\n    *         xAxisName=\"xAxis\"\n    *         yAxisName=\"yAxis\"\n    *         highMemberPath=\"High\"\n    *         lowMemberPath=\"Low\"\n    * \t\tradiusX={10} />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.radiusX=10;\n    * ```\n    */\n    get: function () {\n      return this.i.uf;\n    },\n    set: function (v) {\n      this.i.uf = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRangeColumnSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n    *\n    * Use the `radiusY` property for the y-radius of the ellipse that is used to round the corners of the column.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *     <IgrRangeColumnSeries\n    *         name=\"series1\"\n    *         xAxisName=\"xAxis\"\n    *         yAxisName=\"yAxis\"\n    *         highMemberPath=\"High\"\n    *         lowMemberPath=\"Low\"\n    * \t\tradiusY={10} />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.radiusY=10;\n    * ```\n    */\n    get: function () {\n      return this.i.ug;\n    },\n    set: function (v) {\n      this.i.ug = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinate for which to get a value bounding box for\n  *\n  * The `getSeriesValueBoundingBox` method return the best available value of the bounding box within the series.\n  */\n\n  IgrRangeColumnSeries.prototype.getSeriesValueBoundingBox = function (world) {\n    var iv = this.i.pv(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  *\n  * The `getItemSpan` method returns the current width of the items within the categories.\n  *\n  * ```ts\n  * var x =series.getItemSpan();\n  * ```\n  */\n\n\n  IgrRangeColumnSeries.prototype.getItemSpan = function () {\n    var iv = this.i.ga();\n    return iv;\n  };\n\n  return IgrRangeColumnSeries;\n}(IgrHorizontalRangeCategorySeries);\n\nexport { IgrRangeColumnSeries };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-range-column-series.js"],"names":["__extends","IgrHorizontalRangeCategorySeries","RangeColumnSeries","toPoint","fromRect","IgrRangeColumnSeries","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","dh","d2","uf","set","v","ug","getSeriesValueBoundingBox","world","iv","pv","getItemSpan","ga"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrHorizontalRangeCategorySeries } from \"./igr-horizontal-range-category-series\";\nimport { RangeColumnSeries } from \"./RangeColumnSeries\";\nimport { toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent range column series.\n*\n* The `IgrRangeColumnSeries` class represents range column series of the IgxDataChartComponent.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrRangeColumnSeries\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* const series1 = new IgrRangeColumnSeries({ name: \"series1\" });\n* series1.highMemberPath = \"High\";\n* series1.lowMemberPath  = \"Low\";\n* series1.xAxisName = \"xAxis\";\n* series1.yAxisName = \"yAxis\";\n* this.chart.series.add(series1);\n* ```\n*/\nvar IgrRangeColumnSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrRangeColumnSeries, _super);\n    function IgrRangeColumnSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrRangeColumnSeries.prototype.createImplementation = function () {\n        return new RangeColumnSeries();\n    };\n    Object.defineProperty(IgrRangeColumnSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRangeColumnSeries.prototype, \"isColumn\", {\n        /**\n         * Gets whether the current series shows a column shape.\n        */\n        get: function () {\n            return this.i.dh;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRangeColumnSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n        /**\n         * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n        */\n        get: function () {\n            return this.i.d2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRangeColumnSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n        *\n        * Use the `radiusX` property to round the corners of the column.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *     <IgrRangeColumnSeries\n        *         name=\"series1\"\n        *         xAxisName=\"xAxis\"\n        *         yAxisName=\"yAxis\"\n        *         highMemberPath=\"High\"\n        *         lowMemberPath=\"Low\"\n        * \t\tradiusX={10} />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.radiusX=10;\n        * ```\n        */\n        get: function () {\n            return this.i.uf;\n        },\n        set: function (v) {\n            this.i.uf = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRangeColumnSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n        *\n        * Use the `radiusY` property for the y-radius of the ellipse that is used to round the corners of the column.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *     <IgrRangeColumnSeries\n        *         name=\"series1\"\n        *         xAxisName=\"xAxis\"\n        *         yAxisName=\"yAxis\"\n        *         highMemberPath=\"High\"\n        *         lowMemberPath=\"Low\"\n        * \t\tradiusY={10} />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.radiusY=10;\n        * ```\n        */\n        get: function () {\n            return this.i.ug;\n        },\n        set: function (v) {\n            this.i.ug = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\n    *\n    * The `getSeriesValueBoundingBox` method return the best available value of the bounding box within the series.\n    */\n    IgrRangeColumnSeries.prototype.getSeriesValueBoundingBox = function (world) {\n        var iv = this.i.pv(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    *\n    * The `getItemSpan` method returns the current width of the items within the categories.\n    *\n    * ```ts\n    * var x =series.getItemSpan();\n    * ```\n    */\n    IgrRangeColumnSeries.prototype.getItemSpan = function () {\n        var iv = this.i.ga();\n        return (iv);\n    };\n    return IgrRangeColumnSeries;\n}(IgrHorizontalRangeCategorySeries));\nexport { IgrRangeColumnSeries };\n"]},"metadata":{},"sourceType":"module"}