{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, markType, getInstanceType } from \"igniteui-react-core\";\nimport { DictionaryUtil } from \"igniteui-react-core\";\n/**\n * @hidden\n */\n\nvar MessageHandler_Spark =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(MessageHandler_Spark, _super);\n\n  function MessageHandler_Spark() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.a = DictionaryUtil.dictionaryCreate();\n    return _this;\n  }\n\n  MessageHandler_Spark.prototype.addHandler = function (a, b) {\n    this.a.set(a.typeName, b);\n  };\n\n  MessageHandler_Spark.prototype.messageReceived = function (a) {\n    var b;\n    var c = getInstanceType(a).typeName;\n\n    if (this.a.has(c)) {\n      b = this.a.get(c);\n      b(a);\n    }\n  };\n\n  MessageHandler_Spark.$t = markType(MessageHandler_Spark, 'MessageHandler_Spark');\n  return MessageHandler_Spark;\n}(Base);\n\nexport { MessageHandler_Spark };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/MessageHandler_Spark.js"],"names":["__extends","Base","markType","getInstanceType","DictionaryUtil","MessageHandler_Spark","_super","_this","apply","arguments","a","dictionaryCreate","prototype","addHandler","b","set","typeName","messageReceived","c","has","get","$t"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,eAAzB,QAAgD,qBAAhD;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA;AACA;AACA;;AACA,IAAIC,oBAAoB;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;AACtEN,EAAAA,SAAS,CAACK,oBAAD,EAAuBC,MAAvB,CAAT;;AACA,WAASD,oBAAT,GAAgC;AAC5B,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AACAF,IAAAA,KAAK,CAACG,CAAN,GAAUN,cAAc,CAACO,gBAAf,EAAV;AACA,WAAOJ,KAAP;AACH;;AACDF,EAAAA,oBAAoB,CAACO,SAArB,CAA+BC,UAA/B,GAA4C,UAAUH,CAAV,EAAaI,CAAb,EAAgB;AACxD,SAAKJ,CAAL,CAAOK,GAAP,CAAWL,CAAC,CAACM,QAAb,EAAuBF,CAAvB;AACH,GAFD;;AAGAT,EAAAA,oBAAoB,CAACO,SAArB,CAA+BK,eAA/B,GAAiD,UAAUP,CAAV,EAAa;AAC1D,QAAII,CAAJ;AACA,QAAII,CAAC,GAAGf,eAAe,CAACO,CAAD,CAAf,CAAmBM,QAA3B;;AACA,QAAI,KAAKN,CAAL,CAAOS,GAAP,CAAWD,CAAX,CAAJ,EAAmB;AACfJ,MAAAA,CAAC,GAAG,KAAKJ,CAAL,CAAOU,GAAP,CAAWF,CAAX,CAAJ;AACAJ,MAAAA,CAAC,CAACJ,CAAD,CAAD;AACH;AACJ,GAPD;;AAQAL,EAAAA,oBAAoB,CAACgB,EAArB,GAA0BnB,QAAQ,CAACG,oBAAD,EAAuB,sBAAvB,CAAlC;AACA,SAAOA,oBAAP;AACH,CApBuD,CAoBtDJ,IApBsD,CAAxD;;AAqBA,SAASI,oBAAT","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, markType, getInstanceType } from \"igniteui-react-core\";\nimport { DictionaryUtil } from \"igniteui-react-core\";\n/**\n * @hidden\n */\nvar MessageHandler_Spark = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(MessageHandler_Spark, _super);\n    function MessageHandler_Spark() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.a = DictionaryUtil.dictionaryCreate();\n        return _this;\n    }\n    MessageHandler_Spark.prototype.addHandler = function (a, b) {\n        this.a.set(a.typeName, b);\n    };\n    MessageHandler_Spark.prototype.messageReceived = function (a) {\n        var b;\n        var c = getInstanceType(a).typeName;\n        if (this.a.has(c)) {\n            b = this.a.get(c);\n            b(a);\n        }\n    };\n    MessageHandler_Spark.$t = markType(MessageHandler_Spark, 'MessageHandler_Spark');\n    return MessageHandler_Spark;\n}(Base));\nexport { MessageHandler_Spark };\n"]},"metadata":{},"sourceType":"module"}