{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { PercentageVolumeOscillatorIndicator } from \"./PercentageVolumeOscillatorIndicator\";\n/**\n * Represents a IgxDataChartComponent Percentage Volume Oscillator (PVO) series.\n * Default required members: Volume\n*\n* You can use the `IgrPercentageVolumeOscillatorIndicator` to show the percentage difference volume.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*    <IgrPercentageVolumeOscillatorIndicator\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPercentageVolumeOscillatorIndicator({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* ```\n*/\n\nvar IgrPercentageVolumeOscillatorIndicator =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrPercentageVolumeOscillatorIndicator, _super);\n\n  function IgrPercentageVolumeOscillatorIndicator(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrPercentageVolumeOscillatorIndicator.prototype.createImplementation = function () {\n    return new PercentageVolumeOscillatorIndicator();\n  };\n\n  Object.defineProperty(IgrPercentageVolumeOscillatorIndicator.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPercentageVolumeOscillatorIndicator.prototype, \"shortPeriod\", {\n    /**\n     * Gets or sets the short moving average period for the current PercentageVolumeOscillatorIndicator object.\n     * The typical, and initial, value for short PVO periods is 10.\n    *\n    * You can use the `shortPeriod` to set the short moving average period.\n    *\n    * ```ts\n    * this.series.shortPeriod = 30;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *    <IgrPercentageVolumeOscillatorIndicator\n    *     name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     shortPeriod = {30} />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.shortPeriod;\n    },\n    set: function (v) {\n      this.i.shortPeriod = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPercentageVolumeOscillatorIndicator.prototype, \"longPeriod\", {\n    /**\n     * Gets or sets the short moving average period for the current PercentageVolumeOscillatorIndicator object.\n     * The typical, and initial, value for long PVO periods is 30.\n    *\n    * You can use the `longPeriod` to set the long moving average period.\n    *\n    * ```ts\n    * this.series.longPeriod = 30;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *    <IgrPercentageVolumeOscillatorIndicator\n    *     name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     longPeriod = {30} />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.longPeriod;\n    },\n    set: function (v) {\n      this.i.longPeriod = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrPercentageVolumeOscillatorIndicator;\n}(IgrStrategyBasedIndicator);\n\nexport { IgrPercentageVolumeOscillatorIndicator };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-percentage-volume-oscillator-indicator.js"],"names":["__extends","IgrStrategyBasedIndicator","PercentageVolumeOscillatorIndicator","IgrPercentageVolumeOscillatorIndicator","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","shortPeriod","set","v","longPeriod"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AACA,SAASC,mCAAT,QAAoD,uCAApD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,sCAAsC;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;AACxFJ,EAAAA,SAAS,CAACG,sCAAD,EAAyCC,MAAzC,CAAT;;AACA,WAASD,sCAAT,CAAgDE,KAAhD,EAAuD;AACnD,WAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;AACH;;AACDF,EAAAA,sCAAsC,CAACI,SAAvC,CAAiDC,oBAAjD,GAAwE,YAAY;AAChF,WAAO,IAAIN,mCAAJ,EAAP;AACH,GAFD;;AAGAO,EAAAA,MAAM,CAACC,cAAP,CAAsBP,sCAAsC,CAACI,SAA7D,EAAwE,GAAxE,EAA6E;AACzE;AACR;AACA;AACQI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKC,eAAZ;AACH,KANwE;AAOzEC,IAAAA,UAAU,EAAE,KAP6D;AAQzEC,IAAAA,YAAY,EAAE;AAR2D,GAA7E;AAUAL,EAAAA,MAAM,CAACC,cAAP,CAAsBP,sCAAsC,CAACI,SAA7D,EAAwE,aAAxE,EAAuF;AACnF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOC,WAAd;AACH,KAlCkF;AAmCnFC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOC,WAAP,GAAqB,CAACE,CAAtB;AACH,KArCkF;AAsCnFL,IAAAA,UAAU,EAAE,KAtCuE;AAuCnFC,IAAAA,YAAY,EAAE;AAvCqE,GAAvF;AAyCAL,EAAAA,MAAM,CAACC,cAAP,CAAsBP,sCAAsC,CAACI,SAA7D,EAAwE,YAAxE,EAAsF;AAClF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOI,UAAd;AACH,KAlCiF;AAmClFF,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOI,UAAP,GAAoB,CAACD,CAArB;AACH,KArCiF;AAsClFL,IAAAA,UAAU,EAAE,KAtCsE;AAuClFC,IAAAA,YAAY,EAAE;AAvCoE,GAAtF;AAyCA,SAAOX,sCAAP;AACH,CArGyE,CAqGxEF,yBArGwE,CAA1E;;AAsGA,SAASE,sCAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { PercentageVolumeOscillatorIndicator } from \"./PercentageVolumeOscillatorIndicator\";\n/**\n * Represents a IgxDataChartComponent Percentage Volume Oscillator (PVO) series.\n * Default required members: Volume\n*\n* You can use the `IgrPercentageVolumeOscillatorIndicator` to show the percentage difference volume.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*    <IgrPercentageVolumeOscillatorIndicator\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPercentageVolumeOscillatorIndicator({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* ```\n*/\nvar IgrPercentageVolumeOscillatorIndicator = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrPercentageVolumeOscillatorIndicator, _super);\n    function IgrPercentageVolumeOscillatorIndicator(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrPercentageVolumeOscillatorIndicator.prototype.createImplementation = function () {\n        return new PercentageVolumeOscillatorIndicator();\n    };\n    Object.defineProperty(IgrPercentageVolumeOscillatorIndicator.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPercentageVolumeOscillatorIndicator.prototype, \"shortPeriod\", {\n        /**\n         * Gets or sets the short moving average period for the current PercentageVolumeOscillatorIndicator object.\n         * The typical, and initial, value for short PVO periods is 10.\n        *\n        * You can use the `shortPeriod` to set the short moving average period.\n        *\n        * ```ts\n        * this.series.shortPeriod = 30;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *    <IgrPercentageVolumeOscillatorIndicator\n        *     name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     shortPeriod = {30} />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.shortPeriod;\n        },\n        set: function (v) {\n            this.i.shortPeriod = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPercentageVolumeOscillatorIndicator.prototype, \"longPeriod\", {\n        /**\n         * Gets or sets the short moving average period for the current PercentageVolumeOscillatorIndicator object.\n         * The typical, and initial, value for long PVO periods is 30.\n        *\n        * You can use the `longPeriod` to set the long moving average period.\n        *\n        * ```ts\n        * this.series.longPeriod = 30;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *    <IgrPercentageVolumeOscillatorIndicator\n        *     name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     longPeriod = {30} />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.longPeriod;\n        },\n        set: function (v) {\n            this.i.longPeriod = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrPercentageVolumeOscillatorIndicator;\n}(IgrStrategyBasedIndicator));\nexport { IgrPercentageVolumeOscillatorIndicator };\n"]},"metadata":{},"sourceType":"module"}