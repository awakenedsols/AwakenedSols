{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { ColumnFilterConditionDescriptionMetadata } from \"./ColumnFilterConditionDescriptionMetadata\";\nimport { ColumnComparisonFilterConditionDescription } from \"./ColumnComparisonFilterConditionDescription\";\n/**\n * @hidden\n */\n\nvar ColumnComparisonFilterConditionDescriptionMetadata =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(ColumnComparisonFilterConditionDescriptionMetadata, _super);\n\n  function ColumnComparisonFilterConditionDescriptionMetadata() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ColumnComparisonFilterConditionDescriptionMetadata.b = function (a) {\n    if (ColumnComparisonFilterConditionDescriptionMetadata.a == null) {\n      ColumnComparisonFilterConditionDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n      ColumnComparisonFilterConditionDescriptionMetadata.c(ColumnComparisonFilterConditionDescriptionMetadata.a);\n    }\n\n    if (a.g(ColumnComparisonFilterConditionDescriptionMetadata.a)) {\n      return;\n    }\n\n    a.s(ColumnComparisonFilterConditionDescriptionMetadata.a);\n  };\n\n  ColumnComparisonFilterConditionDescriptionMetadata.c = function (a) {\n    ColumnFilterConditionDescriptionMetadata.c(a);\n    a.item(\"Operator\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n    a.item(\"Operator@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n    a.item(\"ValueRef\", \"(w:Value,wf:Value)DataRef\");\n    a.item(\"IsCaseSensitive\", \"Boolean\");\n  };\n\n  ColumnComparisonFilterConditionDescriptionMetadata.d = function (a) {\n    ColumnComparisonFilterConditionDescriptionMetadata.b(a);\n    a.u(\"ColumnComparisonFilterCondition\", function () {\n      return new ColumnComparisonFilterConditionDescription();\n    });\n    a.t(\"ColumnComparisonFilterCondition\", ColumnComparisonFilterConditionDescriptionMetadata.a);\n  };\n\n  ColumnComparisonFilterConditionDescriptionMetadata.$t = markType(ColumnComparisonFilterConditionDescriptionMetadata, 'ColumnComparisonFilterConditionDescriptionMetadata');\n  ColumnComparisonFilterConditionDescriptionMetadata.a = null;\n  return ColumnComparisonFilterConditionDescriptionMetadata;\n}(Base);\n\nexport { ColumnComparisonFilterConditionDescriptionMetadata };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-core/esm5/lib/ColumnComparisonFilterConditionDescriptionMetadata.js"],"names":["__extends","Base","String_$type","markType","Dictionary$2","ColumnFilterConditionDescriptionMetadata","ColumnComparisonFilterConditionDescription","ColumnComparisonFilterConditionDescriptionMetadata","_super","apply","arguments","b","a","c","g","s","item","d","u","t","$t"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,YAAf,EAA6BC,QAA7B,QAA6C,QAA7C;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,wCAAT,QAAyD,4CAAzD;AACA,SAASC,0CAAT,QAA2D,8CAA3D;AACA;AACA;AACA;;AACA,IAAIC,kDAAkD;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;AACpGR,EAAAA,SAAS,CAACO,kDAAD,EAAqDC,MAArD,CAAT;;AACA,WAASD,kDAAT,GAA8D;AAC1D,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDH,EAAAA,kDAAkD,CAACI,CAAnD,GAAuD,UAAUC,CAAV,EAAa;AAChE,QAAIL,kDAAkD,CAACK,CAAnD,IAAwD,IAA5D,EAAkE;AAC9DL,MAAAA,kDAAkD,CAACK,CAAnD,GAAuD,IAAIR,YAAJ,CAAiBF,YAAjB,EAA+BA,YAA/B,EAA6C,CAA7C,CAAvD;AACAK,MAAAA,kDAAkD,CAACM,CAAnD,CAAqDN,kDAAkD,CAACK,CAAxG;AACH;;AACD,QAAIA,CAAC,CAACE,CAAF,CAAIP,kDAAkD,CAACK,CAAvD,CAAJ,EAA+D;AAC3D;AACH;;AACDA,IAAAA,CAAC,CAACG,CAAF,CAAIR,kDAAkD,CAACK,CAAvD;AACH,GATD;;AAUAL,EAAAA,kDAAkD,CAACM,CAAnD,GAAuD,UAAUD,CAAV,EAAa;AAChEP,IAAAA,wCAAwC,CAACQ,CAAzC,CAA2CD,CAA3C;AACAA,IAAAA,CAAC,CAACI,IAAF,CAAO,UAAP,EAAmB,2DAAnB;AACAJ,IAAAA,CAAC,CAACI,IAAF,CAAO,gBAAP,EAAyB,yaAAzB;AACAJ,IAAAA,CAAC,CAACI,IAAF,CAAO,UAAP,EAAmB,2BAAnB;AACAJ,IAAAA,CAAC,CAACI,IAAF,CAAO,iBAAP,EAA0B,SAA1B;AACH,GAND;;AAOAT,EAAAA,kDAAkD,CAACU,CAAnD,GAAuD,UAAUL,CAAV,EAAa;AAChEL,IAAAA,kDAAkD,CAACI,CAAnD,CAAqDC,CAArD;AACAA,IAAAA,CAAC,CAACM,CAAF,CAAI,iCAAJ,EAAuC,YAAY;AAAE,aAAO,IAAIZ,0CAAJ,EAAP;AAA0D,KAA/G;AACAM,IAAAA,CAAC,CAACO,CAAF,CAAI,iCAAJ,EAAuCZ,kDAAkD,CAACK,CAA1F;AACH,GAJD;;AAKAL,EAAAA,kDAAkD,CAACa,EAAnD,GAAwDjB,QAAQ,CAACI,kDAAD,EAAqD,oDAArD,CAAhE;AACAA,EAAAA,kDAAkD,CAACK,CAAnD,GAAuD,IAAvD;AACA,SAAOL,kDAAP;AACH,CA9BqF,CA8BpFN,IA9BoF,CAAtF;;AA+BA,SAASM,kDAAT","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, markType } from \"./type\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { ColumnFilterConditionDescriptionMetadata } from \"./ColumnFilterConditionDescriptionMetadata\";\nimport { ColumnComparisonFilterConditionDescription } from \"./ColumnComparisonFilterConditionDescription\";\n/**\n * @hidden\n */\nvar ColumnComparisonFilterConditionDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(ColumnComparisonFilterConditionDescriptionMetadata, _super);\n    function ColumnComparisonFilterConditionDescriptionMetadata() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    ColumnComparisonFilterConditionDescriptionMetadata.b = function (a) {\n        if (ColumnComparisonFilterConditionDescriptionMetadata.a == null) {\n            ColumnComparisonFilterConditionDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);\n            ColumnComparisonFilterConditionDescriptionMetadata.c(ColumnComparisonFilterConditionDescriptionMetadata.a);\n        }\n        if (a.g(ColumnComparisonFilterConditionDescriptionMetadata.a)) {\n            return;\n        }\n        a.s(ColumnComparisonFilterConditionDescriptionMetadata.a);\n    };\n    ColumnComparisonFilterConditionDescriptionMetadata.c = function (a) {\n        ColumnFilterConditionDescriptionMetadata.c(a);\n        a.item(\"Operator\", \"ExportedType:string:ColumnComparisonConditionOperatorType\");\n        a.item(\"Operator@names\", \"Equals;NotEquals;LessThan;LessThanOrEqualTo;GreaterThan;GreaterThanOrEqualTo;Top;Bottom;TopPercentile;BottomPercentile;True;False;Contains;DoesNotContain;StartsWith;DoesNotStartWith;EndsWith;DoesNotEndWith;Today;Tomorrow;Yesterday;NextWeek;ThisWeek;LastWeek;NextMonth;ThisMonth;LastMonth;NextQuarter;ThisQuarter;LastQuarter;NextYear;ThisYear;LastYear;YearToDate;Q1;Q2;Q3;Q4;Month;Year;Empty;NotEmpty;IsNull;IsNotNull;Custom\");\n        a.item(\"ValueRef\", \"(w:Value,wf:Value)DataRef\");\n        a.item(\"IsCaseSensitive\", \"Boolean\");\n    };\n    ColumnComparisonFilterConditionDescriptionMetadata.d = function (a) {\n        ColumnComparisonFilterConditionDescriptionMetadata.b(a);\n        a.u(\"ColumnComparisonFilterCondition\", function () { return new ColumnComparisonFilterConditionDescription(); });\n        a.t(\"ColumnComparisonFilterCondition\", ColumnComparisonFilterConditionDescriptionMetadata.a);\n    };\n    ColumnComparisonFilterConditionDescriptionMetadata.$t = markType(ColumnComparisonFilterConditionDescriptionMetadata, 'ColumnComparisonFilterConditionDescriptionMetadata');\n    ColumnComparisonFilterConditionDescriptionMetadata.a = null;\n    return ColumnComparisonFilterConditionDescriptionMetadata;\n}(Base));\nexport { ColumnComparisonFilterConditionDescriptionMetadata };\n"]},"metadata":{},"sourceType":"module"}