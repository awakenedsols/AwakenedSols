{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { IgrAxis } from './igr-axis';\nimport { toPoint, fromRect, ensureBool } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent category-based axes.\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* \tthis.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* \tthis.columnSeries1.dataSource = this.categoryData;\n* \tthis.columnSeries1.xAxis = this.categoryXAxis;\n* \tthis.columnSeries1.yAxis = this.numericYAxis;\n* \tthis.columnSeries1.xAxisName = \"categoryXAxis\";\n* \tthis.columnSeries1.yAxisName = \"numericYAxis\";\n* \tthis.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\n\nvar IgrCategoryAxisBase =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrCategoryAxisBase, _super);\n\n  function IgrCategoryAxisBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._chartLevelData = null;\n    _this._dataSource = null;\n    return _this;\n  }\n\n  IgrCategoryAxisBase.prototype.provideData = function (data) {\n    this._chartLevelData = data;\n    this.updateDataSource();\n  };\n\n  IgrCategoryAxisBase.prototype.updateDataSource = function () {\n    if (this._dataSource == null) {\n      this.i.itemsSource = this._chartLevelData;\n    } else {\n      this.i.itemsSource = this._dataSource;\n    }\n  };\n\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"dataSource\", {\n    get: function () {\n      if (this._dataSource != null) {\n        return this._dataSource;\n      }\n\n      return this.i.itemsSource;\n    },\n    set: function (value) {\n      this._dataSource = value;\n      this.updateDataSource(); //console.log(\"setting axis data source: \" + value)\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"i\", {\n    /**\n                             * @hidden\n                             */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"isContinuous\", {\n    /**\n    * Gets if the current axis is a continuous rather than a discrete scale\n    */\n    get: function () {\n      return this.i.cc;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"isCategory\", {\n    /**\n     * Checks if the axis is of category axis type\n    */\n    get: function () {\n      return this.i.ca;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"itemsCount\", {\n    /**\n     * Gets the number of items in the current category axis items source.\n    */\n    get: function () {\n      return this.i.lf;\n    },\n    set: function (v) {\n      this.i.lf = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"gap\", {\n    /**\n     * Gets or sets the amount of space between adjacent categories for the current axis object.\n     * The gap is silently clamped to the range [0, 1] when used.\n    *\n    * Use the `gap` property to configure the spacing between items on a category axis with item spacing.\n    *\n    * A `gap` of 0 allocates no space between items.  A `gap` of 1 allocates a space between items equal to the width of one item.\n    *\n    * To set the item spacing to 75% the width of one item, set the `gap` to 0.75, as in this code:\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tref={this.onChartRef}\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" gap={0.4} />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.k0;\n    },\n    set: function (v) {\n      this.i.k0 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"maximumGap\", {\n    /**\n     * Gets or sets the maximum gap value to allow. This defaults to 1.0.\n    */\n    get: function () {\n      return this.i.k7;\n    },\n    set: function (v) {\n      this.i.k7 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"minimumGapSize\", {\n    /**\n     * Gets or sets the minimum amount of pixels to use for the gap between categories, if possible.\n    */\n    get: function () {\n      return this.i.k8;\n    },\n    set: function (v) {\n      this.i.k8 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"overlap\", {\n    /**\n     * Gets or sets the amount of overlap between adjacent categories for the current axis object.\n     * The overlap is silently clamped to the range [-1, 1] when used.\n    *\n    * Use the `overlap` property to configure the spacing between items on a category axis with item spacing and more than one series.\n    *\n    * An `overlap` of 0 places grouped items adjacent to each other.  An `overlap` of 1 places grouped items in the same axis space, completely overlapping.  An `overlap` of -1 places a space between grouped items equal to the width of one item.\n    *\n    * To place grouped items with 75% overlap, set the `overlap` to 0.75, as in this code:\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" overlap={1} />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\"\n    * />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.k9;\n    },\n    set: function (v) {\n      this.i.k9 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrCategoryAxisBase.prototype, \"useClusteringMode\", {\n    /**\n     * Gets or sets whether the category axis should use clustering display mode even if no series are present that would force clustering mode.\n    *\n    * `useClusteringMode` applies grouping and spacing to a category axis equivalent to the grouping that occurs when grouping series, such as ColumnSeries, are used.\n    *\n    * Try setting it on an axis displaying financial series to adjust the spacing on the left and right sides of the axis:\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" useClusteringMode={2} />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ku;\n    },\n    set: function (v) {\n      this.i.ku = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrCategoryAxisBase.prototype.getCategoryBoundingBox = function (point, useInterpolation, singularWidth) {\n    var iv = this.i.md(toPoint(point), useInterpolation, singularWidth);\n    return fromRect(iv);\n  };\n\n  IgrCategoryAxisBase.prototype.getCategoryBoundingBoxHelper = function (point, useInterpolation, singularWidth, isVertical) {\n    var iv = this.i.me(toPoint(point), useInterpolation, singularWidth, isVertical);\n    return fromRect(iv);\n  };\n  /**\n   * Unscales a value from screen space into axis space.\n  \r\n  * @param unscaledValue  * The scaled value in screen coordinates to unscale into axis space.\n  */\n\n\n  IgrCategoryAxisBase.prototype.unscaleValue = function (unscaledValue) {\n    var iv = this.i.lb(unscaledValue);\n    return iv;\n  };\n\n  IgrCategoryAxisBase.prototype.notifySetItem = function (index, oldItem, newItem) {\n    this.i.ly(index, oldItem, newItem);\n  };\n  /**\n   * Used to manually notify the axis that the data source has reset or cleared its items.\n  \r\n  */\n\n\n  IgrCategoryAxisBase.prototype.notifyClearItems = function () {\n    this.i.lv();\n  };\n\n  IgrCategoryAxisBase.prototype.notifyInsertItem = function (index, newItem) {\n    this.i.lw(index, newItem);\n  };\n\n  IgrCategoryAxisBase.prototype.notifyRemoveItem = function (index, oldItem) {\n    this.i.lx(index, oldItem);\n  };\n\n  return IgrCategoryAxisBase;\n}(IgrAxis);\n\nexport { IgrCategoryAxisBase };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-category-axis-base.js"],"names":["__extends","IgrAxis","toPoint","fromRect","ensureBool","IgrCategoryAxisBase","_super","props","_this","call","_chartLevelData","_dataSource","prototype","provideData","data","updateDataSource","i","itemsSource","Object","defineProperty","get","set","value","enumerable","configurable","_implementation","cc","ca","lf","v","k0","k7","k8","k9","ku","getCategoryBoundingBox","point","useInterpolation","singularWidth","iv","md","getCategoryBoundingBoxHelper","isVertical","me","unscaleValue","unscaledValue","lb","notifySetItem","index","oldItem","newItem","ly","notifyClearItems","lv","notifyInsertItem","lw","notifyRemoveItem","lx"],"mappings":"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","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { IgrAxis } from './igr-axis';\nimport { toPoint, fromRect, ensureBool } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent category-based axes.\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* \tthis.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* \tthis.columnSeries1.dataSource = this.categoryData;\n* \tthis.columnSeries1.xAxis = this.categoryXAxis;\n* \tthis.columnSeries1.yAxis = this.numericYAxis;\n* \tthis.columnSeries1.xAxisName = \"categoryXAxis\";\n* \tthis.columnSeries1.yAxisName = \"numericYAxis\";\n* \tthis.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\nvar IgrCategoryAxisBase = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrCategoryAxisBase, _super);\n    function IgrCategoryAxisBase(props) {\n        var _this = _super.call(this, props) || this;\n        _this._chartLevelData = null;\n        _this._dataSource = null;\n        return _this;\n    }\n    IgrCategoryAxisBase.prototype.provideData = function (data) {\n        this._chartLevelData = data;\n        this.updateDataSource();\n    };\n    IgrCategoryAxisBase.prototype.updateDataSource = function () {\n        if (this._dataSource == null) {\n            this.i.itemsSource = this._chartLevelData;\n        }\n        else {\n            this.i.itemsSource = this._dataSource;\n        }\n    };\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"dataSource\", {\n        get: function () {\n            if (this._dataSource != null) {\n                return this._dataSource;\n            }\n            return this.i.itemsSource;\n        },\n        set: function (value) {\n            this._dataSource = value;\n            this.updateDataSource();\n            //console.log(\"setting axis data source: \" + value)\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"i\", {\n        /**\n                                 * @hidden\n                                 */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"isContinuous\", {\n        /**\n     * Gets if the current axis is a continuous rather than a discrete scale\n    */\n        get: function () {\n            return this.i.cc;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"isCategory\", {\n        /**\n         * Checks if the axis is of category axis type\n        */\n        get: function () {\n            return this.i.ca;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"itemsCount\", {\n        /**\n         * Gets the number of items in the current category axis items source.\n        */\n        get: function () {\n            return this.i.lf;\n        },\n        set: function (v) {\n            this.i.lf = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"gap\", {\n        /**\n         * Gets or sets the amount of space between adjacent categories for the current axis object.\n         * The gap is silently clamped to the range [0, 1] when used.\n        *\n        * Use the `gap` property to configure the spacing between items on a category axis with item spacing.\n        *\n        * A `gap` of 0 allocates no space between items.  A `gap` of 1 allocates a space between items equal to the width of one item.\n        *\n        * To set the item spacing to 75% the width of one item, set the `gap` to 0.75, as in this code:\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \tref={this.onChartRef}\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" gap={0.4} />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.k0;\n        },\n        set: function (v) {\n            this.i.k0 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"maximumGap\", {\n        /**\n         * Gets or sets the maximum gap value to allow. This defaults to 1.0.\n        */\n        get: function () {\n            return this.i.k7;\n        },\n        set: function (v) {\n            this.i.k7 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"minimumGapSize\", {\n        /**\n         * Gets or sets the minimum amount of pixels to use for the gap between categories, if possible.\n        */\n        get: function () {\n            return this.i.k8;\n        },\n        set: function (v) {\n            this.i.k8 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"overlap\", {\n        /**\n         * Gets or sets the amount of overlap between adjacent categories for the current axis object.\n         * The overlap is silently clamped to the range [-1, 1] when used.\n        *\n        * Use the `overlap` property to configure the spacing between items on a category axis with item spacing and more than one series.\n        *\n        * An `overlap` of 0 places grouped items adjacent to each other.  An `overlap` of 1 places grouped items in the same axis space, completely overlapping.  An `overlap` of -1 places a space between grouped items equal to the width of one item.\n        *\n        * To place grouped items with 75% overlap, set the `overlap` to 0.75, as in this code:\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" overlap={1} />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\"\n        * />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.k9;\n        },\n        set: function (v) {\n            this.i.k9 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrCategoryAxisBase.prototype, \"useClusteringMode\", {\n        /**\n         * Gets or sets whether the category axis should use clustering display mode even if no series are present that would force clustering mode.\n        *\n        * `useClusteringMode` applies grouping and spacing to a category axis equivalent to the grouping that occurs when grouping series, such as ColumnSeries, are used.\n        *\n        * Try setting it on an axis displaying financial series to adjust the spacing on the left and right sides of the axis:\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" useClusteringMode={2} />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ku;\n        },\n        set: function (v) {\n            this.i.ku = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrCategoryAxisBase.prototype.getCategoryBoundingBox = function (point, useInterpolation, singularWidth) {\n        var iv = this.i.md(toPoint(point), useInterpolation, singularWidth);\n        return fromRect(iv);\n    };\n    IgrCategoryAxisBase.prototype.getCategoryBoundingBoxHelper = function (point, useInterpolation, singularWidth, isVertical) {\n        var iv = this.i.me(toPoint(point), useInterpolation, singularWidth, isVertical);\n        return fromRect(iv);\n    };\n    /**\n     * Unscales a value from screen space into axis space.\n    \r\n    * @param unscaledValue  * The scaled value in screen coordinates to unscale into axis space.\n    */\n    IgrCategoryAxisBase.prototype.unscaleValue = function (unscaledValue) {\n        var iv = this.i.lb(unscaledValue);\n        return (iv);\n    };\n    IgrCategoryAxisBase.prototype.notifySetItem = function (index, oldItem, newItem) {\n        this.i.ly(index, oldItem, newItem);\n    };\n    /**\n     * Used to manually notify the axis that the data source has reset or cleared its items.\n    \r\n    */\n    IgrCategoryAxisBase.prototype.notifyClearItems = function () {\n        this.i.lv();\n    };\n    IgrCategoryAxisBase.prototype.notifyInsertItem = function (index, newItem) {\n        this.i.lw(index, newItem);\n    };\n    IgrCategoryAxisBase.prototype.notifyRemoveItem = function (index, oldItem) {\n        this.i.lx(index, oldItem);\n    };\n    return IgrCategoryAxisBase;\n}(IgrAxis));\nexport { IgrCategoryAxisBase };\n"]},"metadata":{},"sourceType":"module"}