{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { markEnum } from \"./type\";\n/**\n * Indentifies the function type for a filter function expression.\n */\n\nexport var FilterExpressionFunctionType = /*@__PURE__*/function (FilterExpressionFunctionType) {\n  /**\n   * Determines if a string contains another.\n   */\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Contains\"] = 0] = \"Contains\";\n  /**\n   * Determines if a string ends with another.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"EndsWith\"] = 1] = \"EndsWith\";\n  /**\n   * Determines if a string starts with another.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"StartsWith\"] = 2] = \"StartsWith\";\n  /**\n   * Gets the length of a string.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Length\"] = 3] = \"Length\";\n  /**\n   * Gets the index of a string within another.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"IndexOf\"] = 4] = \"IndexOf\";\n  /**\n   * Replaces instances of a string within another with a separate string.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Replace\"] = 5] = \"Replace\";\n  /**\n   * Gets the substring of a string based on start index and optionally length.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Substring\"] = 6] = \"Substring\";\n  /**\n   * Gets the lowercase representation of a string.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"ToLower\"] = 7] = \"ToLower\";\n  /**\n   * Gets the uppercase representation of a string.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"ToUpper\"] = 8] = \"ToUpper\";\n  /**\n   * Trims the starting and ending whitespace from a string.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Trim\"] = 9] = \"Trim\";\n  /**\n   * Concatenates strings together.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Concat\"] = 10] = \"Concat\";\n  /**\n   * Gets the day from a date/time.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Day\"] = 11] = \"Day\";\n  /**\n   * Gets the hour from a date/time.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Hour\"] = 12] = \"Hour\";\n  /**\n   * Gets the minute from a date/time.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Minute\"] = 13] = \"Minute\";\n  /**\n   * Gets the month from a date/time.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Month\"] = 14] = \"Month\";\n  /**\n   * Gets teh second from a date/time.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Second\"] = 15] = \"Second\";\n  /**\n   * Gets the year from a date/time.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Year\"] = 16] = \"Year\";\n  /**\n   * Rounds a numeric value.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Round\"] = 17] = \"Round\";\n  /**\n   * Floors a numeric value.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Floor\"] = 18] = \"Floor\";\n  /**\n   * Ceilings a numeric value.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Ceiling\"] = 19] = \"Ceiling\";\n  /**\n   * Gets the date from a date/time.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Date\"] = 20] = \"Date\";\n  /**\n   * Gets the time from a date/time.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Time\"] = 21] = \"Time\";\n  /**\n   * Gets the current date/time.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Now\"] = 22] = \"Now\";\n  /**\n   * Gets whether the value matches a certain type.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"IsOf\"] = 23] = \"IsOf\";\n  /**\n   * Gets a value cast to a specific type.\n   */\n\n  FilterExpressionFunctionType[FilterExpressionFunctionType[\"Cast\"] = 24] = \"Cast\";\n  return FilterExpressionFunctionType;\n}({});\n/**\n * @hidden\n */\n\nexport var FilterExpressionFunctionType_$type = /*@__PURE__*/markEnum('FilterExpressionFunctionType', 'Contains,0|EndsWith,1|StartsWith,2|Length,3|IndexOf,4|Replace,5|Substring,6|ToLower,7|ToUpper,8|Trim,9|Concat,10|Day,11|Hour,12|Minute,13|Month,14|Second,15|Year,16|Round,17|Floor,18|Ceiling,19|Date,20|Time,21|Now,22|IsOf,23|Cast,24');","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-core/esm5/lib/FilterExpressionFunctionType.js"],"names":["markEnum","FilterExpressionFunctionType","FilterExpressionFunctionType_$type"],"mappings":"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","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { markEnum } from \"./type\";\n/**\n * Indentifies the function type for a filter function expression.\n */\nexport var FilterExpressionFunctionType = /*@__PURE__*/ (function (FilterExpressionFunctionType) {\n    /**\n     * Determines if a string contains another.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Contains\"] = 0] = \"Contains\";\n    /**\n     * Determines if a string ends with another.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"EndsWith\"] = 1] = \"EndsWith\";\n    /**\n     * Determines if a string starts with another.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"StartsWith\"] = 2] = \"StartsWith\";\n    /**\n     * Gets the length of a string.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Length\"] = 3] = \"Length\";\n    /**\n     * Gets the index of a string within another.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"IndexOf\"] = 4] = \"IndexOf\";\n    /**\n     * Replaces instances of a string within another with a separate string.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Replace\"] = 5] = \"Replace\";\n    /**\n     * Gets the substring of a string based on start index and optionally length.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Substring\"] = 6] = \"Substring\";\n    /**\n     * Gets the lowercase representation of a string.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"ToLower\"] = 7] = \"ToLower\";\n    /**\n     * Gets the uppercase representation of a string.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"ToUpper\"] = 8] = \"ToUpper\";\n    /**\n     * Trims the starting and ending whitespace from a string.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Trim\"] = 9] = \"Trim\";\n    /**\n     * Concatenates strings together.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Concat\"] = 10] = \"Concat\";\n    /**\n     * Gets the day from a date/time.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Day\"] = 11] = \"Day\";\n    /**\n     * Gets the hour from a date/time.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Hour\"] = 12] = \"Hour\";\n    /**\n     * Gets the minute from a date/time.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Minute\"] = 13] = \"Minute\";\n    /**\n     * Gets the month from a date/time.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Month\"] = 14] = \"Month\";\n    /**\n     * Gets teh second from a date/time.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Second\"] = 15] = \"Second\";\n    /**\n     * Gets the year from a date/time.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Year\"] = 16] = \"Year\";\n    /**\n     * Rounds a numeric value.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Round\"] = 17] = \"Round\";\n    /**\n     * Floors a numeric value.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Floor\"] = 18] = \"Floor\";\n    /**\n     * Ceilings a numeric value.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Ceiling\"] = 19] = \"Ceiling\";\n    /**\n     * Gets the date from a date/time.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Date\"] = 20] = \"Date\";\n    /**\n     * Gets the time from a date/time.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Time\"] = 21] = \"Time\";\n    /**\n     * Gets the current date/time.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Now\"] = 22] = \"Now\";\n    /**\n     * Gets whether the value matches a certain type.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"IsOf\"] = 23] = \"IsOf\";\n    /**\n     * Gets a value cast to a specific type.\n     */\n    FilterExpressionFunctionType[FilterExpressionFunctionType[\"Cast\"] = 24] = \"Cast\";\n    return FilterExpressionFunctionType;\n})({});\n/**\n * @hidden\n */\nexport var FilterExpressionFunctionType_$type = /*@__PURE__*/ markEnum('FilterExpressionFunctionType', 'Contains,0|EndsWith,1|StartsWith,2|Length,3|IndexOf,4|Replace,5|Substring,6|ToLower,7|ToUpper,8|Trim,9|Concat,10|Day,11|Hour,12|Minute,13|Month,14|Second,15|Year,16|Round,17|Floor,18|Ceiling,19|Date,20|Time,21|Now,22|IsOf,23|Cast,24');\n"]},"metadata":{},"sourceType":"module"}