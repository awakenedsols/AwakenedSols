{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { IgrAnchoredCategorySeries } from \"./igr-anchored-category-series\";\nimport { toPoint, fromRect, fromPoint } from \"igniteui-react-core\";\n/**\n * Base class for anchored category series with a category x-axis and a numeric y-axis.\n*\n* Instantiate HorizontalAnchoredCategorySeries\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* this.columnSeries1.dataSource = this.categoryData;\n* this.columnSeries1.xAxis = this.categoryXAxis;\n* this.columnSeries1.yAxis = this.numericYAxis;\n* this.columnSeries1.xAxisName = \"categoryXAxis\";\n* this.columnSeries1.yAxisName = \"numericYAxis\";\n* this.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\n\nvar IgrHorizontalAnchoredCategorySeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrHorizontalAnchoredCategorySeries, _super);\n\n  function IgrHorizontalAnchoredCategorySeries(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._xAxisName = null;\n    _this._yAxisName = null;\n    return _this;\n  }\n\n  Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"xAxis\", {\n    /**\n     * Gets or sets the effective x-axis for this series.\n    *\n    * Instantiate xAxis\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n    * this.columnSeries1.dataSource = this.categoryData;\n    * this.columnSeries1.xAxis = this.categoryXAxis;\n    * this.columnSeries1.yAxis = this.numericYAxis;\n    * this.columnSeries1.xAxisName = \"categoryXAxis\";\n    * this.columnSeries1.yAxisName = \"numericYAxis\";\n    * this.columnSeries1.valueMemberPath = \"USA\";\n    * ```\n    */\n    get: function () {\n      if (this.i.xAxis == null) {\n        return null;\n      }\n\n      if (!this.i.xAxis.externalObject) {\n        var e = IgrCategoryAxisBase._createFromInternal(this.i.xAxis);\n\n        if (e) {\n          e._implementation = this.i.xAxis;\n        }\n\n        this.i.xAxis.externalObject = e;\n      }\n\n      return this.i.xAxis.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"xAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve xAxis from markup.\n    */\n    get: function () {\n      return this._xAxisName;\n    },\n    set: function (v) {\n      this._xAxisName = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"yAxis\", {\n    /**\n     * Gets or sets the effective y-axis for this series.\n    *\n    * Instantiate yAxis\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n    * this.columnSeries1.dataSource = this.categoryData;\n    * this.columnSeries1.xAxis = this.categoryXAxis;\n    * this.columnSeries1.yAxis = this.numericYAxis;\n    * this.columnSeries1.xAxisName = \"categoryXAxis\";\n    * this.columnSeries1.yAxisName = \"numericYAxis\";\n    * this.columnSeries1.valueMemberPath = \"USA\";\n    * ```\n    */\n    get: function () {\n      if (this.i.yAxis == null) {\n        return null;\n      }\n\n      if (!this.i.yAxis.externalObject) {\n        var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n\n        if (e) {\n          e._implementation = this.i.yAxis;\n        }\n\n        this.i.yAxis.externalObject = e;\n      }\n\n      return this.i.yAxis.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"yAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve yAxis from markup.\n    */\n    get: function () {\n      return this._yAxisName;\n    },\n    set: function (v) {\n      this._yAxisName = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrHorizontalAnchoredCategorySeries.prototype.bindAxes = function (axes) {\n    _super.prototype.bindAxes.call(this, axes);\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.xAxisName && this.xAxisName.length > 0 && axes[i].name == this.xAxisName) {\n        this.xAxis = axes[i];\n      }\n    }\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.yAxisName && this.yAxisName.length > 0 && axes[i].name == this.yAxisName) {\n        this.yAxis = axes[i];\n      }\n    }\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype.findByName = function (name) {\n    var baseResult = _super.prototype.findByName.call(this, name);\n\n    if (baseResult) {\n      return baseResult;\n    }\n\n    if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {\n      return this.xAxis;\n    }\n\n    if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {\n      return this.yAxis;\n    }\n\n    return null;\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.xAxis && this.xAxis._styling) {\n      this.xAxis._styling(container, component, this);\n    }\n\n    if (this.yAxis && this.yAxis._styling) {\n      this.yAxis._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n   * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinates for which to get a value marker bounding box for\n  *\n  * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n  *\n  * <!-- Angular JS -->\n  *\n  *     var x = financialSeries.GetSeriesValueMarkerBoundingBox(new IgxPoint());\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValueMarkerBoundingBox = function (world) {\n    var iv = this.i.px(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * Returns the offset value for this series if grouped on a category axis.\n  \r\n  *\n  * You can use the `getOffsetValue` to get the offset value for this series if grouped on a category axis.\n  *\n  * <!-- Angular JS -->\n  *\n  *       var g = series.getOffsetValue();\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getOffsetValue = function () {\n    var iv = this.i.getOffsetValue();\n    return iv;\n  };\n  /**\n   * Returns the width of the category grouping this series is in.\n  \r\n  *\n  * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n  *\n  * <!-- Angular JS -->\n  *\n  *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getCategoryWidth = function () {\n    var iv = this.i.getCategoryWidth();\n    return iv;\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.gj(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.hj(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.hh(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.pm(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n  /**\n   * Determine if object can be used as XAxis\n  \r\n  * @param axis  * The object to check\n  *\n  * You can use the `canUseAsXAxis` method to determine if object can be used as XAxis\n  *\n  * <!-- Angular JS -->\n  *\n  *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n  */\n\n\n  IgrHorizontalAnchoredCategorySeries.prototype.canUseAsXAxis = function (axis) {\n    var iv = this.i.uw(axis);\n    return iv;\n  };\n  /**\n   * Determine if object can be used as YAxis\n  \r\n  * @param axis  * The object to check\n  *\n  * You can use the `canUseAsYAxis` method to determine if object can be used as YAxis\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalAnchoredCategorySeries.prototype.canUseAsYAxis = function (axis) {\n    var iv = this.i.ux(axis);\n    return iv;\n  };\n\n  return IgrHorizontalAnchoredCategorySeries;\n}(IgrAnchoredCategorySeries);\n\nexport { IgrHorizontalAnchoredCategorySeries };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-horizontal-anchored-category-series.js"],"names":["__extends","IgrCategoryAxisBase","IgrNumericYAxis","IgrAnchoredCategorySeries","toPoint","fromRect","fromPoint","IgrHorizontalAnchoredCategorySeries","_super","props","_this","call","_xAxisName","_yAxisName","Object","defineProperty","prototype","get","_implementation","enumerable","configurable","i","xAxis","externalObject","e","_createFromInternal","set","v","_stylingContainer","_styling","yAxis","bindAxes","axes","length","xAxisName","name","yAxisName","findByName","baseResult","container","component","parent","_inStyling","getSeriesValueMarkerBoundingBox","world","iv","px","getOffsetValue","getCategoryWidth","getSeriesValue","useInterpolation","skipUnknowns","gj","getPreviousOrExactIndex","hj","getNextOrExactIndex","hh","getSeriesValuePosition","pm","canUseAsXAxis","axis","uw","canUseAsYAxis","ux"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { IgrAnchoredCategorySeries } from \"./igr-anchored-category-series\";\nimport { toPoint, fromRect, fromPoint } from \"igniteui-react-core\";\n/**\n * Base class for anchored category series with a category x-axis and a numeric y-axis.\n*\n* Instantiate HorizontalAnchoredCategorySeries\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* this.columnSeries1.dataSource = this.categoryData;\n* this.columnSeries1.xAxis = this.categoryXAxis;\n* this.columnSeries1.yAxis = this.numericYAxis;\n* this.columnSeries1.xAxisName = \"categoryXAxis\";\n* this.columnSeries1.yAxisName = \"numericYAxis\";\n* this.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\nvar IgrHorizontalAnchoredCategorySeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrHorizontalAnchoredCategorySeries, _super);\n    function IgrHorizontalAnchoredCategorySeries(props) {\n        var _this = _super.call(this, props) || this;\n        _this._xAxisName = null;\n        _this._yAxisName = null;\n        return _this;\n    }\n    Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"xAxis\", {\n        /**\n         * Gets or sets the effective x-axis for this series.\n        *\n        * Instantiate xAxis\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n        * this.columnSeries1.dataSource = this.categoryData;\n        * this.columnSeries1.xAxis = this.categoryXAxis;\n        * this.columnSeries1.yAxis = this.numericYAxis;\n        * this.columnSeries1.xAxisName = \"categoryXAxis\";\n        * this.columnSeries1.yAxisName = \"numericYAxis\";\n        * this.columnSeries1.valueMemberPath = \"USA\";\n        * ```\n        */\n        get: function () {\n            if (this.i.xAxis == null) {\n                return null;\n            }\n            if (!this.i.xAxis.externalObject) {\n                var e = IgrCategoryAxisBase._createFromInternal(this.i.xAxis);\n                if (e) {\n                    e._implementation = this.i.xAxis;\n                }\n                this.i.xAxis.externalObject = e;\n            }\n            return this.i.xAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"xAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve xAxis from markup.\n        */\n        get: function () {\n            return this._xAxisName;\n        },\n        set: function (v) {\n            this._xAxisName = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"yAxis\", {\n        /**\n         * Gets or sets the effective y-axis for this series.\n        *\n        * Instantiate yAxis\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n        * this.columnSeries1.dataSource = this.categoryData;\n        * this.columnSeries1.xAxis = this.categoryXAxis;\n        * this.columnSeries1.yAxis = this.numericYAxis;\n        * this.columnSeries1.xAxisName = \"categoryXAxis\";\n        * this.columnSeries1.yAxisName = \"numericYAxis\";\n        * this.columnSeries1.valueMemberPath = \"USA\";\n        * ```\n        */\n        get: function () {\n            if (this.i.yAxis == null) {\n                return null;\n            }\n            if (!this.i.yAxis.externalObject) {\n                var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n                if (e) {\n                    e._implementation = this.i.yAxis;\n                }\n                this.i.yAxis.externalObject = e;\n            }\n            return this.i.yAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalAnchoredCategorySeries.prototype, \"yAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve yAxis from markup.\n        */\n        get: function () {\n            return this._yAxisName;\n        },\n        set: function (v) {\n            this._yAxisName = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrHorizontalAnchoredCategorySeries.prototype.bindAxes = function (axes) {\n        _super.prototype.bindAxes.call(this, axes);\n        for (var i = 0; i < axes.length; i++) {\n            if (this.xAxisName && this.xAxisName.length > 0 &&\n                axes[i].name == this.xAxisName) {\n                this.xAxis = axes[i];\n            }\n        }\n        for (var i = 0; i < axes.length; i++) {\n            if (this.yAxisName && this.yAxisName.length > 0 &&\n                axes[i].name == this.yAxisName) {\n                this.yAxis = axes[i];\n            }\n        }\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype.findByName = function (name) {\n        var baseResult = _super.prototype.findByName.call(this, name);\n        if (baseResult) {\n            return baseResult;\n        }\n        if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {\n            return this.xAxis;\n        }\n        if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {\n            return this.yAxis;\n        }\n        return null;\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.xAxis && this.xAxis._styling) {\n            this.xAxis._styling(container, component, this);\n        }\n        if (this.yAxis && this.yAxis._styling) {\n            this.yAxis._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    /**\n     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinates for which to get a value marker bounding box for\n    *\n    * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n    *\n    * <!-- Angular JS -->\n    *\n    *     var x = financialSeries.GetSeriesValueMarkerBoundingBox(new IgxPoint());\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValueMarkerBoundingBox = function (world) {\n        var iv = this.i.px(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * Returns the offset value for this series if grouped on a category axis.\n    \r\n    *\n    * You can use the `getOffsetValue` to get the offset value for this series if grouped on a category axis.\n    *\n    * <!-- Angular JS -->\n    *\n    *       var g = series.getOffsetValue();\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalAnchoredCategorySeries.prototype.getOffsetValue = function () {\n        var iv = this.i.getOffsetValue();\n        return (iv);\n    };\n    /**\n     * Returns the width of the category grouping this series is in.\n    \r\n    *\n    * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n    *\n    * <!-- Angular JS -->\n    *\n    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalAnchoredCategorySeries.prototype.getCategoryWidth = function () {\n        var iv = this.i.getCategoryWidth();\n        return (iv);\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.gj(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.hj(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.hh(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalAnchoredCategorySeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.pm(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    /**\n     * Determine if object can be used as XAxis\n    \r\n    * @param axis  * The object to check\n    *\n    * You can use the `canUseAsXAxis` method to determine if object can be used as XAxis\n    *\n    * <!-- Angular JS -->\n    *\n    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n    */\n    IgrHorizontalAnchoredCategorySeries.prototype.canUseAsXAxis = function (axis) {\n        var iv = this.i.uw(axis);\n        return (iv);\n    };\n    /**\n     * Determine if object can be used as YAxis\n    \r\n    * @param axis  * The object to check\n    *\n    * You can use the `canUseAsYAxis` method to determine if object can be used as YAxis\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalAnchoredCategorySeries.prototype.canUseAsYAxis = function (axis) {\n        var iv = this.i.ux(axis);\n        return (iv);\n    };\n    return IgrHorizontalAnchoredCategorySeries;\n}(IgrAnchoredCategorySeries));\nexport { IgrHorizontalAnchoredCategorySeries };\n"]},"metadata":{},"sourceType":"module"}