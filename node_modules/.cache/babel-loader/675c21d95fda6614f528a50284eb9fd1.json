{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { IgrRangeCategorySeries } from \"./igr-range-category-series\";\nimport { toPoint, fromPoint } from \"igniteui-react-core\";\n/**\n * Base class for ranged category series with a category X-axis and a numeric Y-axis.\n*\n* Instantiate HorizontalAnchoredCategorySeries\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* this.columnSeries1.dataSource = this.categoryData;\n* this.columnSeries1.xAxis = this.categoryXAxis;\n* this.columnSeries1.yAxis = this.numericYAxis;\n* this.columnSeries1.xAxisName = \"categoryXAxis\";\n* this.columnSeries1.yAxisName = \"numericYAxis\";\n* this.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\n\nvar IgrHorizontalRangeCategorySeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrHorizontalRangeCategorySeries, _super);\n\n  function IgrHorizontalRangeCategorySeries(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._xAxisName = null;\n    _this._yAxisName = null;\n    return _this;\n  }\n\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"xAxis\", {\n    /**\n     * Gets or sets the effective x-axis for the current CategorySeries object.\n    *\n    * Instantiate xAxis\n    *\n    * ```ts\n    * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n    * this.columnSeries1.dataSource = this.categoryData;\n    * this.columnSeries1.xAxis = this.categoryXAxis;\n    * this.columnSeries1.yAxis = this.numericYAxis;\n    * this.columnSeries1.xAxisName = \"categoryXAxis\";\n    * this.columnSeries1.yAxisName = \"numericYAxis\";\n    * this.columnSeries1.valueMemberPath = \"USA\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      if (this.i.xAxis == null) {\n        return null;\n      }\n\n      if (!this.i.xAxis.externalObject) {\n        var e = IgrCategoryAxisBase._createFromInternal(this.i.xAxis);\n\n        if (e) {\n          e._implementation = this.i.xAxis;\n        }\n\n        this.i.xAxis.externalObject = e;\n      }\n\n      return this.i.xAxis.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"xAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve xAxis from markup.\n    */\n    get: function () {\n      return this._xAxisName;\n    },\n    set: function (v) {\n      this._xAxisName = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"yAxis\", {\n    /**\n     * Gets or sets the effective y-axis for the current CategorySeries object.\n    *\n    * Instantiate yAxis\n    *\n    * ```ts\n    *  <IgrDataChart\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n    * this.columnSeries1.dataSource = this.categoryData;\n    * this.columnSeries1.xAxis = this.categoryXAxis;\n    * this.columnSeries1.yAxis = this.numericYAxis;\n    * this.columnSeries1.xAxisName = \"categoryXAxis\";\n    * this.columnSeries1.yAxisName = \"numericYAxis\";\n    * this.columnSeries1.valueMemberPath = \"USA\";\n    * ```\n    */\n    get: function () {\n      if (this.i.yAxis == null) {\n        return null;\n      }\n\n      if (!this.i.yAxis.externalObject) {\n        var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n\n        if (e) {\n          e._implementation = this.i.yAxis;\n        }\n\n        this.i.yAxis.externalObject = e;\n      }\n\n      return this.i.yAxis.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"yAxisName\", {\n    /**\n    * Gets or sets the name to use to resolve yAxis from markup.\n    */\n    get: function () {\n      return this._yAxisName;\n    },\n    set: function (v) {\n      this._yAxisName = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"isRange\", {\n    /**\n     * Checks if this series is a range series\n    *\n    * You can use the `isRange` to get the current series is a range type series.\n    *\n    * <!-- Angular JS -->\n    *\n    * ```ts\n    *   var r = this.series.isRange;\n    * ```\n    */\n    get: function () {\n      return this.i.eb;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"lowMemberAsLegendLabel\", {\n    /**\n     * Gets or sets the label displayed before series' Low value in the Data Legend.\n    */\n    get: function () {\n      return this.i.t2;\n    },\n    set: function (v) {\n      this.i.t2 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"highMemberAsLegendLabel\", {\n    /**\n     * Gets or sets the label displayed before series' High value in the Data Legend.\n    */\n    get: function () {\n      return this.i.ty;\n    },\n    set: function (v) {\n      this.i.ty = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"lowMemberAsLegendUnit\", {\n    /**\n     * Gets or sets the unit displayed after series' Low value in the Data Legend.\n    */\n    get: function () {\n      return this.i.t4;\n    },\n    set: function (v) {\n      this.i.t4 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"highMemberAsLegendUnit\", {\n    /**\n     * Gets or sets the unit displayed after series' High value in the Data Legend.\n    */\n    get: function () {\n      return this.i.t0;\n    },\n    set: function (v) {\n      this.i.t0 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrHorizontalRangeCategorySeries.prototype.bindAxes = function (axes) {\n    _super.prototype.bindAxes.call(this, axes);\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.xAxisName && this.xAxisName.length > 0 && axes[i].name == this.xAxisName) {\n        this.xAxis = axes[i];\n      }\n    }\n\n    for (var i = 0; i < axes.length; i++) {\n      if (this.yAxisName && this.yAxisName.length > 0 && axes[i].name == this.yAxisName) {\n        this.yAxis = axes[i];\n      }\n    }\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.findByName = function (name) {\n    var baseResult = _super.prototype.findByName.call(this, name);\n\n    if (baseResult) {\n      return baseResult;\n    }\n\n    if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {\n      return this.xAxis;\n    }\n\n    if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {\n      return this.yAxis;\n    }\n\n    return null;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.xAxis && this.xAxis._styling) {\n      this.xAxis._styling(container, component, this);\n    }\n\n    if (this.yAxis && this.yAxis._styling) {\n      this.yAxis._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n  /**\n   * Returns the offset value for this series if grouped on a category axis.\n  \r\n  *\n  * You can use the `getOffsetValue` to get the offset value for this series if grouped on a category axis.\n  *\n  * <!-- Angular JS -->\n  *\n  *       var g = series.getOffsetValue();\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalRangeCategorySeries.prototype.getOffsetValue = function () {\n    var iv = this.i.getOffsetValue();\n    return iv;\n  };\n  /**\n   * Returns the width of the category grouping this series is in.\n  \r\n  *\n  * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n  *\n  * <!-- Angular JS -->\n  *\n  *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n  *\n  * <!-- Ignite JS -->\n  *\n  *      N/A\n  */\n\n\n  IgrHorizontalRangeCategorySeries.prototype.getCategoryWidth = function () {\n    var iv = this.i.getCategoryWidth();\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.hh(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.hj(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.gj(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesLowValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.gh(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesHighValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.gf(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesHighValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.pi(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesLowValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.pk(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n\n  IgrHorizontalRangeCategorySeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.pm(toPoint(world), useInterpolation, skipUnknowns);\n    return fromPoint(iv);\n  };\n  /**\n   * Determine if object can be used as YAxis\n  \r\n  * @param axis  * The object to check\n  *\n  * You can use the `canUseAsYAxis` method to determine if object can be used as YAxis\n  */\n\n\n  IgrHorizontalRangeCategorySeries.prototype.canUseAsYAxis = function (axis) {\n    var iv = this.i.tx(axis);\n    return iv;\n  };\n  /**\n   * Determine if object can be used as XAxis\n  \r\n  * @param axis  * The object to check\n  *\n  * You can use the `canUseAsXAxis` method to determine if object can be used as XAxis\n  *\n  * <!-- Angular JS -->\n  *\n  *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n  */\n\n\n  IgrHorizontalRangeCategorySeries.prototype.canUseAsXAxis = function (axis) {\n    var iv = this.i.tw(axis);\n    return iv;\n  };\n\n  return IgrHorizontalRangeCategorySeries;\n}(IgrRangeCategorySeries);\n\nexport { IgrHorizontalRangeCategorySeries };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-horizontal-range-category-series.js"],"names":["__extends","IgrCategoryAxisBase","IgrNumericYAxis","IgrRangeCategorySeries","toPoint","fromPoint","IgrHorizontalRangeCategorySeries","_super","props","_this","call","_xAxisName","_yAxisName","Object","defineProperty","prototype","get","_implementation","enumerable","configurable","i","xAxis","externalObject","e","_createFromInternal","set","v","_stylingContainer","_styling","yAxis","eb","t2","ty","t4","t0","bindAxes","axes","length","xAxisName","name","yAxisName","findByName","baseResult","container","component","parent","_inStyling","getOffsetValue","iv","getCategoryWidth","getNextOrExactIndex","world","skipUnknowns","hh","getPreviousOrExactIndex","hj","getSeriesValue","useInterpolation","gj","getSeriesLowValue","gh","getSeriesHighValue","gf","getSeriesHighValuePosition","pi","getSeriesLowValuePosition","pk","getSeriesValuePosition","pm","canUseAsYAxis","axis","tx","canUseAsXAxis","tw"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrCategoryAxisBase } from \"./igr-category-axis-base\";\nimport { IgrNumericYAxis } from \"./igr-numeric-y-axis\";\nimport { IgrRangeCategorySeries } from \"./igr-range-category-series\";\nimport { toPoint, fromPoint } from \"igniteui-react-core\";\n/**\n * Base class for ranged category series with a category X-axis and a numeric Y-axis.\n*\n* Instantiate HorizontalAnchoredCategorySeries\n*\n* ```ts\n*  <IgrDataChart\n*     dataSource={this.state.dataSource} >\n*\n*     <IgrCategoryXAxis name=\"xAxis\" />\n*     <IgrNumericYAxis name=\"yAxis\" />\n*\n*     <IgrColumnSeries\n*      name=\"series1\"\n*     xAxisName=\"xAxis\"\n* \tyAxisName=\"yAxis\"\n* \tvalueMemberPath=\"Value\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* this.columnSeries1.dataSource = this.categoryData;\n* this.columnSeries1.xAxis = this.categoryXAxis;\n* this.columnSeries1.yAxis = this.numericYAxis;\n* this.columnSeries1.xAxisName = \"categoryXAxis\";\n* this.columnSeries1.yAxisName = \"numericYAxis\";\n* this.columnSeries1.valueMemberPath = \"USA\";\n* ```\n*/\nvar IgrHorizontalRangeCategorySeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrHorizontalRangeCategorySeries, _super);\n    function IgrHorizontalRangeCategorySeries(props) {\n        var _this = _super.call(this, props) || this;\n        _this._xAxisName = null;\n        _this._yAxisName = null;\n        return _this;\n    }\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"xAxis\", {\n        /**\n         * Gets or sets the effective x-axis for the current CategorySeries object.\n        *\n        * Instantiate xAxis\n        *\n        * ```ts\n        * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n        * this.columnSeries1.dataSource = this.categoryData;\n        * this.columnSeries1.xAxis = this.categoryXAxis;\n        * this.columnSeries1.yAxis = this.numericYAxis;\n        * this.columnSeries1.xAxisName = \"categoryXAxis\";\n        * this.columnSeries1.yAxisName = \"numericYAxis\";\n        * this.columnSeries1.valueMemberPath = \"USA\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            if (this.i.xAxis == null) {\n                return null;\n            }\n            if (!this.i.xAxis.externalObject) {\n                var e = IgrCategoryAxisBase._createFromInternal(this.i.xAxis);\n                if (e) {\n                    e._implementation = this.i.xAxis;\n                }\n                this.i.xAxis.externalObject = e;\n            }\n            return this.i.xAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.xAxis = null : this.i.xAxis = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"xAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve xAxis from markup.\n        */\n        get: function () {\n            return this._xAxisName;\n        },\n        set: function (v) {\n            this._xAxisName = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"yAxis\", {\n        /**\n         * Gets or sets the effective y-axis for the current CategorySeries object.\n        *\n        * Instantiate yAxis\n        *\n        * ```ts\n        *  <IgrDataChart\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * this.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n        * this.columnSeries1.dataSource = this.categoryData;\n        * this.columnSeries1.xAxis = this.categoryXAxis;\n        * this.columnSeries1.yAxis = this.numericYAxis;\n        * this.columnSeries1.xAxisName = \"categoryXAxis\";\n        * this.columnSeries1.yAxisName = \"numericYAxis\";\n        * this.columnSeries1.valueMemberPath = \"USA\";\n        * ```\n        */\n        get: function () {\n            if (this.i.yAxis == null) {\n                return null;\n            }\n            if (!this.i.yAxis.externalObject) {\n                var e = IgrNumericYAxis._createFromInternal(this.i.yAxis);\n                if (e) {\n                    e._implementation = this.i.yAxis;\n                }\n                this.i.yAxis.externalObject = e;\n            }\n            return this.i.yAxis.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.yAxis = null : this.i.yAxis = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"yAxisName\", {\n        /**\n        * Gets or sets the name to use to resolve yAxis from markup.\n        */\n        get: function () {\n            return this._yAxisName;\n        },\n        set: function (v) {\n            this._yAxisName = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"isRange\", {\n        /**\n         * Checks if this series is a range series\n        *\n        * You can use the `isRange` to get the current series is a range type series.\n        *\n        * <!-- Angular JS -->\n        *\n        * ```ts\n        *   var r = this.series.isRange;\n        * ```\n        */\n        get: function () {\n            return this.i.eb;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"lowMemberAsLegendLabel\", {\n        /**\n         * Gets or sets the label displayed before series' Low value in the Data Legend.\n        */\n        get: function () {\n            return this.i.t2;\n        },\n        set: function (v) {\n            this.i.t2 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"highMemberAsLegendLabel\", {\n        /**\n         * Gets or sets the label displayed before series' High value in the Data Legend.\n        */\n        get: function () {\n            return this.i.ty;\n        },\n        set: function (v) {\n            this.i.ty = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"lowMemberAsLegendUnit\", {\n        /**\n         * Gets or sets the unit displayed after series' Low value in the Data Legend.\n        */\n        get: function () {\n            return this.i.t4;\n        },\n        set: function (v) {\n            this.i.t4 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrHorizontalRangeCategorySeries.prototype, \"highMemberAsLegendUnit\", {\n        /**\n         * Gets or sets the unit displayed after series' High value in the Data Legend.\n        */\n        get: function () {\n            return this.i.t0;\n        },\n        set: function (v) {\n            this.i.t0 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrHorizontalRangeCategorySeries.prototype.bindAxes = function (axes) {\n        _super.prototype.bindAxes.call(this, axes);\n        for (var i = 0; i < axes.length; i++) {\n            if (this.xAxisName && this.xAxisName.length > 0 &&\n                axes[i].name == this.xAxisName) {\n                this.xAxis = axes[i];\n            }\n        }\n        for (var i = 0; i < axes.length; i++) {\n            if (this.yAxisName && this.yAxisName.length > 0 &&\n                axes[i].name == this.yAxisName) {\n                this.yAxis = axes[i];\n            }\n        }\n    };\n    IgrHorizontalRangeCategorySeries.prototype.findByName = function (name) {\n        var baseResult = _super.prototype.findByName.call(this, name);\n        if (baseResult) {\n            return baseResult;\n        }\n        if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {\n            return this.xAxis;\n        }\n        if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {\n            return this.yAxis;\n        }\n        return null;\n    };\n    IgrHorizontalRangeCategorySeries.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.xAxis && this.xAxis._styling) {\n            this.xAxis._styling(container, component, this);\n        }\n        if (this.yAxis && this.yAxis._styling) {\n            this.yAxis._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    /**\n     * Returns the offset value for this series if grouped on a category axis.\n    \r\n    *\n    * You can use the `getOffsetValue` to get the offset value for this series if grouped on a category axis.\n    *\n    * <!-- Angular JS -->\n    *\n    *       var g = series.getOffsetValue();\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalRangeCategorySeries.prototype.getOffsetValue = function () {\n        var iv = this.i.getOffsetValue();\n        return (iv);\n    };\n    /**\n     * Returns the width of the category grouping this series is in.\n    \r\n    *\n    * You can use the `getCategoryWidth` to get the width of the category grouping a series is in.\n    *\n    * <!-- Angular JS -->\n    *\n    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n    *\n    * <!-- Ignite JS -->\n    *\n    *      N/A\n    */\n    IgrHorizontalRangeCategorySeries.prototype.getCategoryWidth = function () {\n        var iv = this.i.getCategoryWidth();\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.hh(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.hj(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.gj(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesLowValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.gh(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesHighValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.gf(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesHighValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.pi(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesLowValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.pk(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    IgrHorizontalRangeCategorySeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.pm(toPoint(world), useInterpolation, skipUnknowns);\n        return fromPoint(iv);\n    };\n    /**\n     * Determine if object can be used as YAxis\n    \r\n    * @param axis  * The object to check\n    *\n    * You can use the `canUseAsYAxis` method to determine if object can be used as YAxis\n    */\n    IgrHorizontalRangeCategorySeries.prototype.canUseAsYAxis = function (axis) {\n        var iv = this.i.tx(axis);\n        return (iv);\n    };\n    /**\n     * Determine if object can be used as XAxis\n    \r\n    * @param axis  * The object to check\n    *\n    * You can use the `canUseAsXAxis` method to determine if object can be used as XAxis\n    *\n    * <!-- Angular JS -->\n    *\n    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);\n    */\n    IgrHorizontalRangeCategorySeries.prototype.canUseAsXAxis = function (axis) {\n        var iv = this.i.tw(axis);\n        return (iv);\n    };\n    return IgrHorizontalRangeCategorySeries;\n}(IgrRangeCategorySeries));\nexport { IgrHorizontalRangeCategorySeries };\n"]},"metadata":{},"sourceType":"module"}