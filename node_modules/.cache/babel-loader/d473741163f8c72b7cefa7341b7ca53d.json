{"ast":null,"code":"var _jsxFileName = \"/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/src/UserCollections.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport solanaIcon from './solanaIcon.png';\nimport { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport './userCollections.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UserCollections = _ref => {\n  _s();\n\n  let {\n    children,\n    ...props\n  } = _ref;\n  const [data, setData] = useState();\n  const wallet = props.wallet;\n  const [slides, setSlides] = useState();\n  const settings = {\n    dots: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 3,\n    slidesToScroll: 3,\n    arrow: false,\n    initialSlide: 0\n  };\n  const carouelStyle = {\n    height: \"30%\",\n    width: \"30%\",\n    border: \"1px solid white\",\n    borderRadius: \"25%\"\n  };\n\n  const getSlides = () => {\n    if (data) {\n      let slides = [];\n      data.map((collection, index) => slides.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-index\": index,\n        className: \"NFTdiv\",\n        children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n          children: collection.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"NFTimage\",\n          src: collection.image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"inline-block\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"symbolIcon\",\n            src: solanaIcon\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [collection.floorPrice, \"0.2\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 64\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)));\n    }\n  };\n\n  const getCollections = async () => {\n    var config = {\n      method: 'get',\n      url: 'https://api-devnet.magiceden.dev/v2/wallets/' + wallet + '/tokens?offset=0&limit=100&listStatus=both'\n    };\n    axios(config).then(function (response) {\n      console.log('axios call user colecction');\n      console.log(response);\n      console.log(JSON.stringify(response.data));\n      setData(response.data);\n      return response.data;\n    }).catch(function (error) {\n      console.log(error);\n    });\n  };\n\n  useEffect(() => {\n    console.log('use effect');\n\n    if (wallet) {\n      console.log('wallettt');\n      console.log(wallet);\n    }\n\n    if (data) {\n      console.log(data);\n    }\n  });\n  useEffect(() => {\n    const intervalId = setInterval(() => {\n      //assign interval to a variable to clear it.\n      console.log('use effect');\n      getCollections();\n\n      if (data) {\n        console.log(data);\n      }\n    }, 1000);\n    return () => clearInterval(intervalId); //This is important\n  }, [useState]);\n  return (\n    /*#__PURE__*/\n    // <div>\n    //   <h3>My NFTs</h3>\n    // <Slider {...settings}>\n    //         <div>\n    //           <div className=\"NFTdiv\">\n    //             <h6>Awakened Sols</h6>\n    //             <img src=\"logo.png\" className=\"NFTimage\"></img>\n    //             <p>FP: <img className=\"symbolIcon\" src={solanaIcon}></img>0.5</p>\n    //           </div>\n    //         </div>\n    //         <div>\n    //           <div className=\"NFTdiv\">\n    //             <h6>Awakened Sols</h6>\n    //             <img src=\"logo.png\" className=\"NFTimage\"></img>\n    //             <p>FP: <img className=\"symbolIcon\" src={solanaIcon}></img>0.5</p>\n    //           </div>\n    //         </div>\n    //         <div>\n    //           <div className=\"NFTdiv\">\n    //             <h6>Awakened Sols</h6>\n    //             <img src=\"logo.png\" className=\"NFTimage\"></img>\n    //             <p>FP: <img className=\"symbolIcon\" src={solanaIcon}></img>0.5</p>\n    //           </div>\n    //         </div>\n    //         <div>\n    //           <div className=\"NFTdiv\">\n    //             <h6>Awakened Sols</h6>\n    //             <img src=\"logo.png\" className=\"NFTimage\"></img>\n    //             <p>FP: <img className=\"symbolIcon\" src={solanaIcon}></img>0.5</p>\n    //           </div>\n    //         </div>\n    //  </Slider>\n    //  </div>\n    _jsxDEV(_Fragment, {\n      children: data ? /*#__PURE__*/_jsxDEV(Slider, { ...settings,\n        children: slides\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 7\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 7\n      }, this)\n    }, void 0, false)\n  );\n};\n\n_s(UserCollections, \"o1DlXHWkjPWOcNDY3f0aUcxhido=\");\n\n_c = UserCollections;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserCollections\");","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/src/UserCollections.tsx"],"names":["React","solanaIcon","useEffect","useState","axios","Slider","UserCollections","children","props","data","setData","wallet","slides","setSlides","settings","dots","infinite","speed","slidesToShow","slidesToScroll","arrow","initialSlide","carouelStyle","height","width","border","borderRadius","getSlides","map","collection","index","push","name","image","display","floorPrice","getCollections","config","method","url","then","response","console","log","JSON","stringify","catch","error","intervalId","setInterval","clearInterval"],"mappings":"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","sourcesContent":["import React, { ReactNode } from \"react\";\nimport {Row, Col, Container} from \"react-bootstrap\";\nimport enlargeIcon from './enlargeIcon.png'\nimport solanaIcon from './solanaIcon.png'\nimport styled from 'styled-components'\nimport { Key, ReactChild, ReactFragment, ReactPortal, useCallback, useEffect, useMemo, useState } from 'react';\nimport axios from 'axios';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport './userCollections.css';\nimport { getSliderUtilityClass } from \"@mui/base\";\n\ninterface Props {\n    children?: ReactNode\n    // any props that come into the component\n    wallet: any\n}\n\nexport const UserCollections = ({ children, ...props }: Props) => {\n\n  const [data, setData] = useState<any>();\n  const wallet = props.wallet;\n  const [slides, setSlides] = useState<any>();\n\n  const settings = {\n    dots: true,\n    infinite: true,\n    speed: 500,\n    slidesToShow: 3,\n    slidesToScroll: 3,\n    arrow:false,\n    initialSlide: 0,\n  };\n\n  const carouelStyle = {\n    height:\"30%\",\n    width: \"30%\",\n    border: \"1px solid white\",\n    borderRadius: \"25%\"\n  };\n\n  const getSlides = () => {\n    if(data){\n      let slides = [];\n      \n      data.map((collection:any, index:number) => (\n        slides.push(\n        <div  data-index={index} key={index} className=\"NFTdiv\">\n          <h6>{collection.name}</h6>\n          <img className=\"NFTimage\" src={collection.image}></img>\n          <div style={{display: \"inline-block\"}}>\n            <img className=\"symbolIcon\" src={solanaIcon}></img><span>{collection.floorPrice}0.2</span>\n          </div>\n        </div>\n        )\n    ))\n    }\n  }\n\n  const getCollections = async () => {\n    var config = {\n      method: 'get',\n      url: 'https://api-devnet.magiceden.dev/v2/wallets/'+ wallet + '/tokens?offset=0&limit=100&listStatus=both'\n    };\n\n\n    axios(config)\n    .then(function (response) {\n      console.log('axios call user colecction');\n      console.log(response);\n      console.log(JSON.stringify(response.data));\n      setData(response.data);    \n      return response.data;\n      }).catch(function (error) {\n      console.log(error);\n    });\n  }\n  \n\n\n  useEffect(() => {\n        console.log('use effect');\n        if(wallet){\n          console.log('wallettt');\n          console.log(wallet);\n        }\n        if(data){\n          console.log(data);\n        }\n  });\n\nuseEffect(() => {\n  const intervalId = setInterval(() => {  //assign interval to a variable to clear it.\n    console.log('use effect');\n    getCollections();\n  \n    if(data){\n      console.log(data);\n    }\n  \n  }, 1000)\n\n  return () => clearInterval(intervalId); //This is important\n \n}, [useState])\n\n\nreturn (\n  // <div>\n  //   <h3>My NFTs</h3>\n  // <Slider {...settings}>\n  //         <div>\n  //           <div className=\"NFTdiv\">\n  //             <h6>Awakened Sols</h6>\n  //             <img src=\"logo.png\" className=\"NFTimage\"></img>\n  //             <p>FP: <img className=\"symbolIcon\" src={solanaIcon}></img>0.5</p>\n  //           </div>\n  //         </div>\n\n  //         <div>\n  //           <div className=\"NFTdiv\">\n  //             <h6>Awakened Sols</h6>\n  //             <img src=\"logo.png\" className=\"NFTimage\"></img>\n  //             <p>FP: <img className=\"symbolIcon\" src={solanaIcon}></img>0.5</p>\n  //           </div>\n  //         </div>\n\n  //         <div>\n  //           <div className=\"NFTdiv\">\n  //             <h6>Awakened Sols</h6>\n  //             <img src=\"logo.png\" className=\"NFTimage\"></img>\n  //             <p>FP: <img className=\"symbolIcon\" src={solanaIcon}></img>0.5</p>\n  //           </div>\n  //         </div>\n\n  //         <div>\n  //           <div className=\"NFTdiv\">\n  //             <h6>Awakened Sols</h6>\n  //             <img src=\"logo.png\" className=\"NFTimage\"></img>\n  //             <p>FP: <img className=\"symbolIcon\" src={solanaIcon}></img>0.5</p>\n  //           </div>\n  //         </div>\n  //  </Slider>\n  //  </div>\n  <>\n  {data ? (\n    <Slider {...settings}>\n     {slides}\n    </Slider>\n    ) : (\n      <div>\n      <h1>Loading...</h1>\n     </div>\n  )}\n  </>\n);\n};"]},"metadata":{},"sourceType":"module"}