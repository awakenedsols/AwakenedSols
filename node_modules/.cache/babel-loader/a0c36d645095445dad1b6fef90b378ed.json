{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { VerticalAlignment_$type } from \"igniteui-react-core\";\nimport { TreemapNodeStyle } from \"./TreemapNodeStyle\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { NamePatcher, getModifiedProps, isValidProp, brushToString, stringToBrush, ensureEnum, toSpinal, initializePropertiesFromCss } from \"igniteui-react-core\";\n/**\n * Represents a style to apply to a treemap node.\n*/\n\nvar IgrTreemapNodeStyle =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrTreemapNodeStyle, _super);\n\n  function IgrTreemapNodeStyle(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._implementation = _this.createImplementation();\n    _this._implementation.externalObject = _this;\n\n    _this.onImplementationCreated();\n\n    return _this;\n  }\n\n  IgrTreemapNodeStyle.prototype.createImplementation = function () {\n    return new TreemapNodeStyle();\n  };\n\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"i\", {\n    /**\n     * @hidden\n     */\n    get: function () {\n      return this._implementation;\n    }\n    /**\n                               * @hidden\n                               */\n    ,\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrTreemapNodeStyle._createFromInternal = function (internal) {\n    if (!internal) {\n      return null;\n    }\n\n    if (!internal.$type) {\n      return null;\n    }\n\n    var name = internal.$type.name;\n    var externalName = \"Igr\" + name;\n\n    if (!TypeRegistrar.isRegistered(externalName)) {\n      return null;\n    }\n\n    return TypeRegistrar.create(externalName);\n  };\n\n  IgrTreemapNodeStyle.prototype.onImplementationCreated = function () {};\n\n  IgrTreemapNodeStyle.prototype.componentDidMount = function () {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = this.props[p];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  IgrTreemapNodeStyle.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_2, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrTreemapNodeStyle.prototype.render = function () {\n    return null;\n  };\n\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerHoverBackground\", {\n    /**\n     * Gets or sets the background to use for the header when it is hovered.\n    */\n    get: function () {\n      return brushToString(this.i.a7);\n    },\n    set: function (v) {\n      this.i.a7 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerBackground\", {\n    /**\n     * Gets or sets the background to use for the header.\n    */\n    get: function () {\n      return brushToString(this.i.a6);\n    },\n    set: function (v) {\n      this.i.a6 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerTextColor\", {\n    /**\n     * Gets or sets the text color to use for the header.\n    */\n    get: function () {\n      return brushToString(this.i.a9);\n    },\n    set: function (v) {\n      this.i.a9 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"label\", {\n    /**\n     * Gets or sets the label to use for the node.\n    */\n    get: function () {\n      return this.i.ai;\n    },\n    set: function (v) {\n      this.i.ai = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"textColor\", {\n    /**\n     * Gets or sets the text color to use for the nodes.\n    */\n    get: function () {\n      return brushToString(this.i.bb);\n    },\n    set: function (v) {\n      this.i.bb = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerHoverTextColor\", {\n    /**\n     * Gets or sets the text color to use for the header.\n    */\n    get: function () {\n      return brushToString(this.i.a8);\n    },\n    set: function (v) {\n      this.i.a8 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerLabelLeftMargin\", {\n    /**\n     * Gets or sets the left margin to use for the header.\n    */\n    get: function () {\n      return this.i.p;\n    },\n    set: function (v) {\n      this.i.p = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerLabelTopMargin\", {\n    /**\n     * Gets or sets the top margin to use for the header.\n    */\n    get: function () {\n      return this.i.r;\n    },\n    set: function (v) {\n      this.i.r = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerLabelRightMargin\", {\n    /**\n     * Gets or sets the right margin to use for the header.\n    */\n    get: function () {\n      return this.i.q;\n    },\n    set: function (v) {\n      this.i.q = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerLabelBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin to use for the labels.\n    */\n    get: function () {\n      return this.i.o;\n    },\n    set: function (v) {\n      this.i.o = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelLeftMargin\", {\n    /**\n     * Gets or sets the left margin to use for the labels.\n    */\n    get: function () {\n      return this.i.t;\n    },\n    set: function (v) {\n      this.i.t = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelTopMargin\", {\n    /**\n     * Gets or sets the top margin to use for the labels.\n    */\n    get: function () {\n      return this.i.v;\n    },\n    set: function (v) {\n      this.i.v = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelRightMargin\", {\n    /**\n     * Gets or sets the right margin to use for the labels.\n    */\n    get: function () {\n      return this.i.u;\n    },\n    set: function (v) {\n      this.i.u = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin to use for the labels.\n    */\n    get: function () {\n      return this.i.s;\n    },\n    set: function (v) {\n      this.i.s = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerHeight\", {\n    /**\n     * Gets or sets the height to use for the header.\n    */\n    get: function () {\n      return this.i.n;\n    },\n    set: function (v) {\n      this.i.n = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelHorizontalAlignment\", {\n    /**\n     * Gets or sets the horizontal alignment to use for the node labels.\n    */\n    get: function () {\n      return this.i.ax;\n    },\n    set: function (v) {\n      this.i.ax = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelVerticalAlignment\", {\n    /**\n     * Gets or sets the vertical alignment to use for the node labels.\n    */\n    get: function () {\n      return this.i.bd;\n    },\n    set: function (v) {\n      this.i.bd = ensureEnum(VerticalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"fill\", {\n    /**\n     * Gets or sets the fill color to use for the nodes.\n    */\n    get: function () {\n      return brushToString(this.i.a5);\n    },\n    set: function (v) {\n      this.i.a5 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"outline\", {\n    /**\n     * Gets or sets the outline to use for the nodes.\n    */\n    get: function () {\n      return brushToString(this.i.ba);\n    },\n    set: function (v) {\n      this.i.ba = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"strokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness to use for the node outline.\n    */\n    get: function () {\n      return this.i.w;\n    },\n    set: function (v) {\n      this.i.w = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrTreemapNodeStyle.prototype.findByName = function (name) {\n    return null;\n  };\n\n  Object.defineProperty(IgrTreemapNodeStyle.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrTreemapNodeStyle.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrTreemapNodeStyle.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"TreemapNodeStyle\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n\n  return IgrTreemapNodeStyle;\n}(React.Component);\n\nexport { IgrTreemapNodeStyle };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-treemap-node-style.js"],"names":["__extends","__values","React","HorizontalAlignment_$type","VerticalAlignment_$type","TreemapNodeStyle","TypeRegistrar","NamePatcher","getModifiedProps","isValidProp","brushToString","stringToBrush","ensureEnum","toSpinal","initializePropertiesFromCss","IgrTreemapNodeStyle","_super","props","_this","call","__p","_hasUserValues","Set","_stylingContainer","_stylingParent","_inStyling","_styling","ensureStylablePatched","Object","getPrototypeOf","_implementation","createImplementation","externalObject","onImplementationCreated","prototype","defineProperty","get","enumerable","configurable","_createFromInternal","internal","$type","name","externalName","isRegistered","create","componentDidMount","e_1","_a","_b","keys","_c","next","done","p","value","e_1_1","error","return","shouldComponentUpdate","nextProps","nextState","e_2","mod","e_2_1","render","i","a7","set","v","a6","a9","ai","bb","a8","r","q","o","t","u","s","n","ax","bd","a5","ba","w","findByName","__m","propertyName","add","container","component","parent","genericPrefix","typeName","indexOf","substring","additionalPrefixes","prefix","push","b","baseType","Name","basePrefix","parentTypeName","parentPrefix","hasUserValues","_otherStyling","Component"],"mappings":"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","sourcesContent":["import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { VerticalAlignment_$type } from \"igniteui-react-core\";\nimport { TreemapNodeStyle } from \"./TreemapNodeStyle\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { NamePatcher, getModifiedProps, isValidProp, brushToString, stringToBrush, ensureEnum, toSpinal, initializePropertiesFromCss } from \"igniteui-react-core\";\n/**\n * Represents a style to apply to a treemap node.\n*/\nvar IgrTreemapNodeStyle = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrTreemapNodeStyle, _super);\n    function IgrTreemapNodeStyle(props) {\n        var _this = _super.call(this, props) || this;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._implementation = _this.createImplementation();\n        _this._implementation.externalObject = _this;\n        _this.onImplementationCreated();\n        return _this;\n    }\n    IgrTreemapNodeStyle.prototype.createImplementation = function () {\n        return new TreemapNodeStyle();\n    };\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"i\", {\n        /**\n         * @hidden\n         */\n        get: function () {\n            return this._implementation;\n        } /**\n                                     * @hidden\n                                     */,\n        enumerable: false,\n        configurable: true\n    });\n    IgrTreemapNodeStyle._createFromInternal = function (internal) {\n        if (!internal) {\n            return null;\n        }\n        if (!internal.$type) {\n            return null;\n        }\n        var name = internal.$type.name;\n        var externalName = \"Igr\" + name;\n        if (!TypeRegistrar.isRegistered(externalName)) {\n            return null;\n        }\n        return TypeRegistrar.create(externalName);\n    };\n    IgrTreemapNodeStyle.prototype.onImplementationCreated = function () {\n    };\n    IgrTreemapNodeStyle.prototype.componentDidMount = function () {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = this.props[p];\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n    };\n    IgrTreemapNodeStyle.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_2, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n        return true;\n    };\n    IgrTreemapNodeStyle.prototype.render = function () {\n        return null;\n    };\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerHoverBackground\", {\n        /**\n         * Gets or sets the background to use for the header when it is hovered.\n        */\n        get: function () {\n            return brushToString(this.i.a7);\n        },\n        set: function (v) {\n            this.i.a7 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerBackground\", {\n        /**\n         * Gets or sets the background to use for the header.\n        */\n        get: function () {\n            return brushToString(this.i.a6);\n        },\n        set: function (v) {\n            this.i.a6 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerTextColor\", {\n        /**\n         * Gets or sets the text color to use for the header.\n        */\n        get: function () {\n            return brushToString(this.i.a9);\n        },\n        set: function (v) {\n            this.i.a9 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"label\", {\n        /**\n         * Gets or sets the label to use for the node.\n        */\n        get: function () {\n            return this.i.ai;\n        },\n        set: function (v) {\n            this.i.ai = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"textColor\", {\n        /**\n         * Gets or sets the text color to use for the nodes.\n        */\n        get: function () {\n            return brushToString(this.i.bb);\n        },\n        set: function (v) {\n            this.i.bb = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerHoverTextColor\", {\n        /**\n         * Gets or sets the text color to use for the header.\n        */\n        get: function () {\n            return brushToString(this.i.a8);\n        },\n        set: function (v) {\n            this.i.a8 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerLabelLeftMargin\", {\n        /**\n         * Gets or sets the left margin to use for the header.\n        */\n        get: function () {\n            return this.i.p;\n        },\n        set: function (v) {\n            this.i.p = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerLabelTopMargin\", {\n        /**\n         * Gets or sets the top margin to use for the header.\n        */\n        get: function () {\n            return this.i.r;\n        },\n        set: function (v) {\n            this.i.r = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerLabelRightMargin\", {\n        /**\n         * Gets or sets the right margin to use for the header.\n        */\n        get: function () {\n            return this.i.q;\n        },\n        set: function (v) {\n            this.i.q = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerLabelBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin to use for the labels.\n        */\n        get: function () {\n            return this.i.o;\n        },\n        set: function (v) {\n            this.i.o = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelLeftMargin\", {\n        /**\n         * Gets or sets the left margin to use for the labels.\n        */\n        get: function () {\n            return this.i.t;\n        },\n        set: function (v) {\n            this.i.t = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelTopMargin\", {\n        /**\n         * Gets or sets the top margin to use for the labels.\n        */\n        get: function () {\n            return this.i.v;\n        },\n        set: function (v) {\n            this.i.v = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelRightMargin\", {\n        /**\n         * Gets or sets the right margin to use for the labels.\n        */\n        get: function () {\n            return this.i.u;\n        },\n        set: function (v) {\n            this.i.u = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin to use for the labels.\n        */\n        get: function () {\n            return this.i.s;\n        },\n        set: function (v) {\n            this.i.s = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"headerHeight\", {\n        /**\n         * Gets or sets the height to use for the header.\n        */\n        get: function () {\n            return this.i.n;\n        },\n        set: function (v) {\n            this.i.n = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelHorizontalAlignment\", {\n        /**\n         * Gets or sets the horizontal alignment to use for the node labels.\n        */\n        get: function () {\n            return this.i.ax;\n        },\n        set: function (v) {\n            this.i.ax = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"labelVerticalAlignment\", {\n        /**\n         * Gets or sets the vertical alignment to use for the node labels.\n        */\n        get: function () {\n            return this.i.bd;\n        },\n        set: function (v) {\n            this.i.bd = ensureEnum(VerticalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"fill\", {\n        /**\n         * Gets or sets the fill color to use for the nodes.\n        */\n        get: function () {\n            return brushToString(this.i.a5);\n        },\n        set: function (v) {\n            this.i.a5 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"outline\", {\n        /**\n         * Gets or sets the outline to use for the nodes.\n        */\n        get: function () {\n            return brushToString(this.i.ba);\n        },\n        set: function (v) {\n            this.i.ba = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"strokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness to use for the node outline.\n        */\n        get: function () {\n            return this.i.w;\n        },\n        set: function (v) {\n            this.i.w = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrTreemapNodeStyle.prototype.findByName = function (name) {\n        return null;\n    };\n    Object.defineProperty(IgrTreemapNodeStyle.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrTreemapNodeStyle.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrTreemapNodeStyle.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"TreemapNodeStyle\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    return IgrTreemapNodeStyle;\n}(React.Component));\nexport { IgrTreemapNodeStyle };\n"]},"metadata":{},"sourceType":"module"}