{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, typeCast, String_$type, markType } from \"./type\";\nimport { DiffApplyInfo } from \"./DiffApplyInfo\";\nimport { DescriptionTreeNode } from \"./DescriptionTreeNode\";\nimport { List$1 } from \"./List$1\";\nimport { DescriptionTreeAction } from \"./DescriptionTreeAction\";\nimport { DescriptionPropertyValue } from \"./DescriptionPropertyValue\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { DescriptionTreeReconciler_TreeModeData } from \"./DescriptionTreeReconciler_TreeModeData\";\n/**\n * @hidden\n */\n\nvar DescriptionTreeReconciler =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(DescriptionTreeReconciler, _super);\n\n  function DescriptionTreeReconciler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DescriptionTreeReconciler.a = function (a, b) {\n    var c = new DiffApplyInfo();\n\n    for (var d = 0; d < b.count; d++) {\n      var e = b._inner[d];\n\n      switch (e.a) {\n        case 0:\n          if (typeCast(DescriptionTreeNode.$, e.h) !== null) {\n            var f = e.h.g;\n            c.a.add_1(f);\n          }\n\n          e.c.o(e.j, e.g, e.d);\n\n          if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n            var g = e.g.g;\n\n            if (c.a.contains(g)) {\n              c.a.remove(g);\n            }\n\n            c.c.add(e);\n          }\n\n          break;\n\n        case 1:\n          if (typeCast(DescriptionTreeNode.$, e.h) !== null) {\n            var h = e.h.g;\n            c.a.add_1(h);\n          }\n\n          e.c.m(e.j);\n          break;\n\n        case 3:\n          {\n            var i = e.c.a(e.j).b;\n            var j = i[e.f];\n\n            if (typeCast(DescriptionTreeNode.$, j) !== null) {\n              var k = j.g;\n              c.a.add_1(k);\n            }\n\n            i[e.f] = e.g;\n\n            if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n              var l = e.g.g;\n\n              if (c.a.contains(l)) {\n                c.a.remove(l);\n              }\n\n              c.b.add(e);\n            }\n          }\n          break;\n\n        case 4:\n          {\n            var m = e.c.a(e.j).b;\n            var n = m[e.f];\n\n            if (typeCast(DescriptionTreeNode.$, n) !== null) {\n              var o = n.g;\n              c.a.add_1(o);\n            }\n\n            var p = new Array(m.length - 1);\n            var q = 0;\n\n            for (var r = 0; r < m.length; r++) {\n              if (r != e.f) {\n                p[q] = m[r];\n                q++;\n              }\n            }\n\n            e.c.n(e.j, p);\n          }\n          break;\n\n        case 2:\n          {\n            if (e.c == null && a == null) {\n              c.d.add(e);\n            } else {\n              var s = e.c.a(e.j).b;\n              var t = new Array(s.length + 1);\n              var u = 0;\n\n              for (var v = 0; v < t.length; v++) {\n                if (v == e.e) {\n                  t[v] = e.g;\n                } else {\n                  t[v] = s[u];\n                  u++;\n                }\n              }\n\n              e.c.n(e.j, t);\n\n              if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n                var w = e.g.g;\n\n                if (c.a.contains(w)) {\n                  c.a.remove(w);\n                }\n\n                c.b.add(e);\n              }\n            }\n          }\n          break;\n\n        case 5:\n          {\n            var x = e.c.a(e.j).b;\n\n            for (var y = 0; y < x.length; y++) {\n              var z = x[y];\n\n              if (typeCast(DescriptionTreeNode.$, z) !== null) {\n                var aa = z.g;\n                c.a.add_1(aa);\n              }\n            }\n\n            e.c.n(e.j, []);\n          }\n          break;\n      }\n    }\n\n    return c;\n  };\n\n  DescriptionTreeReconciler.c = function (a, b, c) {\n    var d = new List$1(DescriptionTreeAction.$, 0);\n\n    if (a == null && b == null) {\n      return d;\n    }\n\n    if (a != null && b == null) {\n      var e = new DescriptionTreeAction();\n      e.a = 4;\n      e.f = 0;\n      e.h = a;\n      e.d = null;\n      e.j = null;\n      d.add(e);\n      return d;\n    }\n\n    if (a == null && b != null) {\n      var f = new DescriptionTreeAction();\n      f.a = 2;\n      f.f = 0;\n      f.g = b;\n      f.d = null;\n      f.j = null;\n      d.add(f);\n      return d;\n    }\n\n    if (b.i != a.i) {\n      var g = new DescriptionTreeAction();\n      g.a = 3;\n      g.f = 0;\n      g.h = a;\n      g.g = b;\n      g.d = null;\n      g.j = null;\n      d.add(g);\n      return d;\n    }\n\n    DescriptionTreeReconciler.g(d, a, b, c);\n    return d;\n  };\n\n  DescriptionTreeReconciler.g = function (a, b, c, d) {\n    c.g = b.g;\n    var e = DescriptionTreeReconciler.e(b);\n    var f = DescriptionTreeReconciler.e(c);\n    var g = new List$1(DescriptionPropertyValue.$, 0);\n    var h = new List$1(DescriptionPropertyValue.$, 0);\n    var i = new List$1(DescriptionPropertyValue.$, 0);\n\n    for (var j = 0; j < e.count; j++) {\n      var k = e._inner[j];\n\n      if (c.c(k.c)) {\n        if (!Base.equalsStatic(k, c.a(k.c))) {\n          var l = c.a(k.c);\n\n          if (typeCast(DescriptionTreeNode.$, k.b) !== null && typeCast(DescriptionTreeNode.$, l.b) !== null) {\n            var m = k.b;\n            var n = l.b;\n\n            if (m.i == n.i) {\n              if (!m.c(\"Name\") && !n.c(\"Name\") || m.c(\"Name\") && n.c(\"Name\") && m.a(\"Name\").b == n.a(\"Name\").b) {\n                DescriptionTreeReconciler.g(a, m, n, d);\n              } else {\n                i.add(c.a(k.c));\n              }\n            } else {\n              i.add(c.a(k.c));\n            }\n          } else {\n            i.add(c.a(k.c));\n          }\n        }\n      } else {\n        if (!d) {\n          g.add(k);\n        }\n      }\n    }\n\n    for (var o = 0; o < f.count; o++) {\n      var p = f._inner[o];\n\n      if (!b.c(p.c)) {\n        h.add(p);\n      }\n    }\n\n    for (var q = 0; q < g.count; q++) {\n      var r = g._inner[q];\n      var s = new DescriptionTreeAction();\n      s.c = b;\n      s.b = c;\n      s.a = 1;\n      s.j = r.c;\n      s.d = r.a;\n      s.h = r.b;\n      a.add(s);\n    }\n\n    for (var t = 0; t < h.count; t++) {\n      var u = h._inner[t];\n      var v = new DescriptionTreeAction();\n      v.c = b;\n      v.b = c;\n      v.a = 0;\n      v.j = u.c;\n      v.d = u.a;\n      v.g = u.b;\n      v.h = null;\n      a.add(v);\n    }\n\n    for (var w = 0; w < i.count; w++) {\n      var x = i._inner[w];\n      var y = b.a(x.c).b;\n      var z = x.b;\n\n      if (!Base.equalsStatic(z, y)) {\n        var aa = new DescriptionTreeAction();\n        aa.c = b;\n        aa.b = c;\n        aa.a = 0;\n        aa.j = x.c;\n        aa.d = x.a;\n        aa.g = x.b;\n        aa.h = b.a(x.c).b;\n        a.add(aa);\n      }\n    }\n\n    var ab = DescriptionTreeReconciler.d(b);\n    var ac = DescriptionTreeReconciler.d(c);\n    var ad = new List$1(DescriptionPropertyValue.$, 0);\n    var ae = new List$1(DescriptionPropertyValue.$, 0);\n    var af = new List$1(DescriptionPropertyValue.$, 0);\n\n    for (var ag = 0; ag < ab.count; ag++) {\n      var ah = ab._inner[ag];\n\n      if (c.c(ah.c)) {\n        if (!DescriptionTreeReconciler.b(ah.b, c.a(ah.c).b)) {\n          af.add(c.a(ah.c));\n        } else {\n          var ai = ah.b;\n          var aj = c.a(ah.c).b;\n\n          for (var ak = 0; ak < ai.length; ak++) {\n            var al = ai[ak];\n            var am = aj[ak];\n\n            if (typeCast(DescriptionTreeNode.$, al) !== null && typeCast(DescriptionTreeNode.$, am) !== null) {\n              var an = al;\n              var ao = am;\n\n              if (an.i == ao.i) {\n                DescriptionTreeReconciler.g(a, an, ao, d);\n              } else {\n                var ap = new DescriptionTreeAction();\n                ap.j = ah.c;\n                ap.d = ah.a;\n                ap.c = b;\n                ap.b = c;\n                ap.a = 3;\n                ap.f = ak;\n                ap.e = ak;\n                ap.h = an;\n                ap.g = ao;\n                a.add(ap);\n              }\n            } else {\n              if (!Base.equalsStatic(al, am)) {\n                var aq = new DescriptionTreeAction();\n                aq.j = ah.c;\n                aq.d = ah.a;\n                aq.c = b;\n                aq.b = c;\n                aq.a = 3;\n                aq.f = ak;\n                aq.e = ak;\n                aq.h = al;\n                aq.g = am;\n                a.add(aq);\n              }\n            }\n          }\n        }\n      } else {\n        if (!d) {\n          ad.add(ah);\n        }\n      }\n    }\n\n    for (var ar = 0; ar < ac.count; ar++) {\n      var as = ac._inner[ar];\n\n      if (!b.c(as.c)) {\n        ae.add(as);\n      }\n    }\n\n    for (var at = 0; at < ad.count; at++) {\n      var au = ad._inner[at];\n      var av = new DescriptionTreeAction();\n      av.c = b;\n      av.b = c;\n      av.j = au.c;\n      av.d = au.a;\n      av.a = 5;\n      av.h = au.b;\n      a.add(av);\n    }\n\n    for (var aw = 0; aw < ae.count; aw++) {\n      var ax = ae._inner[aw];\n      var ay = new DescriptionTreeAction();\n      ay.c = b;\n      ay.b = c;\n      ay.j = ax.c;\n      ay.d = ax.a;\n      ay.a = 0;\n      ay.h = null;\n      ay.g = ax.b;\n      a.add(ay);\n    }\n\n    for (var az = 0; az < af.count; az++) {\n      DescriptionTreeReconciler.h(a, b, c, b.a(af._inner[az].c), af._inner[az], d);\n    }\n  };\n\n  DescriptionTreeReconciler.f = function (a) {\n    if (a == null) {\n      return \"UNKOWN\";\n    }\n\n    if (!a.c(\"Type\")) {\n      return \"UNKOWN\";\n    }\n\n    return a.a(\"Type\").b;\n  };\n\n  DescriptionTreeReconciler.h = function (a, b, c, d, e, f) {\n    var g = false;\n    var h = d.b;\n    var i = e.b;\n\n    if (h.length > 0) {\n      if (typeCast(DescriptionTreeNode.$, h[0]) !== null) {\n        var j = h[0];\n\n        if (j.c(\"Name\") && j.a(\"Name\") != null) {\n          g = true;\n        }\n\n        if (j.c(\"RefType\") && j.a(\"RefType\").b == \"uuid\") {\n          g = true;\n        }\n      }\n    }\n\n    if (i.length > 0) {\n      if (typeCast(DescriptionTreeNode.$, i[0]) !== null) {\n        var k = i[0];\n\n        if (k.c(\"Name\") && k.a(\"Name\") != null) {\n          g = true;\n        }\n\n        if (k.c(\"RefType\") && k.a(\"RefType\").b == \"uuid\") {\n          g = true;\n        }\n      }\n    }\n\n    if (g) {\n      var l = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n      var m = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n      var n = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n      var o = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n      var p = 0;\n\n      for (var q = 0; q < h.length; q++) {\n        var r = new DescriptionTreeReconciler_TreeModeData();\n        r.a = h[q];\n        r.d = q;\n        r.f = r.a.c(\"Name\") ? r.a.a(\"Name\").b : r.a.c(\"RefType\") ? r.a.a(\"Value\").b : null;\n\n        if (r.f == null) {\n          r.f = \"BADKEY_\" + p.toString();\n          p++;\n        }\n\n        m.add(r);\n        l.addItem(r.f, r);\n      }\n\n      for (var s = 0; s < i.length; s++) {\n        var t = new DescriptionTreeReconciler_TreeModeData();\n        t.a = i[s];\n        t.d = s;\n        t.f = t.a.c(\"Name\") ? t.a.a(\"Name\").b : t.a.c(\"RefType\") ? t.a.a(\"Value\").b : null;\n\n        if (t.f == null) {\n          t.f = \"BADKEY_\" + p.toString();\n          p++;\n        }\n\n        o.add(t);\n        n.addItem(t.f, t);\n      }\n\n      for (var u = 0; u < m.count; u++) {\n        var v = m._inner[u];\n\n        if (!n.containsKey(v.f) || n.containsKey(v.f) && DescriptionTreeReconciler.f(v.a) != DescriptionTreeReconciler.f(n.item(v.f).a)) {\n          v.c = true;\n        }\n      }\n\n      for (var w = 0; w < o.count; w++) {\n        var x = o._inner[w];\n\n        if (!l.containsKey(x.f) || l.containsKey(x.f) && DescriptionTreeReconciler.f(x.a) != DescriptionTreeReconciler.f(l.item(x.f).a)) {\n          x.b = true;\n        } else {\n          l.item(x.f).e = w;\n        }\n      }\n\n      for (var y = 0; y < m.count; y++) {\n        var z = m._inner[y];\n\n        if (z.c) {\n          var aa = new DescriptionTreeAction();\n          aa.j = e.c;\n          aa.c = b;\n          aa.b = c;\n          aa.d = e.a;\n          aa.f = z.d;\n          aa.a = 4;\n          aa.h = z.a;\n          a.add(aa);\n\n          for (var ab = y + 1; ab < m.count; ab++) {\n            var ac = m._inner[ab];\n            ac.d--;\n          }\n        }\n      }\n\n      for (var ad = 0; ad < o.count; ad++) {\n        var ae = o._inner[ad];\n\n        if (ae.b) {\n          var af = new DescriptionTreeAction();\n          af.j = e.c;\n          af.c = b;\n          af.b = c;\n          af.d = e.a;\n          af.e = ad;\n          af.a = 2;\n          af.g = i[ad];\n          a.add(af);\n\n          for (var ag = 0; ag < m.count; ag++) {\n            var ah = m._inner[ag];\n\n            if (!ah.c && ah.d >= ad) {\n              ah.d++;\n            }\n          }\n        } else {\n          var ai = l.item(ae.f);\n\n          if (ai.d == ai.e) {\n            DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n            continue;\n          }\n\n          var aj = new DescriptionTreeAction();\n          aj.j = e.c;\n          aj.c = b;\n          aj.b = c;\n          aj.d = e.a;\n          aj.f = ai.d;\n          aj.a = 4;\n          aj.h = ai.a;\n          a.add(aj);\n\n          for (var ak = 0; ak < m.count; ak++) {\n            var al = m._inner[ak];\n\n            if (!al.c && al.a != ai.a && al.d >= ai.d) {\n              al.d--;\n            }\n          }\n\n          aj = new DescriptionTreeAction();\n          aj.j = e.c;\n          aj.c = b;\n          aj.b = c;\n          aj.d = e.a;\n          aj.e = ai.e;\n          aj.a = 2;\n          aj.g = ai.a;\n          a.add(aj);\n          ai.d = ai.e;\n\n          for (var am = 0; am < m.count; am++) {\n            var an = m._inner[am];\n\n            if (!an.c && an.a != ai.a && an.d >= ai.d) {\n              an.d++;\n            }\n          }\n\n          DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n        }\n      }\n    } else {\n      var ao = Math.max(h.length, i.length);\n\n      for (var ap = 0; ap < ao; ap++) {\n        if (ap >= h.length) {\n          var aq = new DescriptionTreeAction();\n          aq.j = e.c;\n          aq.c = b;\n          aq.b = c;\n          aq.d = e.a;\n          aq.e = ap;\n          aq.a = 2;\n          aq.g = i[ap];\n          a.add(aq);\n        } else if (ap >= i.length) {\n          var ar = new DescriptionTreeAction();\n          ar.j = e.c;\n          ar.c = b;\n          ar.b = c;\n          ar.d = e.a;\n          ar.f = i.length;\n          ar.a = 4;\n          ar.h = h[ap];\n          a.add(ar);\n        } else {\n          var as = h[ap];\n          var at = i[ap];\n\n          if (typeCast(DescriptionTreeNode.$, as) !== null && typeCast(DescriptionTreeNode.$, at) !== null) {\n            var au = as;\n            var av = at;\n\n            if (au.i == av.i) {\n              DescriptionTreeReconciler.g(a, au, av, f);\n            } else {\n              var aw = new DescriptionTreeAction();\n              aw.j = e.c;\n              aw.c = b;\n              aw.b = c;\n              aw.d = e.a;\n              aw.f = ap;\n              aw.a = 3;\n              aw.h = h[ap];\n              aw.g = i[ap];\n              a.add(aw);\n            }\n          } else {\n            if (!Base.equalsStatic(as, at)) {\n              var ax = new DescriptionTreeAction();\n              ax.j = e.c;\n              ax.c = b;\n              ax.b = c;\n              ax.d = e.a;\n              ax.f = ap;\n              ax.a = 3;\n              ax.h = h[ap];\n              ax.g = i[ap];\n              a.add(ax);\n            }\n          }\n        }\n      }\n    }\n  };\n\n  DescriptionTreeReconciler.b = function (a, b) {\n    var c = a;\n    var d = b;\n\n    if (c == null && d == null) {\n      return true;\n    }\n\n    if (c != null && d == null || c == null && d != null) {\n      return false;\n    }\n\n    if (c.length != d.length) {\n      return false;\n    }\n\n    for (var e = 0; e < c.length; e++) {\n      var f = c[e];\n      var g = d[e];\n\n      if (typeCast(DescriptionTreeNode.$, f) !== null && !(typeCast(DescriptionTreeNode.$, g) !== null)) {\n        return false;\n      }\n\n      if (!(typeCast(DescriptionTreeNode.$, f) !== null) && typeCast(DescriptionTreeNode.$, g) !== null) {\n        return false;\n      }\n\n      if (typeCast(DescriptionTreeNode.$, f) !== null) {\n        var h = f;\n        var i = g;\n\n        if (h.i != i.i) {\n          return false;\n        }\n\n        var j = h.c(\"Name\") ? h.a(\"Name\").b : null;\n        var k = i.c(\"Name\") ? i.a(\"Name\").b : null;\n\n        if (!Base.equalsStatic(j, k)) {\n          return false;\n        }\n      } else {\n        if (!Base.equalsStatic(f, g)) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  };\n\n  DescriptionTreeReconciler.e = function (a) {\n    var b = new List$1(DescriptionPropertyValue.$, 0);\n    var c = a.f();\n\n    for (var d = 0; d < c.count; d++) {\n      var e = c._inner[d];\n\n      if (e.a != null && e.a.knownType != 10 && e.a.knownType != 9) {\n        b.add(e);\n      }\n    }\n\n    return b;\n  };\n\n  DescriptionTreeReconciler.d = function (a) {\n    var b = new List$1(DescriptionPropertyValue.$, 0);\n    var c = a.f();\n\n    for (var d = 0; d < c.count; d++) {\n      var e = c._inner[d];\n\n      if (e.a != null && (e.a.knownType == 10 || e.a.knownType == 9)) {\n        b.add(e);\n      }\n    }\n\n    return b;\n  };\n\n  DescriptionTreeReconciler.$t = markType(DescriptionTreeReconciler, 'DescriptionTreeReconciler');\n  return DescriptionTreeReconciler;\n}(Base);\n\nexport { DescriptionTreeReconciler };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-core/esm5/lib/DescriptionTreeReconciler.js"],"names":["__extends","Base","typeCast","String_$type","markType","DiffApplyInfo","DescriptionTreeNode","List$1","DescriptionTreeAction","DescriptionPropertyValue","Dictionary$2","DescriptionTreeReconciler_TreeModeData","DescriptionTreeReconciler","_super","apply","arguments","a","b","c","d","count","e","_inner","$","h","f","g","add_1","o","j","contains","remove","add","m","i","k","l","n","p","Array","length","q","r","s","t","u","v","w","x","y","z","aa","equalsStatic","ab","ac","ad","ae","af","ag","ah","ai","aj","ak","al","am","an","ao","ap","aq","ar","as","at","au","av","aw","ax","ay","az","toString","addItem","containsKey","item","Math","max","knownType","$t"],"mappings":"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","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, typeCast, String_$type, markType } from \"./type\";\nimport { DiffApplyInfo } from \"./DiffApplyInfo\";\nimport { DescriptionTreeNode } from \"./DescriptionTreeNode\";\nimport { List$1 } from \"./List$1\";\nimport { DescriptionTreeAction } from \"./DescriptionTreeAction\";\nimport { DescriptionPropertyValue } from \"./DescriptionPropertyValue\";\nimport { Dictionary$2 } from \"./Dictionary$2\";\nimport { DescriptionTreeReconciler_TreeModeData } from \"./DescriptionTreeReconciler_TreeModeData\";\n/**\n * @hidden\n */\nvar DescriptionTreeReconciler = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(DescriptionTreeReconciler, _super);\n    function DescriptionTreeReconciler() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    DescriptionTreeReconciler.a = function (a, b) {\n        var c = new DiffApplyInfo();\n        for (var d = 0; d < b.count; d++) {\n            var e = b._inner[d];\n            switch (e.a) {\n                case 0:\n                    if (typeCast(DescriptionTreeNode.$, e.h) !== null) {\n                        var f = e.h.g;\n                        c.a.add_1(f);\n                    }\n                    e.c.o(e.j, e.g, e.d);\n                    if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n                        var g = e.g.g;\n                        if (c.a.contains(g)) {\n                            c.a.remove(g);\n                        }\n                        c.c.add(e);\n                    }\n                    break;\n                case 1:\n                    if (typeCast(DescriptionTreeNode.$, e.h) !== null) {\n                        var h = e.h.g;\n                        c.a.add_1(h);\n                    }\n                    e.c.m(e.j);\n                    break;\n                case 3:\n                    {\n                        var i = e.c.a(e.j).b;\n                        var j = i[e.f];\n                        if (typeCast(DescriptionTreeNode.$, j) !== null) {\n                            var k = j.g;\n                            c.a.add_1(k);\n                        }\n                        i[e.f] = e.g;\n                        if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n                            var l = e.g.g;\n                            if (c.a.contains(l)) {\n                                c.a.remove(l);\n                            }\n                            c.b.add(e);\n                        }\n                    }\n                    break;\n                case 4:\n                    {\n                        var m = e.c.a(e.j).b;\n                        var n = m[e.f];\n                        if (typeCast(DescriptionTreeNode.$, n) !== null) {\n                            var o = n.g;\n                            c.a.add_1(o);\n                        }\n                        var p = new Array(m.length - 1);\n                        var q = 0;\n                        for (var r = 0; r < m.length; r++) {\n                            if (r != e.f) {\n                                p[q] = m[r];\n                                q++;\n                            }\n                        }\n                        e.c.n(e.j, p);\n                    }\n                    break;\n                case 2:\n                    {\n                        if (e.c == null && a == null) {\n                            c.d.add(e);\n                        }\n                        else {\n                            var s = e.c.a(e.j).b;\n                            var t = new Array(s.length + 1);\n                            var u = 0;\n                            for (var v = 0; v < t.length; v++) {\n                                if (v == e.e) {\n                                    t[v] = e.g;\n                                }\n                                else {\n                                    t[v] = s[u];\n                                    u++;\n                                }\n                            }\n                            e.c.n(e.j, t);\n                            if (typeCast(DescriptionTreeNode.$, e.g) !== null) {\n                                var w = e.g.g;\n                                if (c.a.contains(w)) {\n                                    c.a.remove(w);\n                                }\n                                c.b.add(e);\n                            }\n                        }\n                    }\n                    break;\n                case 5:\n                    {\n                        var x = e.c.a(e.j).b;\n                        for (var y = 0; y < x.length; y++) {\n                            var z = x[y];\n                            if (typeCast(DescriptionTreeNode.$, z) !== null) {\n                                var aa = z.g;\n                                c.a.add_1(aa);\n                            }\n                        }\n                        e.c.n(e.j, []);\n                    }\n                    break;\n            }\n        }\n        return c;\n    };\n    DescriptionTreeReconciler.c = function (a, b, c) {\n        var d = new List$1(DescriptionTreeAction.$, 0);\n        if (a == null && b == null) {\n            return d;\n        }\n        if (a != null && b == null) {\n            var e = new DescriptionTreeAction();\n            e.a = 4;\n            e.f = 0;\n            e.h = a;\n            e.d = null;\n            e.j = null;\n            d.add(e);\n            return d;\n        }\n        if (a == null && b != null) {\n            var f = new DescriptionTreeAction();\n            f.a = 2;\n            f.f = 0;\n            f.g = b;\n            f.d = null;\n            f.j = null;\n            d.add(f);\n            return d;\n        }\n        if (b.i != a.i) {\n            var g = new DescriptionTreeAction();\n            g.a = 3;\n            g.f = 0;\n            g.h = a;\n            g.g = b;\n            g.d = null;\n            g.j = null;\n            d.add(g);\n            return d;\n        }\n        DescriptionTreeReconciler.g(d, a, b, c);\n        return d;\n    };\n    DescriptionTreeReconciler.g = function (a, b, c, d) {\n        c.g = b.g;\n        var e = DescriptionTreeReconciler.e(b);\n        var f = DescriptionTreeReconciler.e(c);\n        var g = new List$1(DescriptionPropertyValue.$, 0);\n        var h = new List$1(DescriptionPropertyValue.$, 0);\n        var i = new List$1(DescriptionPropertyValue.$, 0);\n        for (var j = 0; j < e.count; j++) {\n            var k = e._inner[j];\n            if (c.c(k.c)) {\n                if (!Base.equalsStatic(k, c.a(k.c))) {\n                    var l = c.a(k.c);\n                    if (typeCast(DescriptionTreeNode.$, k.b) !== null && typeCast(DescriptionTreeNode.$, l.b) !== null) {\n                        var m = k.b;\n                        var n = l.b;\n                        if (m.i == n.i) {\n                            if ((!m.c(\"Name\") && !n.c(\"Name\")) || (m.c(\"Name\") && n.c(\"Name\") && (m.a(\"Name\").b == n.a(\"Name\").b))) {\n                                DescriptionTreeReconciler.g(a, m, n, d);\n                            }\n                            else {\n                                i.add(c.a(k.c));\n                            }\n                        }\n                        else {\n                            i.add(c.a(k.c));\n                        }\n                    }\n                    else {\n                        i.add(c.a(k.c));\n                    }\n                }\n            }\n            else {\n                if (!d) {\n                    g.add(k);\n                }\n            }\n        }\n        for (var o = 0; o < f.count; o++) {\n            var p = f._inner[o];\n            if (!b.c(p.c)) {\n                h.add(p);\n            }\n        }\n        for (var q = 0; q < g.count; q++) {\n            var r = g._inner[q];\n            var s = new DescriptionTreeAction();\n            s.c = b;\n            s.b = c;\n            s.a = 1;\n            s.j = r.c;\n            s.d = r.a;\n            s.h = r.b;\n            a.add(s);\n        }\n        for (var t = 0; t < h.count; t++) {\n            var u = h._inner[t];\n            var v = new DescriptionTreeAction();\n            v.c = b;\n            v.b = c;\n            v.a = 0;\n            v.j = u.c;\n            v.d = u.a;\n            v.g = u.b;\n            v.h = null;\n            a.add(v);\n        }\n        for (var w = 0; w < i.count; w++) {\n            var x = i._inner[w];\n            var y = b.a(x.c).b;\n            var z = x.b;\n            if (!Base.equalsStatic(z, y)) {\n                var aa = new DescriptionTreeAction();\n                aa.c = b;\n                aa.b = c;\n                aa.a = 0;\n                aa.j = x.c;\n                aa.d = x.a;\n                aa.g = x.b;\n                aa.h = b.a(x.c).b;\n                a.add(aa);\n            }\n        }\n        var ab = DescriptionTreeReconciler.d(b);\n        var ac = DescriptionTreeReconciler.d(c);\n        var ad = new List$1(DescriptionPropertyValue.$, 0);\n        var ae = new List$1(DescriptionPropertyValue.$, 0);\n        var af = new List$1(DescriptionPropertyValue.$, 0);\n        for (var ag = 0; ag < ab.count; ag++) {\n            var ah = ab._inner[ag];\n            if (c.c(ah.c)) {\n                if (!DescriptionTreeReconciler.b(ah.b, c.a(ah.c).b)) {\n                    af.add(c.a(ah.c));\n                }\n                else {\n                    var ai = ah.b;\n                    var aj = c.a(ah.c).b;\n                    for (var ak = 0; ak < ai.length; ak++) {\n                        var al = ai[ak];\n                        var am = aj[ak];\n                        if (typeCast(DescriptionTreeNode.$, al) !== null && typeCast(DescriptionTreeNode.$, am) !== null) {\n                            var an = al;\n                            var ao = am;\n                            if (an.i == ao.i) {\n                                DescriptionTreeReconciler.g(a, an, ao, d);\n                            }\n                            else {\n                                var ap = new DescriptionTreeAction();\n                                ap.j = ah.c;\n                                ap.d = ah.a;\n                                ap.c = b;\n                                ap.b = c;\n                                ap.a = 3;\n                                ap.f = ak;\n                                ap.e = ak;\n                                ap.h = an;\n                                ap.g = ao;\n                                a.add(ap);\n                            }\n                        }\n                        else {\n                            if (!Base.equalsStatic(al, am)) {\n                                var aq = new DescriptionTreeAction();\n                                aq.j = ah.c;\n                                aq.d = ah.a;\n                                aq.c = b;\n                                aq.b = c;\n                                aq.a = 3;\n                                aq.f = ak;\n                                aq.e = ak;\n                                aq.h = al;\n                                aq.g = am;\n                                a.add(aq);\n                            }\n                        }\n                    }\n                }\n            }\n            else {\n                if (!d) {\n                    ad.add(ah);\n                }\n            }\n        }\n        for (var ar = 0; ar < ac.count; ar++) {\n            var as = ac._inner[ar];\n            if (!b.c(as.c)) {\n                ae.add(as);\n            }\n        }\n        for (var at = 0; at < ad.count; at++) {\n            var au = ad._inner[at];\n            var av = new DescriptionTreeAction();\n            av.c = b;\n            av.b = c;\n            av.j = au.c;\n            av.d = au.a;\n            av.a = 5;\n            av.h = au.b;\n            a.add(av);\n        }\n        for (var aw = 0; aw < ae.count; aw++) {\n            var ax = ae._inner[aw];\n            var ay = new DescriptionTreeAction();\n            ay.c = b;\n            ay.b = c;\n            ay.j = ax.c;\n            ay.d = ax.a;\n            ay.a = 0;\n            ay.h = null;\n            ay.g = ax.b;\n            a.add(ay);\n        }\n        for (var az = 0; az < af.count; az++) {\n            DescriptionTreeReconciler.h(a, b, c, b.a(af._inner[az].c), af._inner[az], d);\n        }\n    };\n    DescriptionTreeReconciler.f = function (a) {\n        if (a == null) {\n            return \"UNKOWN\";\n        }\n        if (!a.c(\"Type\")) {\n            return \"UNKOWN\";\n        }\n        return a.a(\"Type\").b;\n    };\n    DescriptionTreeReconciler.h = function (a, b, c, d, e, f) {\n        var g = false;\n        var h = d.b;\n        var i = e.b;\n        if (h.length > 0) {\n            if (typeCast(DescriptionTreeNode.$, h[0]) !== null) {\n                var j = h[0];\n                if (j.c(\"Name\") && j.a(\"Name\") != null) {\n                    g = true;\n                }\n                if (j.c(\"RefType\") && j.a(\"RefType\").b == \"uuid\") {\n                    g = true;\n                }\n            }\n        }\n        if (i.length > 0) {\n            if (typeCast(DescriptionTreeNode.$, i[0]) !== null) {\n                var k = i[0];\n                if (k.c(\"Name\") && k.a(\"Name\") != null) {\n                    g = true;\n                }\n                if (k.c(\"RefType\") && k.a(\"RefType\").b == \"uuid\") {\n                    g = true;\n                }\n            }\n        }\n        if (g) {\n            var l = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n            var m = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n            var n = new Dictionary$2(String_$type, DescriptionTreeReconciler_TreeModeData.$, 0);\n            var o = new List$1(DescriptionTreeReconciler_TreeModeData.$, 0);\n            var p = 0;\n            for (var q = 0; q < h.length; q++) {\n                var r = new DescriptionTreeReconciler_TreeModeData();\n                r.a = h[q];\n                r.d = q;\n                r.f = r.a.c(\"Name\") ? r.a.a(\"Name\").b : r.a.c(\"RefType\") ? r.a.a(\"Value\").b : null;\n                if (r.f == null) {\n                    r.f = \"BADKEY_\" + p.toString();\n                    p++;\n                }\n                m.add(r);\n                l.addItem(r.f, r);\n            }\n            for (var s = 0; s < i.length; s++) {\n                var t = new DescriptionTreeReconciler_TreeModeData();\n                t.a = i[s];\n                t.d = s;\n                t.f = t.a.c(\"Name\") ? t.a.a(\"Name\").b : t.a.c(\"RefType\") ? t.a.a(\"Value\").b : null;\n                if (t.f == null) {\n                    t.f = \"BADKEY_\" + p.toString();\n                    p++;\n                }\n                o.add(t);\n                n.addItem(t.f, t);\n            }\n            for (var u = 0; u < m.count; u++) {\n                var v = m._inner[u];\n                if (!n.containsKey(v.f) || (n.containsKey(v.f) && DescriptionTreeReconciler.f(v.a) != DescriptionTreeReconciler.f(n.item(v.f).a))) {\n                    v.c = true;\n                }\n            }\n            for (var w = 0; w < o.count; w++) {\n                var x = o._inner[w];\n                if (!l.containsKey(x.f) || (l.containsKey(x.f) && DescriptionTreeReconciler.f(x.a) != DescriptionTreeReconciler.f(l.item(x.f).a))) {\n                    x.b = true;\n                }\n                else {\n                    l.item(x.f).e = w;\n                }\n            }\n            for (var y = 0; y < m.count; y++) {\n                var z = m._inner[y];\n                if (z.c) {\n                    var aa = new DescriptionTreeAction();\n                    aa.j = e.c;\n                    aa.c = b;\n                    aa.b = c;\n                    aa.d = e.a;\n                    aa.f = z.d;\n                    aa.a = 4;\n                    aa.h = z.a;\n                    a.add(aa);\n                    for (var ab = y + 1; ab < m.count; ab++) {\n                        var ac = m._inner[ab];\n                        ac.d--;\n                    }\n                }\n            }\n            for (var ad = 0; ad < o.count; ad++) {\n                var ae = o._inner[ad];\n                if (ae.b) {\n                    var af = new DescriptionTreeAction();\n                    af.j = e.c;\n                    af.c = b;\n                    af.b = c;\n                    af.d = e.a;\n                    af.e = ad;\n                    af.a = 2;\n                    af.g = i[ad];\n                    a.add(af);\n                    for (var ag = 0; ag < m.count; ag++) {\n                        var ah = m._inner[ag];\n                        if (!ah.c && ah.d >= ad) {\n                            ah.d++;\n                        }\n                    }\n                }\n                else {\n                    var ai = l.item(ae.f);\n                    if (ai.d == ai.e) {\n                        DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n                        continue;\n                    }\n                    var aj = new DescriptionTreeAction();\n                    aj.j = e.c;\n                    aj.c = b;\n                    aj.b = c;\n                    aj.d = e.a;\n                    aj.f = ai.d;\n                    aj.a = 4;\n                    aj.h = ai.a;\n                    a.add(aj);\n                    for (var ak = 0; ak < m.count; ak++) {\n                        var al = m._inner[ak];\n                        if (!al.c && al.a != ai.a && al.d >= ai.d) {\n                            al.d--;\n                        }\n                    }\n                    aj = new DescriptionTreeAction();\n                    aj.j = e.c;\n                    aj.c = b;\n                    aj.b = c;\n                    aj.d = e.a;\n                    aj.e = ai.e;\n                    aj.a = 2;\n                    aj.g = ai.a;\n                    a.add(aj);\n                    ai.d = ai.e;\n                    for (var am = 0; am < m.count; am++) {\n                        var an = m._inner[am];\n                        if (!an.c && an.a != ai.a && an.d >= ai.d) {\n                            an.d++;\n                        }\n                    }\n                    DescriptionTreeReconciler.g(a, ai.a, ae.a, f);\n                }\n            }\n        }\n        else {\n            var ao = Math.max(h.length, i.length);\n            for (var ap = 0; ap < ao; ap++) {\n                if (ap >= h.length) {\n                    var aq = new DescriptionTreeAction();\n                    aq.j = e.c;\n                    aq.c = b;\n                    aq.b = c;\n                    aq.d = e.a;\n                    aq.e = ap;\n                    aq.a = 2;\n                    aq.g = i[ap];\n                    a.add(aq);\n                }\n                else if (ap >= i.length) {\n                    var ar = new DescriptionTreeAction();\n                    ar.j = e.c;\n                    ar.c = b;\n                    ar.b = c;\n                    ar.d = e.a;\n                    ar.f = i.length;\n                    ar.a = 4;\n                    ar.h = h[ap];\n                    a.add(ar);\n                }\n                else {\n                    var as = h[ap];\n                    var at = i[ap];\n                    if (typeCast(DescriptionTreeNode.$, as) !== null && typeCast(DescriptionTreeNode.$, at) !== null) {\n                        var au = as;\n                        var av = at;\n                        if (au.i == av.i) {\n                            DescriptionTreeReconciler.g(a, au, av, f);\n                        }\n                        else {\n                            var aw = new DescriptionTreeAction();\n                            aw.j = e.c;\n                            aw.c = b;\n                            aw.b = c;\n                            aw.d = e.a;\n                            aw.f = ap;\n                            aw.a = 3;\n                            aw.h = h[ap];\n                            aw.g = i[ap];\n                            a.add(aw);\n                        }\n                    }\n                    else {\n                        if (!Base.equalsStatic(as, at)) {\n                            var ax = new DescriptionTreeAction();\n                            ax.j = e.c;\n                            ax.c = b;\n                            ax.b = c;\n                            ax.d = e.a;\n                            ax.f = ap;\n                            ax.a = 3;\n                            ax.h = h[ap];\n                            ax.g = i[ap];\n                            a.add(ax);\n                        }\n                    }\n                }\n            }\n        }\n    };\n    DescriptionTreeReconciler.b = function (a, b) {\n        var c = a;\n        var d = b;\n        if (c == null && d == null) {\n            return true;\n        }\n        if ((c != null && d == null) || (c == null && d != null)) {\n            return false;\n        }\n        if (c.length != d.length) {\n            return false;\n        }\n        for (var e = 0; e < c.length; e++) {\n            var f = c[e];\n            var g = d[e];\n            if (typeCast(DescriptionTreeNode.$, f) !== null && !(typeCast(DescriptionTreeNode.$, g) !== null)) {\n                return false;\n            }\n            if (!(typeCast(DescriptionTreeNode.$, f) !== null) && typeCast(DescriptionTreeNode.$, g) !== null) {\n                return false;\n            }\n            if (typeCast(DescriptionTreeNode.$, f) !== null) {\n                var h = f;\n                var i = g;\n                if (h.i != i.i) {\n                    return false;\n                }\n                var j = h.c(\"Name\") ? h.a(\"Name\").b : null;\n                var k = i.c(\"Name\") ? i.a(\"Name\").b : null;\n                if (!Base.equalsStatic(j, k)) {\n                    return false;\n                }\n            }\n            else {\n                if (!Base.equalsStatic(f, g)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    };\n    DescriptionTreeReconciler.e = function (a) {\n        var b = new List$1(DescriptionPropertyValue.$, 0);\n        var c = a.f();\n        for (var d = 0; d < c.count; d++) {\n            var e = c._inner[d];\n            if (e.a != null && e.a.knownType != 10 && e.a.knownType != 9) {\n                b.add(e);\n            }\n        }\n        return b;\n    };\n    DescriptionTreeReconciler.d = function (a) {\n        var b = new List$1(DescriptionPropertyValue.$, 0);\n        var c = a.f();\n        for (var d = 0; d < c.count; d++) {\n            var e = c._inner[d];\n            if (e.a != null && (e.a.knownType == 10 || e.a.knownType == 9)) {\n                b.add(e);\n            }\n        }\n        return b;\n    };\n    DescriptionTreeReconciler.$t = markType(DescriptionTreeReconciler, 'DescriptionTreeReconciler');\n    return DescriptionTreeReconciler;\n}(Base));\nexport { DescriptionTreeReconciler };\n"]},"metadata":{},"sourceType":"module"}