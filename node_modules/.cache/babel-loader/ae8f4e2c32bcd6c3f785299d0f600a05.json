{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __read, __spreadArray } from \"tslib\";\nimport { getEnumerator } from \"./type\";\nimport { EnumUtil } from './type';\nexport function stringStartsWith(str, check) {\n  return str.indexOf(check) == 0;\n}\nexport function stringEndsWith(str, check) {\n  var ind = str.lastIndexOf(check);\n  return ind >= 0 && ind == str.length - check.length;\n}\nexport function stringContains(str, check) {\n  return str.indexOf(check) != -1;\n}\nexport function stringCreateFromCharArray(charArray) {\n  return charArray.join(\"\");\n}\nexport function stringCreateFromChar(char, count) {\n  var ret = \"\";\n\n  for (var i = 0; i < count; i++) {\n    ret = ret + char;\n  }\n\n  return ret;\n}\nexport function stringCreateFromCharArraySlice(charArray, start, length) {\n  var ret = \"\";\n\n  for (var i = 0; i < length; i++) {\n    ret = ret + charArray[start + i];\n  }\n\n  return ret;\n}\n;\nexport function stringToCharArray(target) {\n  return target.split(\"\");\n}\nexport function stringCopyToCharArray(source, sourceIndex, destination, destinationIndex, count) {\n  for (var i = destinationIndex; i < destinationIndex + count; i++) {\n    destination[i] = source.charAt(sourceIndex + i - destinationIndex);\n  }\n}\n;\nexport function stringIsDigit(str, index) {\n  index = index || 0;\n  var ch = str.charAt(index);\n\n  if (ch >= \"0\" && ch <= \"9\") {\n    return true;\n  }\n\n  return false;\n}\n;\nexport function charMaxValue() {\n  return \"\\uffff\";\n}\nexport function charMinValue() {\n  return \"\\u0000\";\n} // static toDateTime(target: string) {\n// \tvar result = new Date(target);\n// \tif (!isNaN(+result)) {\n// \t\treturn result;\n// \t}\n// \t// TODO: Cache this regex?\n// \tif (/^((([0-9]{1,4})\\s*(\\s+((a|p)m?)\\s*))|(([0-9]{1,4})\\s*:\\s*([0-9]?[0-9])\\s*(:\\s*([0-9]?[0-9])\\s*(.\\s*([0-9]{0,4})[0-9]*\\s*)?)?(\\s+((a|p)m?)\\s*)?)|(\\s*([0-9]?[0-9])\\s*:\\s*([0-9]?[0-9])\\s*.\\s*([0-9]{0,4})[0-9]*\\s*(\\s+((a|p)m?)\\s*)?))$/i.test(target)) {\n// \t\t// The string can be a time string only, in which case we should return today at that time.\n// \t\treturn new Date(new Date().toDateString() + \" \" + target);\n// \t}\n// \tthrow new FormatException(1, \"The string cannot be converted to a date\");\n// }\n// static toDecimal(target: string) {\n// \tvar result = +target;\n// \tif (isNaN(result)) {\n// \t\tnew FormatException(1, \"The string cannot be converted to a number\");\n// \t}\n// \treturn result;\n// }\n\nexport function stringToString1(target) {\n  return target.toString();\n}\nexport function stringRemove(target, index, count) {\n  if (!count || index + count > target.length) {\n    return target.substr(0, index);\n  }\n\n  return target.substr(0, index) + target.substr(index + count);\n}\nexport function stringCompareTo(target, other) {\n  if (target == other) {\n    return 0;\n  }\n\n  if (target < other) {\n    return -1;\n  }\n\n  return 1;\n}\nexport var stringCompare = stringCompareTo;\nexport function stringIsNullOrEmpty(target) {\n  return !target || target.length < 1;\n}\nexport function stringIsNullOrWhiteSpace(target) {\n  return !target || target.trim().length < 1;\n}\nexport function stringEmpty() {\n  return \"\";\n}\nexport function stringEquals(target, other) {\n  return target == other;\n}\nexport function stringEscapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function createGuid() {\n  /*jslint bitwise: true */\n  function S4() {\n    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n  }\n\n  return (S4() + S4() + \"-\" + S4() + \"-4\" + S4().substr(0, 3) + \"-\" + S4() + \"-\" + S4() + S4() + S4()).toLowerCase();\n}\nexport function stringConcat() {\n  var _a;\n\n  var s = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    s[_i] = arguments[_i];\n  }\n\n  return (_a = String.prototype).concat.apply(_a, __spreadArray([], __read(s), false));\n}\nexport function stringReplace(str, oldValue, newValue) {\n  return str.replace(new RegExp(stringEscapeRegExp(oldValue), \"g\"), newValue);\n}\nexport function stringJoin(sep) {\n  var vals = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    vals[_i - 1] = arguments[_i];\n  }\n\n  return vals.join(sep);\n}\nexport function stringJoin1($t, sep, vals) {\n  var result;\n  var en = getEnumerator(vals);\n\n  while (en.moveNext()) {\n    var v = en.current.toString();\n\n    if (result === undefined) {\n      result = v;\n    } else {\n      result += sep + v;\n    }\n  }\n\n  return result;\n}\nexport function stringToString$1($t, v) {\n  if (v !== null && $t) {\n    if ($t.isNullable) {\n      $t = $t.typeArguments[0];\n    }\n\n    if ($t.isEnumType) {\n      return EnumUtil.getName($t, v);\n    }\n  }\n\n  return v.toString();\n}\nexport function stringToLocaleLower(str, locale) {\n  if (locale == null || locale.name == null) return str.toLocaleLowerCase();\n  return str.toLocaleLowerCase(locale.name);\n}\nexport function stringToLocaleUpper(str, locale) {\n  if (locale == null || locale.name == null) return str.toLocaleUpperCase();\n  return str.toLocaleUpperCase(locale.name);\n}","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-core/esm5/lib/string.js"],"names":["__read","__spreadArray","getEnumerator","EnumUtil","stringStartsWith","str","check","indexOf","stringEndsWith","ind","lastIndexOf","length","stringContains","stringCreateFromCharArray","charArray","join","stringCreateFromChar","char","count","ret","i","stringCreateFromCharArraySlice","start","stringToCharArray","target","split","stringCopyToCharArray","source","sourceIndex","destination","destinationIndex","charAt","stringIsDigit","index","ch","charMaxValue","charMinValue","stringToString1","toString","stringRemove","substr","stringCompareTo","other","stringCompare","stringIsNullOrEmpty","stringIsNullOrWhiteSpace","trim","stringEmpty","stringEquals","stringEscapeRegExp","replace","createGuid","S4","Math","random","substring","toLowerCase","stringConcat","_a","s","_i","arguments","String","prototype","concat","apply","stringReplace","oldValue","newValue","RegExp","stringJoin","sep","vals","stringJoin1","$t","result","en","moveNext","v","current","undefined","stringToString$1","isNullable","typeArguments","isEnumType","getName","stringToLocaleLower","locale","name","toLocaleLowerCase","stringToLocaleUpper","toLocaleUpperCase"],"mappings":"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","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __read, __spreadArray } from \"tslib\";\nimport { getEnumerator } from \"./type\";\nimport { EnumUtil } from './type';\nexport function stringStartsWith(str, check) {\n    return str.indexOf(check) == 0;\n}\nexport function stringEndsWith(str, check) {\n    var ind = str.lastIndexOf(check);\n    return ind >= 0 && ind == str.length - check.length;\n}\nexport function stringContains(str, check) {\n    return str.indexOf(check) != -1;\n}\nexport function stringCreateFromCharArray(charArray) {\n    return charArray.join(\"\");\n}\nexport function stringCreateFromChar(char, count) {\n    var ret = \"\";\n    for (var i = 0; i < count; i++) {\n        ret = ret + char;\n    }\n    return ret;\n}\nexport function stringCreateFromCharArraySlice(charArray, start, length) {\n    var ret = \"\";\n    for (var i = 0; i < length; i++) {\n        ret = ret + charArray[start + i];\n    }\n    return ret;\n}\n;\nexport function stringToCharArray(target) {\n    return target.split(\"\");\n}\nexport function stringCopyToCharArray(source, sourceIndex, destination, destinationIndex, count) {\n    for (var i = destinationIndex; i < destinationIndex + count; i++) {\n        destination[i] = source.charAt(sourceIndex + i - destinationIndex);\n    }\n}\n;\nexport function stringIsDigit(str, index) {\n    index = index || 0;\n    var ch = str.charAt(index);\n    if (ch >= \"0\" && ch <= \"9\") {\n        return true;\n    }\n    return false;\n}\n;\nexport function charMaxValue() {\n    return \"\\uffff\";\n}\nexport function charMinValue() {\n    return \"\\u0000\";\n}\n// static toDateTime(target: string) {\n// \tvar result = new Date(target);\n// \tif (!isNaN(+result)) {\n// \t\treturn result;\n// \t}\n// \t// TODO: Cache this regex?\n// \tif (/^((([0-9]{1,4})\\s*(\\s+((a|p)m?)\\s*))|(([0-9]{1,4})\\s*:\\s*([0-9]?[0-9])\\s*(:\\s*([0-9]?[0-9])\\s*(.\\s*([0-9]{0,4})[0-9]*\\s*)?)?(\\s+((a|p)m?)\\s*)?)|(\\s*([0-9]?[0-9])\\s*:\\s*([0-9]?[0-9])\\s*.\\s*([0-9]{0,4})[0-9]*\\s*(\\s+((a|p)m?)\\s*)?))$/i.test(target)) {\n// \t\t// The string can be a time string only, in which case we should return today at that time.\n// \t\treturn new Date(new Date().toDateString() + \" \" + target);\n// \t}\n// \tthrow new FormatException(1, \"The string cannot be converted to a date\");\n// }\n// static toDecimal(target: string) {\n// \tvar result = +target;\n// \tif (isNaN(result)) {\n// \t\tnew FormatException(1, \"The string cannot be converted to a number\");\n// \t}\n// \treturn result;\n// }\nexport function stringToString1(target) {\n    return target.toString();\n}\nexport function stringRemove(target, index, count) {\n    if (!count || ((index + count) > target.length)) {\n        return target.substr(0, index);\n    }\n    return target.substr(0, index) + target.substr(index + count);\n}\nexport function stringCompareTo(target, other) {\n    if (target == other) {\n        return 0;\n    }\n    if (target < other) {\n        return -1;\n    }\n    return 1;\n}\nexport var stringCompare = stringCompareTo;\nexport function stringIsNullOrEmpty(target) { return !target || target.length < 1; }\nexport function stringIsNullOrWhiteSpace(target) { return !target || target.trim().length < 1; }\nexport function stringEmpty() { return \"\"; }\nexport function stringEquals(target, other) { return target == other; }\nexport function stringEscapeRegExp(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function createGuid() {\n    /*jslint bitwise: true */\n    function S4() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    }\n    return (S4() + S4() + \"-\" + S4() + \"-4\" + S4().substr(0, 3) + \"-\" + S4() + \"-\" + S4() +\n        S4() + S4()).toLowerCase();\n}\nexport function stringConcat() {\n    var _a;\n    var s = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        s[_i] = arguments[_i];\n    }\n    return (_a = String.prototype).concat.apply(_a, __spreadArray([], __read(s), false));\n}\nexport function stringReplace(str, oldValue, newValue) {\n    return str.replace(new RegExp(stringEscapeRegExp(oldValue), \"g\"), newValue);\n}\nexport function stringJoin(sep) {\n    var vals = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        vals[_i - 1] = arguments[_i];\n    }\n    return vals.join(sep);\n}\nexport function stringJoin1($t, sep, vals) {\n    var result;\n    var en = getEnumerator(vals);\n    while (en.moveNext()) {\n        var v = en.current.toString();\n        if (result === undefined) {\n            result = v;\n        }\n        else {\n            result += sep + v;\n        }\n    }\n    return result;\n}\nexport function stringToString$1($t, v) {\n    if (v !== null && $t) {\n        if ($t.isNullable) {\n            $t = $t.typeArguments[0];\n        }\n        if ($t.isEnumType) {\n            return EnumUtil.getName($t, v);\n        }\n    }\n    return v.toString();\n}\nexport function stringToLocaleLower(str, locale) {\n    if (locale == null || locale.name == null)\n        return str.toLocaleLowerCase();\n    return str.toLocaleLowerCase(locale.name);\n}\nexport function stringToLocaleUpper(str, locale) {\n    if (locale == null || locale.name == null)\n        return str.toLocaleUpperCase();\n    return str.toLocaleUpperCase(locale.name);\n}\n"]},"metadata":{},"sourceType":"module"}