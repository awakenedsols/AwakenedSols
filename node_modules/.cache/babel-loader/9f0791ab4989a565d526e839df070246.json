{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { Treemap } from \"./Treemap\";\nimport { toPoint, ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps, fromBrushCollection, toBrushCollection } from \"igniteui-react-core\";\nimport { FontInfo } from \"igniteui-react-core\";\nimport { ReactRenderer } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { TreemapNodeStyleMapping } from './TreemapNodeStyleMapping';\nimport { IgrTreemapNodeStyleMappingCollection } from './igr-treemap-node-style-mapping-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { CollectionAdapter } from \"igniteui-react-core\";\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { TreemapFillScaleMode_$type } from \"./TreemapFillScaleMode\";\nimport { IgrTreemapNodeStylingEventArgs } from \"./igr-treemap-node-styling-event-args\";\nimport { TreemapOrientation_$type } from './TreemapOrientation';\nimport { TreemapLayoutType_$type } from './TreemapLayoutType';\nimport { IgrTreemapNodePointerEventArgs } from './igr-treemap-node-pointer-event-args';\nimport { TreemapHeaderDisplayMode_$type } from './TreemapHeaderDisplayMode';\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { VerticalAlignment_$type } from \"igniteui-react-core\";\nimport { TreemapLabelHorizontalFitMode_$type } from './TreemapLabelHorizontalFitMode';\nimport { TreemapLabelVerticalFitMode_$type } from './TreemapLabelVerticalFitMode';\n\nvar IgrTreemap =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrTreemap, _super);\n\n  function IgrTreemap(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this._wrapper = null;\n    _this.contentStyleMappings = [];\n    /**\n    * The style mappings actually present in the treemap. Do not directly modify this array.\n    * This array's contents can be modified by causing React to reproject the child content.\n    * Or adding and removing ranges from the manual ranges collection on the ranges property.\n    */\n\n    _this.actualStyleMappings = [];\n    _this._styleMappings = null;\n    _this._styleMappingsAdapter = null;\n    _this._implementation = null;\n    _this.__p = null;\n    _this._hasUserValues = new Set();\n    _this._stylingContainer = null;\n    _this._stylingParent = null;\n    _this._inStyling = false;\n    _this._nodeStyling = null;\n    _this._nodeStyling_wrapped = null;\n    _this._nodePointerOver = null;\n    _this._nodePointerOver_wrapped = null;\n    _this._nodePointerEnter = null;\n    _this._nodePointerEnter_wrapped = null;\n    _this._nodePointerLeave = null;\n    _this._nodePointerLeave_wrapped = null;\n    _this._nodePointerPressed = null;\n    _this._nodePointerPressed_wrapped = null;\n    _this._nodePointerReleased = null;\n    _this._nodePointerReleased_wrapped = null;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._getMainRef = _this._getMainRef.bind(_this);\n    _this._contentChildrenManager = new ContentChildrenManager(function (ch) {\n      return ch.key || ch.props.name;\n    }, function (ch) {\n      return ch.key || ch.props.name;\n    }, function () {\n      return _this._updateContentChildren();\n    });\n    _this._implementation = _this.createImplementation();\n\n    if (document) {\n      _this._container = document.createElement(\"div\");\n      _this._container.style.display = \"block\";\n      _this._container.style.width = \"100%\";\n      _this._container.style.height = \"100%\";\n    }\n\n    var root;\n    root = _this._container;\n\n    if (_this._container != null) {\n      root = _this._container;\n    }\n\n    var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n    _this._wrapper = ren;\n    var treemap = _this.i;\n    _this._treeMap = treemap;\n    _this._styleMappingsAdapter = new CollectionAdapter(_this.contentStyleMappings, _this.i.styleMappings, _this.actualStyleMappings, function (c) {\n      return c.i;\n    }, function (i) {\n      if (_this._container && _this._container.parentElement) {\n        i._styling(_this._container, _this, _this);\n      }\n    }, function (i) {});\n    treemap.provideContainer(ren);\n    treemap.notifySizeChanged();\n\n    if (props) {\n      _this.initializeProperties();\n    }\n\n    ren.addSizeWatcher(function () {\n      _this._treeMap.notifySizeChanged();\n    });\n    return _this;\n  }\n\n  Object.defineProperty(IgrTreemap.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n\n        this._treeMap.notifySizeChanged();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n\n        this._treeMap.notifySizeChanged();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrTreemap.prototype._getMainRef = function (ref) {\n    this._elRef = ref;\n  };\n\n  IgrTreemap.prototype._updateContentChildren = function () {\n    this.contentStyleMappings.length = 0;\n    var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n\n    for (var i = 0; i < contentChildrenActual.length; i++) {\n      if (TreemapNodeStyleMapping.$type.isAssignableFrom(contentChildrenActual[i].i.$type)) {\n        this.contentStyleMappings.push(contentChildrenActual[i]);\n      }\n    }\n\n    if (this._styleMappingsAdapter !== null) {\n      this._styleMappingsAdapter.notifyContentChanged();\n    }\n  };\n\n  Object.defineProperty(IgrTreemap.prototype, \"styleMappings\", {\n    /**\n     * A collection of manually added style mappings for the treemap.\n    */\n    get: function () {\n      var _this = this;\n\n      if (this._styleMappings === null) {\n        var coll = new IgrTreemapNodeStyleMappingCollection();\n        var inner = coll._innerColl;\n        inner.addListener(function (sender, e) {\n          switch (e.action) {\n            case NotifyCollectionChangedAction.Add:\n              _this._styleMappingsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Remove:\n              _this._styleMappingsAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              break;\n\n            case NotifyCollectionChangedAction.Replace:\n              _this._styleMappingsAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              _this._styleMappingsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Reset:\n              _this._styleMappingsAdapter.clearManualItems();\n\n              break;\n          }\n        });\n        this._styleMappings = coll;\n      }\n\n      return this._styleMappings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrTreemap.prototype.render = function () {\n    var children = this._contentChildrenManager.getChildren(this.props.children);\n\n    var div = React.createElement(\"div\", {\n      className: \"ig-treemap igr-treemap\",\n      ref: this._getMainRef,\n      children: children\n    }); //}\n\n    return div;\n  };\n\n  IgrTreemap.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    var e_1, _a;\n\n    var mod = getModifiedProps(this.props, nextProps);\n\n    try {\n      for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = mod[p];\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return true;\n  };\n\n  IgrTreemap.prototype.initializeProperties = function () {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var p = _c.value;\n\n        if (isValidProp(this, p)) {\n          this[p] = this.props[p];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  }; // supports angular themes or custom properties set in CSS\n\n\n  IgrTreemap.prototype.updateStyle = function () {\n    this._styling(this._elRef, this);\n  };\n\n  IgrTreemap.prototype.componentWillUnmount = function () {\n    this._treeMap.destroy();\n\n    this._wrapper.destroy();\n  };\n\n  IgrTreemap.prototype.componentDidMount = function () {\n    this._elRef.style.width = this._width ? this._width : \"\";\n    this._elRef.style.height = this._height ? this._height : \"\";\n\n    this._elRef.appendChild(this._container);\n\n    this._treeMap.notifySizeChanged();\n\n    this.initializeContent();\n  };\n\n  IgrTreemap.prototype.initializeContent = function () {\n    this._styling(this._container, this);\n\n    if (this.actualStyleMappings && this.actualStyleMappings.length > 0) {\n      var currStyleMapping = this.actualStyleMappings;\n\n      for (var i = 0; i < currStyleMapping.length; i++) {\n        currStyleMapping[i]._styling(this._container, this, this);\n      }\n    }\n\n    this._updateContentChildren();\n\n    this.updateStyle();\n    this.i.notifySizeChanged();\n  };\n\n  IgrTreemap.prototype.createImplementation = function () {\n    return new Treemap();\n  };\n\n  Object.defineProperty(IgrTreemap.prototype, \"i\", {\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"valueMemberPath\", {\n    /**\n    * Gets or sets path to use to get the values from the items.\n    */\n    get: function () {\n      return this.i.gi;\n    },\n    set: function (v) {\n      this.i.gi = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"rootTitle\", {\n    /**\n     * Gets or sets the root title to use for breadcrumbs.\n    */\n    get: function () {\n      return this.i.f8;\n    },\n    set: function (v) {\n      this.i.f8 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"breadcrumbSequence\", {\n    /**\n     * Gets or sets the root title to use for breadcrumbs.\n    */\n    get: function () {\n      return this.i.ed;\n    },\n    set: function (v) {\n      this.i.ed = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"parentIdMemberPath\", {\n    /**\n     * Gets or sets the path to use to get the Parent of the items.\n    */\n    get: function () {\n      return this.i.fw;\n    },\n    set: function (v) {\n      this.i.fw = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"labelMemberPath\", {\n    /**\n     * Gets or sets the path to use to get the Label of the items.\n    */\n    get: function () {\n      return this.i.ff;\n    },\n    set: function (v) {\n      this.i.ff = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"customValueMemberPath\", {\n    /**\n     * Gets or sets the path to use to get the custom value of the items.\n    */\n    get: function () {\n      return this.i.eg;\n    },\n    set: function (v) {\n      this.i.eg = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"idMemberPath\", {\n    /**\n     * Gets or sets the path to use to get the id of the items.\n    */\n    get: function () {\n      return this.i.e5;\n    },\n    set: function (v) {\n      this.i.e5 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"dataSource\", {\n    /**\n     * Gets or sets the (possibly hierarchical) data to assign to the TreeMap.\n    */\n    get: function () {\n      return this.i.dataSource;\n    },\n    set: function (v) {\n      this.i.dataSource = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"fillBrushes\", {\n    /**\n     * Gets or sets brushes to use for the fill scale.\n    */\n    get: function () {\n      return fromBrushCollection(this.i.b);\n    },\n    set: function (v) {\n      this.i.b = toBrushCollection(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"fillScaleMode\", {\n    /**\n     * Gets or sets mode to use for the fill scale.\n    */\n    get: function () {\n      return this.i.d;\n    },\n    set: function (v) {\n      this.i.d = ensureEnum(TreemapFillScaleMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"isFillScaleLogarithmic\", {\n    /**\n     * Gets or sets whether the fill scale is logarithmic.\n    */\n    get: function () {\n      return this.i.bg;\n    },\n    set: function (v) {\n      this.i.bg = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"fillScaleLogarithmBase\", {\n    /**\n     * Gets or sets the logarithm base to use if the fill scale is logarithmic.\n    */\n    get: function () {\n      return this.i.dy;\n    },\n    set: function (v) {\n      this.i.dy = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"fillScaleMinimumValue\", {\n    /**\n     * Gets or sets the minimum value to use for the fill scale.\n    */\n    get: function () {\n      return this.i.ct;\n    },\n    set: function (v) {\n      this.i.ct = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"fillScaleMaximumValue\", {\n    /**\n     * Gets or sets the maximum value to use for the fill scale.\n    */\n    get: function () {\n      return this.i.cs;\n    },\n    set: function (v) {\n      this.i.cs = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"labelVerticalFitMode\", {\n    /**\n     * Gets or sets the vertical fit mode to use for the node labels.\n    */\n    get: function () {\n      return this.i.p;\n    },\n    set: function (v) {\n      this.i.p = ensureEnum(TreemapLabelVerticalFitMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"labelHorizontalFitMode\", {\n    /**\n     * Gets or sets the horizontal fit mode to use for the node labels.\n    */\n    get: function () {\n      return this.i.m;\n    },\n    set: function (v) {\n      this.i.m = ensureEnum(TreemapLabelHorizontalFitMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderHoverBackground\", {\n    /**\n     * Gets or sets the background to use for the overlay header when it is hovered.\n    */\n    get: function () {\n      return brushToString(this.i.h9);\n    },\n    set: function (v) {\n      this.i.h9 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerHoverBackground\", {\n    /**\n     * Gets or sets the background to use for the header when it is hovered.\n    */\n    get: function () {\n      return brushToString(this.i.h3);\n    },\n    set: function (v) {\n      this.i.h3 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerBackground\", {\n    /**\n     * Gets or sets the background to use for the header.\n    */\n    get: function () {\n      return brushToString(this.i.h1);\n    },\n    set: function (v) {\n      this.i.h1 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderBackground\", {\n    /**\n     * Gets or sets the background to use for the overlay header.\n    */\n    get: function () {\n      return brushToString(this.i.h8);\n    },\n    set: function (v) {\n      this.i.h8 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerTextColor\", {\n    /**\n     * Gets or sets the text color to use for the header.\n    */\n    get: function () {\n      return brushToString(this.i.h6);\n    },\n    set: function (v) {\n      this.i.h6 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerDarkTextColor\", {\n    /**\n     * Gets or sets the dark text color to use for the header.\n    */\n    get: function () {\n      return brushToString(this.i.h2);\n    },\n    set: function (v) {\n      this.i.h2 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"textColor\", {\n    /**\n     * Gets or sets the text color to use for the nodes.\n    */\n    get: function () {\n      return brushToString(this.i.ik);\n    },\n    set: function (v) {\n      this.i.ik = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"darkTextColor\", {\n    /**\n     * Gets or sets the dark text color to use for the nodes.\n    */\n    get: function () {\n      return brushToString(this.i.h0);\n    },\n    set: function (v) {\n      this.i.h0 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerHoverTextColor\", {\n    /**\n     * Gets or sets the text color to use for the header.\n    */\n    get: function () {\n      return brushToString(this.i.h5);\n    },\n    set: function (v) {\n      this.i.h5 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerHoverDarkTextColor\", {\n    /**\n     * Gets or sets the dark text color to use for the header when hovered.\n    */\n    get: function () {\n      return brushToString(this.i.h4);\n    },\n    set: function (v) {\n      this.i.h4 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"textStyle\", {\n    /**\n     * Gets or sets the font to use for content nodes\n    */\n    get: function () {\n      if (this.i.aw == null) {\n        return null;\n      }\n\n      return this.i.aw.fontString;\n    },\n    set: function (v) {\n      var fi = new FontInfo();\n      fi.fontString = v;\n      this.i.aw = fi;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerTextStyle\", {\n    /**\n     * Gets or sets the font to use for header nodes\n    */\n    get: function () {\n      if (this.i.au == null) {\n        return null;\n      }\n\n      return this.i.au.fontString;\n    },\n    set: function (v) {\n      var fi = new FontInfo();\n      fi.fontString = v;\n      this.i.au = fi;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerDisplayMode\", {\n    /**\n     * Gets or sets the font to use for header nodes\n    */\n    get: function () {\n      return this.i.j;\n    },\n    set: function (v) {\n      this.i.j = ensureEnum(TreemapHeaderDisplayMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerLabelLeftMargin\", {\n    /**\n     * Gets or sets the left margin to use for the header.\n    */\n    get: function () {\n      return this.i.cx;\n    },\n    set: function (v) {\n      this.i.cx = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerLabelTopMargin\", {\n    /**\n     * Gets or sets the top margin to use for the header.\n    */\n    get: function () {\n      return this.i.cz;\n    },\n    set: function (v) {\n      this.i.cz = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerLabelRightMargin\", {\n    /**\n     * Gets or sets the right margin to use for the header.\n    */\n    get: function () {\n      return this.i.cy;\n    },\n    set: function (v) {\n      this.i.cy = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerLabelBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin to use for the header.\n    */\n    get: function () {\n      return this.i.cw;\n    },\n    set: function (v) {\n      this.i.cw = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderLabelLeftMargin\", {\n    /**\n     * Gets or sets the left margin to use for the overlay header.\n    */\n    get: function () {\n      return this.i.c7;\n    },\n    set: function (v) {\n      this.i.c7 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderLabelTopMargin\", {\n    /**\n     * Gets or sets the top margin to use for the overlay header.\n    */\n    get: function () {\n      return this.i.c9;\n    },\n    set: function (v) {\n      this.i.c9 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderLabelRightMargin\", {\n    /**\n     * Gets or sets the right margin to use for the overlay header.\n    */\n    get: function () {\n      return this.i.c8;\n    },\n    set: function (v) {\n      this.i.c8 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderLabelBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin to use for the overlay header.\n    */\n    get: function () {\n      return this.i.c6;\n    },\n    set: function (v) {\n      this.i.c6 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"labelLeftMargin\", {\n    /**\n     * Gets or sets the left margin to use for the labels.\n    */\n    get: function () {\n      return this.i.c2;\n    },\n    set: function (v) {\n      this.i.c2 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"labelTopMargin\", {\n    /**\n     * Gets or sets the top margin to use for the labels.\n    */\n    get: function () {\n      return this.i.c4;\n    },\n    set: function (v) {\n      this.i.c4 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"labelRightMargin\", {\n    /**\n     * Gets or sets the right margin to use for the labels.\n    */\n    get: function () {\n      return this.i.c3;\n    },\n    set: function (v) {\n      this.i.c3 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"labelBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin to use for the labels.\n    */\n    get: function () {\n      return this.i.c1;\n    },\n    set: function (v) {\n      this.i.c1 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"parentNodeLeftMargin\", {\n    /**\n     * Gets or sets the left margin to use for the parent nodes.\n    */\n    get: function () {\n      return this.i.dc;\n    },\n    set: function (v) {\n      this.i.dc = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"parentNodeTopMargin\", {\n    /**\n     * Gets or sets the top margin to use for the parent nodes.\n    */\n    get: function () {\n      return this.i.dg;\n    },\n    set: function (v) {\n      this.i.dg = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"parentNodeRightMargin\", {\n    /**\n     * Gets or sets the right margin to use for the parent nodes.\n    */\n    get: function () {\n      return this.i.de;\n    },\n    set: function (v) {\n      this.i.de = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"parentNodeBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin to use for the parent nodes.\n    */\n    get: function () {\n      return this.i.da;\n    },\n    set: function (v) {\n      this.i.da = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"parentNodeLeftPadding\", {\n    /**\n     * Gets or sets the left padding to use for the parent nodes.\n    */\n    get: function () {\n      return this.i.dd;\n    },\n    set: function (v) {\n      this.i.dd = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"parentNodeTopPadding\", {\n    /**\n     * Gets or sets the top padding to use for the parent nodes.\n    */\n    get: function () {\n      return this.i.dh;\n    },\n    set: function (v) {\n      this.i.dh = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"parentNodeRightPadding\", {\n    /**\n     * Gets or sets the right padding to use for the parent nodes.\n    */\n    get: function () {\n      return this.i.df;\n    },\n    set: function (v) {\n      this.i.df = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"parentNodeBottomPadding\", {\n    /**\n     * Gets or sets the bottom padding to use for the parent nodes.\n    */\n    get: function () {\n      return this.i.db;\n    },\n    set: function (v) {\n      this.i.db = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"labelHorizontalAlignment\", {\n    /**\n     * Gets or sets the horizontal alignment to use for the node labels.\n    */\n    get: function () {\n      return this.i.hn;\n    },\n    set: function (v) {\n      this.i.hn = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"labelVerticalAlignment\", {\n    /**\n     * Gets or sets the vertical alignment to use for the node labels.\n    */\n    get: function () {\n      return this.i.ir;\n    },\n    set: function (v) {\n      this.i.ir = ensureEnum(VerticalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"headerHeight\", {\n    /**\n     * Gets or sets the height to use for the header.\n    */\n    get: function () {\n      return this.i.cv;\n    },\n    set: function (v) {\n      this.i.cv = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"outline\", {\n    /**\n     * Gets or sets the outline to use for the nodes.\n    */\n    get: function () {\n      return brushToString(this.i.h7);\n    },\n    set: function (v) {\n      this.i.h7 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"strokeThickness\", {\n    /**\n     * Gets or sets the stroke thickness to use for the node outline.\n    */\n    get: function () {\n      return this.i.dt;\n    },\n    set: function (v) {\n      this.i.dt = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"layoutOrientation\", {\n    /**\n     * Gets or sets the orientation to use for the stripped and slice and dice layout types.\n    */\n    get: function () {\n      return this.i.ai;\n    },\n    set: function (v) {\n      this.i.ai = ensureEnum(TreemapOrientation_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"layoutType\", {\n    /**\n     * Gets or sets the type of layout to use for the nodes.\n    */\n    get: function () {\n      return this.i.s;\n    },\n    set: function (v) {\n      this.i.s = ensureEnum(TreemapLayoutType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"minimumDisplaySize\", {\n    /**\n     * Gets or sets the minimum size (width or height) to display a node.\n    */\n    get: function () {\n      return this.i.c5;\n    },\n    set: function (v) {\n      this.i.c5 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"transitionDuration\", {\n    /**\n     * Gets or sets the number of milliseconds over which changes to the gauge should be animated.\n    */\n    get: function () {\n      return this.i.d1;\n    },\n    set: function (v) {\n      this.i.d1 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"pixelScalingRatio\", {\n    /**\n     * Gets or sets the scaling value used to affect the pixel density of the control.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.di;\n    },\n    set: function (v) {\n      this.i.di = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"actualPixelScalingRatio\", {\n    get: function () {\n      return this.i.cp;\n    },\n    set: function (v) {\n      this.i.cp = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"interactionPixelScalingRatio\", {\n    /**\n     * Gets or sets the scaling value used to affect the pixel density of the control while it is animating.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.c0;\n    },\n    set: function (v) {\n      this.i.c0 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"actualInteractionPixelScalingRatio\", {\n    /**\n     * Gets or sets the resolved scaling value used to affect the pixel density of the control while it is animating.\n     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n     * to appear blurry.\n    */\n    get: function () {\n      return this.i.co;\n    },\n    set: function (v) {\n      this.i.co = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"animating\", {\n    get: function () {\n      return this.i.bc;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"focusItem\", {\n    /**\n     * Gets or sets the item to drill to in the treemap.\n    */\n    get: function () {\n      return this.i.d3;\n    },\n    set: function (v) {\n      this.i.d3 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrTreemap.prototype.findByName = function (name) {\n    if (this.styleMappings != null && this.styleMappings.findByName && this.styleMappings.findByName(name)) {\n      return this.styleMappings.findByName(name);\n    }\n\n    return null;\n  };\n\n  Object.defineProperty(IgrTreemap.prototype, \"hasUserValues\", {\n    get: function () {\n      return this._hasUserValues;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrTreemap.prototype.__m = function (propertyName) {\n    if (!this._inStyling) {\n      this._hasUserValues.add(propertyName);\n    }\n  };\n\n  IgrTreemap.prototype._styling = function (container, component, parent) {\n    if (this._inStyling) {\n      return;\n    }\n\n    this._inStyling = true;\n    this._stylingContainer = container;\n    this._stylingParent = component;\n    var genericPrefix = \"\";\n    var typeName = this.i.$type.name;\n\n    if (typeName.indexOf(\"Xam\") === 0) {\n      typeName = typeName.substring(3);\n    }\n\n    genericPrefix = toSpinal(\"Treemap\");\n    var additionalPrefixes = [];\n    var prefix = toSpinal(typeName);\n    additionalPrefixes.push(prefix + \"-\");\n    var b = this.i.$type.baseType;\n\n    while (b && b.name != \"Object\" && b.name != \"Base\" && b.name != \"Control\" && b.Name != \"DependencyObject\" && b.Name != \"FrameworkElement\") {\n      typeName = b.name;\n\n      if (typeName.indexOf(\"Xam\") === 0) {\n        typeName = typeName.substring(3);\n      }\n\n      var basePrefix = toSpinal(typeName);\n      additionalPrefixes.push(basePrefix + \"-\");\n      b = b.baseType;\n    }\n\n    if (parent) {\n      var parentTypeName = parent.i.$type.name;\n\n      if (parentTypeName.indexOf(\"Xam\") === 0) {\n        parentTypeName = parentTypeName.substring(3);\n      }\n\n      var parentPrefix = toSpinal(parentTypeName);\n      additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n      additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n    }\n\n    initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n\n    if (this._otherStyling) {\n      this._otherStyling(container, component, parent);\n    }\n\n    this._inStyling = false;\n  };\n\n  IgrTreemap.prototype.notifySizeChanged = function () {\n    this.i.notifySizeChanged();\n  };\n  /**\n   * Returns visuals as a serialized string.\n  \r\n  */\n\n\n  IgrTreemap.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.ej();\n    return iv;\n  };\n\n  IgrTreemap.prototype.markDirty = function () {\n    this.i.gt();\n  };\n\n  IgrTreemap.prototype.onDetachedFromUI = function () {\n    this.i.onDetachedFromUI();\n  };\n\n  IgrTreemap.prototype.onAttachedToUI = function () {\n    this.i.onAttachedToUI();\n  };\n\n  IgrTreemap.prototype.flush = function () {\n    this.i.gr();\n  };\n\n  IgrTreemap.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n    this.i.gx(source_, index, oldItem, newItem);\n  };\n  /**\n   * Manually notifies the treemap's data source that the data it has bound to has been cleared and needs to be re-examined.\n   * This should not be called if the data that the pie chart is bound to is already observable.\n  \r\n  * @param source_  * The data source.\n  */\n\n\n  IgrTreemap.prototype.notifyClearItems = function (source_) {\n    this.i.gu(source_);\n  };\n\n  IgrTreemap.prototype.notifyInsertItem = function (source_, index, newItem) {\n    this.i.gv(source_, index, newItem);\n  };\n\n  IgrTreemap.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n    this.i.gw(source_, index, oldItem);\n  };\n\n  IgrTreemap.prototype.simulateHover = function (point) {\n    this.i.hg(toPoint(point));\n  };\n\n  Object.defineProperty(IgrTreemap.prototype, \"nodeStyling\", {\n    /**\n     * Fired when a node is being styled. Provides an opportunity to customize node styling.\n    */\n    get: function () {\n      return this._nodeStyling;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodeStyling_wrapped !== null) {\n        this.i.nodeStyling = delegateRemove(this.i.nodeStyling, this._nodeStyling_wrapped);\n        this._nodeStyling_wrapped = null;\n        this._nodeStyling = null;\n      }\n\n      this._nodeStyling = ev;\n\n      this._nodeStyling_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodeStylingEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodeStyling) {\n          _this.beforeNodeStyling(_this, outerArgs);\n        }\n\n        if (_this._nodeStyling) {\n          _this._nodeStyling(_this, outerArgs);\n        }\n      };\n\n      this.i.nodeStyling = delegateCombine(this.i.nodeStyling, this._nodeStyling_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"nodePointerOver\", {\n    /**\n     * Fired with the pointer is moving over a node.\n    */\n    get: function () {\n      return this._nodePointerOver;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodePointerOver_wrapped !== null) {\n        this.i.nodePointerOver = delegateRemove(this.i.nodePointerOver, this._nodePointerOver_wrapped);\n        this._nodePointerOver_wrapped = null;\n        this._nodePointerOver = null;\n      }\n\n      this._nodePointerOver = ev;\n\n      this._nodePointerOver_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodePointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodePointerOver) {\n          _this.beforeNodePointerOver(_this, outerArgs);\n        }\n\n        if (_this._nodePointerOver) {\n          _this._nodePointerOver(_this, outerArgs);\n        }\n      };\n\n      this.i.nodePointerOver = delegateCombine(this.i.nodePointerOver, this._nodePointerOver_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"nodePointerEnter\", {\n    /**\n     * Fired when the pointer enters a node.\n    */\n    get: function () {\n      return this._nodePointerEnter;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodePointerEnter_wrapped !== null) {\n        this.i.nodePointerEnter = delegateRemove(this.i.nodePointerEnter, this._nodePointerEnter_wrapped);\n        this._nodePointerEnter_wrapped = null;\n        this._nodePointerEnter = null;\n      }\n\n      this._nodePointerEnter = ev;\n\n      this._nodePointerEnter_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodePointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodePointerEnter) {\n          _this.beforeNodePointerEnter(_this, outerArgs);\n        }\n\n        if (_this._nodePointerEnter) {\n          _this._nodePointerEnter(_this, outerArgs);\n        }\n      };\n\n      this.i.nodePointerEnter = delegateCombine(this.i.nodePointerEnter, this._nodePointerEnter_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"nodePointerLeave\", {\n    /**\n     * Fired when the pointer leaved a node.\n    */\n    get: function () {\n      return this._nodePointerLeave;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodePointerLeave_wrapped !== null) {\n        this.i.nodePointerLeave = delegateRemove(this.i.nodePointerLeave, this._nodePointerLeave_wrapped);\n        this._nodePointerLeave_wrapped = null;\n        this._nodePointerLeave = null;\n      }\n\n      this._nodePointerLeave = ev;\n\n      this._nodePointerLeave_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodePointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodePointerLeave) {\n          _this.beforeNodePointerLeave(_this, outerArgs);\n        }\n\n        if (_this._nodePointerLeave) {\n          _this._nodePointerLeave(_this, outerArgs);\n        }\n      };\n\n      this.i.nodePointerLeave = delegateCombine(this.i.nodePointerLeave, this._nodePointerLeave_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"nodePointerPressed\", {\n    /**\n     * Fired when the pointer is pressed on a node.\n    */\n    get: function () {\n      return this._nodePointerPressed;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodePointerPressed_wrapped !== null) {\n        this.i.nodePointerPressed = delegateRemove(this.i.nodePointerPressed, this._nodePointerPressed_wrapped);\n        this._nodePointerPressed_wrapped = null;\n        this._nodePointerPressed = null;\n      }\n\n      this._nodePointerPressed = ev;\n\n      this._nodePointerPressed_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodePointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodePointerPressed) {\n          _this.beforeNodePointerPressed(_this, outerArgs);\n        }\n\n        if (_this._nodePointerPressed) {\n          _this._nodePointerPressed(_this, outerArgs);\n        }\n      };\n\n      this.i.nodePointerPressed = delegateCombine(this.i.nodePointerPressed, this._nodePointerPressed_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrTreemap.prototype, \"nodePointerReleased\", {\n    /**\n     * Fired when the pointer is released on a node.\n    */\n    get: function () {\n      return this._nodePointerReleased;\n    },\n    set: function (ev) {\n      var _this = this;\n\n      if (this._nodePointerReleased_wrapped !== null) {\n        this.i.nodePointerReleased = delegateRemove(this.i.nodePointerReleased, this._nodePointerReleased_wrapped);\n        this._nodePointerReleased_wrapped = null;\n        this._nodePointerReleased = null;\n      }\n\n      this._nodePointerReleased = ev;\n\n      this._nodePointerReleased_wrapped = function (o, e) {\n        var outerArgs = new IgrTreemapNodePointerEventArgs();\n\n        outerArgs._provideImplementation(e);\n\n        if (_this.beforeNodePointerReleased) {\n          _this.beforeNodePointerReleased(_this, outerArgs);\n        }\n\n        if (_this._nodePointerReleased) {\n          _this._nodePointerReleased(_this, outerArgs);\n        }\n      };\n\n      this.i.nodePointerReleased = delegateCombine(this.i.nodePointerReleased, this._nodePointerReleased_wrapped);\n      ;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrTreemap;\n}(React.Component);\n\nexport { IgrTreemap };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-treemap.js"],"names":["__extends","__values","React","Treemap","toPoint","ensureEnum","brushToString","stringToBrush","ensureBool","initializePropertiesFromCss","NamePatcher","isValidProp","toSpinal","getModifiedProps","fromBrushCollection","toBrushCollection","FontInfo","ReactRenderer","delegateCombine","delegateRemove","DataChartStylingDefaults","TreemapNodeStyleMapping","IgrTreemapNodeStyleMappingCollection","ContentChildrenManager","CollectionAdapter","NotifyCollectionChangedAction","TreemapFillScaleMode_$type","IgrTreemapNodeStylingEventArgs","TreemapOrientation_$type","TreemapLayoutType_$type","IgrTreemapNodePointerEventArgs","TreemapHeaderDisplayMode_$type","HorizontalAlignment_$type","VerticalAlignment_$type","TreemapLabelHorizontalFitMode_$type","TreemapLabelVerticalFitMode_$type","IgrTreemap","_super","props","_this","call","_wrapper","contentStyleMappings","actualStyleMappings","_styleMappings","_styleMappingsAdapter","_implementation","__p","_hasUserValues","Set","_stylingContainer","_stylingParent","_inStyling","_nodeStyling","_nodeStyling_wrapped","_nodePointerOver","_nodePointerOver_wrapped","_nodePointerEnter","_nodePointerEnter_wrapped","_nodePointerLeave","_nodePointerLeave_wrapped","_nodePointerPressed","_nodePointerPressed_wrapped","_nodePointerReleased","_nodePointerReleased_wrapped","_styling","ensureStylablePatched","Object","getPrototypeOf","_getMainRef","bind","_contentChildrenManager","ch","key","name","_updateContentChildren","createImplementation","document","_container","createElement","style","display","width","height","root","ren","treemap","i","_treeMap","styleMappings","c","parentElement","provideContainer","notifySizeChanged","initializeProperties","addSizeWatcher","defineProperty","prototype","get","_height","set","value","_elRef","enumerable","configurable","_width","ref","length","contentChildrenActual","$type","isAssignableFrom","push","notifyContentChanged","coll","inner","_innerColl","addListener","sender","e","action","Add","insertManualItem","newStartingIndex","newItems","item","Remove","removeManualItemAt","oldStartingIndex","Replace","Reset","clearManualItems","render","children","getChildren","div","className","shouldComponentUpdate","nextProps","nextState","e_1","_a","mod","_b","keys","_c","next","done","p","e_1_1","error","return","e_2","e_2_1","updateStyle","componentWillUnmount","destroy","componentDidMount","appendChild","initializeContent","currStyleMapping","gi","v","f8","ed","fw","ff","eg","e5","dataSource","b","d","bg","dy","ct","cs","m","h9","h3","h1","h8","h6","h2","ik","h0","h5","h4","aw","fontString","fi","au","j","cx","cz","cy","cw","c7","c9","c8","c6","c2","c4","c3","c1","dc","dg","de","da","dd","dh","df","db","hn","ir","cv","h7","dt","ai","s","c5","d1","di","cp","c0","co","bc","d3","findByName","__m","propertyName","add","container","component","parent","genericPrefix","typeName","indexOf","substring","additionalPrefixes","prefix","baseType","Name","basePrefix","parentTypeName","parentPrefix","hasUserValues","_otherStyling","exportSerializedVisualData","iv","ej","markDirty","gt","onDetachedFromUI","onAttachedToUI","flush","gr","notifySetItem","source_","index","oldItem","newItem","gx","notifyClearItems","gu","notifyInsertItem","gv","notifyRemoveItem","gw","simulateHover","point","hg","ev","nodeStyling","o","outerArgs","_provideImplementation","beforeNodeStyling","nodePointerOver","beforeNodePointerOver","nodePointerEnter","beforeNodePointerEnter","nodePointerLeave","beforeNodePointerLeave","nodePointerPressed","beforeNodePointerPressed","nodePointerReleased","beforeNodePointerReleased","Component"],"mappings":"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","sourcesContent":["import { __extends, __values } from \"tslib\";\nimport * as React from 'react';\nimport { Treemap } from \"./Treemap\";\nimport { toPoint, ensureEnum, brushToString, stringToBrush, ensureBool, initializePropertiesFromCss, NamePatcher, isValidProp, toSpinal, getModifiedProps, fromBrushCollection, toBrushCollection } from \"igniteui-react-core\";\nimport { FontInfo } from \"igniteui-react-core\";\nimport { ReactRenderer } from \"igniteui-react-core\";\nimport { delegateCombine, delegateRemove } from \"igniteui-react-core\";\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { TreemapNodeStyleMapping } from './TreemapNodeStyleMapping';\nimport { IgrTreemapNodeStyleMappingCollection } from './igr-treemap-node-style-mapping-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { CollectionAdapter } from \"igniteui-react-core\";\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { TreemapFillScaleMode_$type } from \"./TreemapFillScaleMode\";\nimport { IgrTreemapNodeStylingEventArgs } from \"./igr-treemap-node-styling-event-args\";\nimport { TreemapOrientation_$type } from './TreemapOrientation';\nimport { TreemapLayoutType_$type } from './TreemapLayoutType';\nimport { IgrTreemapNodePointerEventArgs } from './igr-treemap-node-pointer-event-args';\nimport { TreemapHeaderDisplayMode_$type } from './TreemapHeaderDisplayMode';\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { VerticalAlignment_$type } from \"igniteui-react-core\";\nimport { TreemapLabelHorizontalFitMode_$type } from './TreemapLabelHorizontalFitMode';\nimport { TreemapLabelVerticalFitMode_$type } from './TreemapLabelVerticalFitMode';\nvar IgrTreemap = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrTreemap, _super);\n    function IgrTreemap(props) {\n        var _this = _super.call(this, props) || this;\n        _this._wrapper = null;\n        _this.contentStyleMappings = [];\n        /**\n        * The style mappings actually present in the treemap. Do not directly modify this array.\n        * This array's contents can be modified by causing React to reproject the child content.\n        * Or adding and removing ranges from the manual ranges collection on the ranges property.\n        */\n        _this.actualStyleMappings = [];\n        _this._styleMappings = null;\n        _this._styleMappingsAdapter = null;\n        _this._implementation = null;\n        _this.__p = null;\n        _this._hasUserValues = new Set();\n        _this._stylingContainer = null;\n        _this._stylingParent = null;\n        _this._inStyling = false;\n        _this._nodeStyling = null;\n        _this._nodeStyling_wrapped = null;\n        _this._nodePointerOver = null;\n        _this._nodePointerOver_wrapped = null;\n        _this._nodePointerEnter = null;\n        _this._nodePointerEnter_wrapped = null;\n        _this._nodePointerLeave = null;\n        _this._nodePointerLeave_wrapped = null;\n        _this._nodePointerPressed = null;\n        _this._nodePointerPressed_wrapped = null;\n        _this._nodePointerReleased = null;\n        _this._nodePointerReleased_wrapped = null;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._getMainRef = _this._getMainRef.bind(_this);\n        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.key || ch.props.name; }, function (ch) { return ch.key || ch.props.name; }, function () { return _this._updateContentChildren(); });\n        _this._implementation = _this.createImplementation();\n        if (document) {\n            _this._container = document.createElement(\"div\");\n            _this._container.style.display = \"block\";\n            _this._container.style.width = \"100%\";\n            _this._container.style.height = \"100%\";\n        }\n        var root;\n        root = _this._container;\n        if (_this._container != null) {\n            root = _this._container;\n        }\n        var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n        _this._wrapper = ren;\n        var treemap = _this.i;\n        _this._treeMap = treemap;\n        _this._styleMappingsAdapter = new CollectionAdapter(_this.contentStyleMappings, _this.i.styleMappings, _this.actualStyleMappings, function (c) { return c.i; }, function (i) {\n            if (_this._container && _this._container.parentElement) {\n                i._styling(_this._container, _this, _this);\n            }\n        }, function (i) { });\n        treemap.provideContainer(ren);\n        treemap.notifySizeChanged();\n        if (props) {\n            _this.initializeProperties();\n        }\n        ren.addSizeWatcher(function () {\n            _this._treeMap.notifySizeChanged();\n        });\n        return _this;\n    }\n    Object.defineProperty(IgrTreemap.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this._treeMap.notifySizeChanged();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this._treeMap.notifySizeChanged();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrTreemap.prototype._getMainRef = function (ref) {\n        this._elRef = ref;\n    };\n    IgrTreemap.prototype._updateContentChildren = function () {\n        this.contentStyleMappings.length = 0;\n        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n        for (var i = 0; i < contentChildrenActual.length; i++) {\n            if ((TreemapNodeStyleMapping.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {\n                this.contentStyleMappings.push(contentChildrenActual[i]);\n            }\n        }\n        if (this._styleMappingsAdapter !== null) {\n            this._styleMappingsAdapter.notifyContentChanged();\n        }\n    };\n    Object.defineProperty(IgrTreemap.prototype, \"styleMappings\", {\n        /**\n         * A collection of manually added style mappings for the treemap.\n        */\n        get: function () {\n            var _this = this;\n            if (this._styleMappings === null) {\n                var coll = new IgrTreemapNodeStyleMappingCollection();\n                var inner = coll._innerColl;\n                inner.addListener(function (sender, e) {\n                    switch (e.action) {\n                        case NotifyCollectionChangedAction.Add:\n                            _this._styleMappingsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Remove:\n                            _this._styleMappingsAdapter.removeManualItemAt(e.oldStartingIndex);\n                            break;\n                        case NotifyCollectionChangedAction.Replace:\n                            _this._styleMappingsAdapter.removeManualItemAt(e.oldStartingIndex);\n                            _this._styleMappingsAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Reset:\n                            _this._styleMappingsAdapter.clearManualItems();\n                            break;\n                    }\n                });\n                this._styleMappings = coll;\n            }\n            return this._styleMappings;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrTreemap.prototype.render = function () {\n        var children = this._contentChildrenManager.getChildren(this.props.children);\n        var div = React.createElement(\"div\", {\n            className: \"ig-treemap igr-treemap\",\n            ref: this._getMainRef,\n            children: children\n        });\n        //}\n        return div;\n    };\n    IgrTreemap.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n        var e_1, _a;\n        var mod = getModifiedProps(this.props, nextProps);\n        try {\n            for (var _b = __values(Object.keys(mod)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = mod[p];\n                }\n            }\n        }\n        catch (e_1_1) {\n            e_1 = { error: e_1_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_1)\n                    throw e_1.error;\n            }\n        }\n        return true;\n    };\n    IgrTreemap.prototype.initializeProperties = function () {\n        var e_2, _a;\n        try {\n            for (var _b = __values(Object.keys(this.props)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var p = _c.value;\n                if (isValidProp(this, p)) {\n                    this[p] = this.props[p];\n                }\n            }\n        }\n        catch (e_2_1) {\n            e_2 = { error: e_2_1 };\n        }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return))\n                    _a.call(_b);\n            }\n            finally {\n                if (e_2)\n                    throw e_2.error;\n            }\n        }\n    };\n    // supports angular themes or custom properties set in CSS\n    IgrTreemap.prototype.updateStyle = function () {\n        this._styling(this._elRef, this);\n    };\n    IgrTreemap.prototype.componentWillUnmount = function () {\n        this._treeMap.destroy();\n        this._wrapper.destroy();\n    };\n    IgrTreemap.prototype.componentDidMount = function () {\n        this._elRef.style.width = this._width ? this._width : \"\";\n        this._elRef.style.height = this._height ? this._height : \"\";\n        this._elRef.appendChild(this._container);\n        this._treeMap.notifySizeChanged();\n        this.initializeContent();\n    };\n    IgrTreemap.prototype.initializeContent = function () {\n        this._styling(this._container, this);\n        if (this.actualStyleMappings && this.actualStyleMappings.length > 0) {\n            var currStyleMapping = this.actualStyleMappings;\n            for (var i = 0; i < currStyleMapping.length; i++) {\n                currStyleMapping[i]._styling(this._container, this, this);\n            }\n        }\n        this._updateContentChildren();\n        this.updateStyle();\n        this.i.notifySizeChanged();\n    };\n    IgrTreemap.prototype.createImplementation = function () {\n        return new Treemap();\n    };\n    Object.defineProperty(IgrTreemap.prototype, \"i\", {\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"valueMemberPath\", {\n        /**\n     * Gets or sets path to use to get the values from the items.\n    */\n        get: function () {\n            return this.i.gi;\n        },\n        set: function (v) {\n            this.i.gi = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"rootTitle\", {\n        /**\n         * Gets or sets the root title to use for breadcrumbs.\n        */\n        get: function () {\n            return this.i.f8;\n        },\n        set: function (v) {\n            this.i.f8 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"breadcrumbSequence\", {\n        /**\n         * Gets or sets the root title to use for breadcrumbs.\n        */\n        get: function () {\n            return this.i.ed;\n        },\n        set: function (v) {\n            this.i.ed = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"parentIdMemberPath\", {\n        /**\n         * Gets or sets the path to use to get the Parent of the items.\n        */\n        get: function () {\n            return this.i.fw;\n        },\n        set: function (v) {\n            this.i.fw = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"labelMemberPath\", {\n        /**\n         * Gets or sets the path to use to get the Label of the items.\n        */\n        get: function () {\n            return this.i.ff;\n        },\n        set: function (v) {\n            this.i.ff = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"customValueMemberPath\", {\n        /**\n         * Gets or sets the path to use to get the custom value of the items.\n        */\n        get: function () {\n            return this.i.eg;\n        },\n        set: function (v) {\n            this.i.eg = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"idMemberPath\", {\n        /**\n         * Gets or sets the path to use to get the id of the items.\n        */\n        get: function () {\n            return this.i.e5;\n        },\n        set: function (v) {\n            this.i.e5 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"dataSource\", {\n        /**\n         * Gets or sets the (possibly hierarchical) data to assign to the TreeMap.\n        */\n        get: function () {\n            return this.i.dataSource;\n        },\n        set: function (v) {\n            this.i.dataSource = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"fillBrushes\", {\n        /**\n         * Gets or sets brushes to use for the fill scale.\n        */\n        get: function () {\n            return fromBrushCollection(this.i.b);\n        },\n        set: function (v) {\n            this.i.b = toBrushCollection(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"fillScaleMode\", {\n        /**\n         * Gets or sets mode to use for the fill scale.\n        */\n        get: function () {\n            return this.i.d;\n        },\n        set: function (v) {\n            this.i.d = ensureEnum(TreemapFillScaleMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"isFillScaleLogarithmic\", {\n        /**\n         * Gets or sets whether the fill scale is logarithmic.\n        */\n        get: function () {\n            return this.i.bg;\n        },\n        set: function (v) {\n            this.i.bg = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"fillScaleLogarithmBase\", {\n        /**\n         * Gets or sets the logarithm base to use if the fill scale is logarithmic.\n        */\n        get: function () {\n            return this.i.dy;\n        },\n        set: function (v) {\n            this.i.dy = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"fillScaleMinimumValue\", {\n        /**\n         * Gets or sets the minimum value to use for the fill scale.\n        */\n        get: function () {\n            return this.i.ct;\n        },\n        set: function (v) {\n            this.i.ct = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"fillScaleMaximumValue\", {\n        /**\n         * Gets or sets the maximum value to use for the fill scale.\n        */\n        get: function () {\n            return this.i.cs;\n        },\n        set: function (v) {\n            this.i.cs = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"labelVerticalFitMode\", {\n        /**\n         * Gets or sets the vertical fit mode to use for the node labels.\n        */\n        get: function () {\n            return this.i.p;\n        },\n        set: function (v) {\n            this.i.p = ensureEnum(TreemapLabelVerticalFitMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"labelHorizontalFitMode\", {\n        /**\n         * Gets or sets the horizontal fit mode to use for the node labels.\n        */\n        get: function () {\n            return this.i.m;\n        },\n        set: function (v) {\n            this.i.m = ensureEnum(TreemapLabelHorizontalFitMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderHoverBackground\", {\n        /**\n         * Gets or sets the background to use for the overlay header when it is hovered.\n        */\n        get: function () {\n            return brushToString(this.i.h9);\n        },\n        set: function (v) {\n            this.i.h9 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerHoverBackground\", {\n        /**\n         * Gets or sets the background to use for the header when it is hovered.\n        */\n        get: function () {\n            return brushToString(this.i.h3);\n        },\n        set: function (v) {\n            this.i.h3 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerBackground\", {\n        /**\n         * Gets or sets the background to use for the header.\n        */\n        get: function () {\n            return brushToString(this.i.h1);\n        },\n        set: function (v) {\n            this.i.h1 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderBackground\", {\n        /**\n         * Gets or sets the background to use for the overlay header.\n        */\n        get: function () {\n            return brushToString(this.i.h8);\n        },\n        set: function (v) {\n            this.i.h8 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerTextColor\", {\n        /**\n         * Gets or sets the text color to use for the header.\n        */\n        get: function () {\n            return brushToString(this.i.h6);\n        },\n        set: function (v) {\n            this.i.h6 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerDarkTextColor\", {\n        /**\n         * Gets or sets the dark text color to use for the header.\n        */\n        get: function () {\n            return brushToString(this.i.h2);\n        },\n        set: function (v) {\n            this.i.h2 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"textColor\", {\n        /**\n         * Gets or sets the text color to use for the nodes.\n        */\n        get: function () {\n            return brushToString(this.i.ik);\n        },\n        set: function (v) {\n            this.i.ik = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"darkTextColor\", {\n        /**\n         * Gets or sets the dark text color to use for the nodes.\n        */\n        get: function () {\n            return brushToString(this.i.h0);\n        },\n        set: function (v) {\n            this.i.h0 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerHoverTextColor\", {\n        /**\n         * Gets or sets the text color to use for the header.\n        */\n        get: function () {\n            return brushToString(this.i.h5);\n        },\n        set: function (v) {\n            this.i.h5 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerHoverDarkTextColor\", {\n        /**\n         * Gets or sets the dark text color to use for the header when hovered.\n        */\n        get: function () {\n            return brushToString(this.i.h4);\n        },\n        set: function (v) {\n            this.i.h4 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"textStyle\", {\n        /**\n         * Gets or sets the font to use for content nodes\n        */\n        get: function () {\n            if (this.i.aw == null) {\n                return null;\n            }\n            return this.i.aw.fontString;\n        },\n        set: function (v) {\n            var fi = new FontInfo();\n            fi.fontString = v;\n            this.i.aw = fi;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerTextStyle\", {\n        /**\n         * Gets or sets the font to use for header nodes\n        */\n        get: function () {\n            if (this.i.au == null) {\n                return null;\n            }\n            return this.i.au.fontString;\n        },\n        set: function (v) {\n            var fi = new FontInfo();\n            fi.fontString = v;\n            this.i.au = fi;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerDisplayMode\", {\n        /**\n         * Gets or sets the font to use for header nodes\n        */\n        get: function () {\n            return this.i.j;\n        },\n        set: function (v) {\n            this.i.j = ensureEnum(TreemapHeaderDisplayMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerLabelLeftMargin\", {\n        /**\n         * Gets or sets the left margin to use for the header.\n        */\n        get: function () {\n            return this.i.cx;\n        },\n        set: function (v) {\n            this.i.cx = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerLabelTopMargin\", {\n        /**\n         * Gets or sets the top margin to use for the header.\n        */\n        get: function () {\n            return this.i.cz;\n        },\n        set: function (v) {\n            this.i.cz = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerLabelRightMargin\", {\n        /**\n         * Gets or sets the right margin to use for the header.\n        */\n        get: function () {\n            return this.i.cy;\n        },\n        set: function (v) {\n            this.i.cy = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerLabelBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin to use for the header.\n        */\n        get: function () {\n            return this.i.cw;\n        },\n        set: function (v) {\n            this.i.cw = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderLabelLeftMargin\", {\n        /**\n         * Gets or sets the left margin to use for the overlay header.\n        */\n        get: function () {\n            return this.i.c7;\n        },\n        set: function (v) {\n            this.i.c7 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderLabelTopMargin\", {\n        /**\n         * Gets or sets the top margin to use for the overlay header.\n        */\n        get: function () {\n            return this.i.c9;\n        },\n        set: function (v) {\n            this.i.c9 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderLabelRightMargin\", {\n        /**\n         * Gets or sets the right margin to use for the overlay header.\n        */\n        get: function () {\n            return this.i.c8;\n        },\n        set: function (v) {\n            this.i.c8 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"overlayHeaderLabelBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin to use for the overlay header.\n        */\n        get: function () {\n            return this.i.c6;\n        },\n        set: function (v) {\n            this.i.c6 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"labelLeftMargin\", {\n        /**\n         * Gets or sets the left margin to use for the labels.\n        */\n        get: function () {\n            return this.i.c2;\n        },\n        set: function (v) {\n            this.i.c2 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"labelTopMargin\", {\n        /**\n         * Gets or sets the top margin to use for the labels.\n        */\n        get: function () {\n            return this.i.c4;\n        },\n        set: function (v) {\n            this.i.c4 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"labelRightMargin\", {\n        /**\n         * Gets or sets the right margin to use for the labels.\n        */\n        get: function () {\n            return this.i.c3;\n        },\n        set: function (v) {\n            this.i.c3 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"labelBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin to use for the labels.\n        */\n        get: function () {\n            return this.i.c1;\n        },\n        set: function (v) {\n            this.i.c1 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"parentNodeLeftMargin\", {\n        /**\n         * Gets or sets the left margin to use for the parent nodes.\n        */\n        get: function () {\n            return this.i.dc;\n        },\n        set: function (v) {\n            this.i.dc = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"parentNodeTopMargin\", {\n        /**\n         * Gets or sets the top margin to use for the parent nodes.\n        */\n        get: function () {\n            return this.i.dg;\n        },\n        set: function (v) {\n            this.i.dg = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"parentNodeRightMargin\", {\n        /**\n         * Gets or sets the right margin to use for the parent nodes.\n        */\n        get: function () {\n            return this.i.de;\n        },\n        set: function (v) {\n            this.i.de = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"parentNodeBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin to use for the parent nodes.\n        */\n        get: function () {\n            return this.i.da;\n        },\n        set: function (v) {\n            this.i.da = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"parentNodeLeftPadding\", {\n        /**\n         * Gets or sets the left padding to use for the parent nodes.\n        */\n        get: function () {\n            return this.i.dd;\n        },\n        set: function (v) {\n            this.i.dd = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"parentNodeTopPadding\", {\n        /**\n         * Gets or sets the top padding to use for the parent nodes.\n        */\n        get: function () {\n            return this.i.dh;\n        },\n        set: function (v) {\n            this.i.dh = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"parentNodeRightPadding\", {\n        /**\n         * Gets or sets the right padding to use for the parent nodes.\n        */\n        get: function () {\n            return this.i.df;\n        },\n        set: function (v) {\n            this.i.df = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"parentNodeBottomPadding\", {\n        /**\n         * Gets or sets the bottom padding to use for the parent nodes.\n        */\n        get: function () {\n            return this.i.db;\n        },\n        set: function (v) {\n            this.i.db = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"labelHorizontalAlignment\", {\n        /**\n         * Gets or sets the horizontal alignment to use for the node labels.\n        */\n        get: function () {\n            return this.i.hn;\n        },\n        set: function (v) {\n            this.i.hn = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"labelVerticalAlignment\", {\n        /**\n         * Gets or sets the vertical alignment to use for the node labels.\n        */\n        get: function () {\n            return this.i.ir;\n        },\n        set: function (v) {\n            this.i.ir = ensureEnum(VerticalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"headerHeight\", {\n        /**\n         * Gets or sets the height to use for the header.\n        */\n        get: function () {\n            return this.i.cv;\n        },\n        set: function (v) {\n            this.i.cv = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"outline\", {\n        /**\n         * Gets or sets the outline to use for the nodes.\n        */\n        get: function () {\n            return brushToString(this.i.h7);\n        },\n        set: function (v) {\n            this.i.h7 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"strokeThickness\", {\n        /**\n         * Gets or sets the stroke thickness to use for the node outline.\n        */\n        get: function () {\n            return this.i.dt;\n        },\n        set: function (v) {\n            this.i.dt = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"layoutOrientation\", {\n        /**\n         * Gets or sets the orientation to use for the stripped and slice and dice layout types.\n        */\n        get: function () {\n            return this.i.ai;\n        },\n        set: function (v) {\n            this.i.ai = ensureEnum(TreemapOrientation_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"layoutType\", {\n        /**\n         * Gets or sets the type of layout to use for the nodes.\n        */\n        get: function () {\n            return this.i.s;\n        },\n        set: function (v) {\n            this.i.s = ensureEnum(TreemapLayoutType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"minimumDisplaySize\", {\n        /**\n         * Gets or sets the minimum size (width or height) to display a node.\n        */\n        get: function () {\n            return this.i.c5;\n        },\n        set: function (v) {\n            this.i.c5 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"transitionDuration\", {\n        /**\n         * Gets or sets the number of milliseconds over which changes to the gauge should be animated.\n        */\n        get: function () {\n            return this.i.d1;\n        },\n        set: function (v) {\n            this.i.d1 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"pixelScalingRatio\", {\n        /**\n         * Gets or sets the scaling value used to affect the pixel density of the control.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.di;\n        },\n        set: function (v) {\n            this.i.di = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"actualPixelScalingRatio\", {\n        get: function () {\n            return this.i.cp;\n        },\n        set: function (v) {\n            this.i.cp = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"interactionPixelScalingRatio\", {\n        /**\n         * Gets or sets the scaling value used to affect the pixel density of the control while it is animating.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.c0;\n        },\n        set: function (v) {\n            this.i.c0 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"actualInteractionPixelScalingRatio\", {\n        /**\n         * Gets or sets the resolved scaling value used to affect the pixel density of the control while it is animating.\n         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control\n         * to appear blurry.\n        */\n        get: function () {\n            return this.i.co;\n        },\n        set: function (v) {\n            this.i.co = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"animating\", {\n        get: function () {\n            return this.i.bc;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"focusItem\", {\n        /**\n         * Gets or sets the item to drill to in the treemap.\n        */\n        get: function () {\n            return this.i.d3;\n        },\n        set: function (v) {\n            this.i.d3 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrTreemap.prototype.findByName = function (name) {\n        if (this.styleMappings != null && this.styleMappings.findByName && this.styleMappings.findByName(name)) {\n            return this.styleMappings.findByName(name);\n        }\n        return null;\n    };\n    Object.defineProperty(IgrTreemap.prototype, \"hasUserValues\", {\n        get: function () {\n            return this._hasUserValues;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrTreemap.prototype.__m = function (propertyName) {\n        if (!this._inStyling) {\n            this._hasUserValues.add(propertyName);\n        }\n    };\n    IgrTreemap.prototype._styling = function (container, component, parent) {\n        if (this._inStyling) {\n            return;\n        }\n        this._inStyling = true;\n        this._stylingContainer = container;\n        this._stylingParent = component;\n        var genericPrefix = \"\";\n        var typeName = this.i.$type.name;\n        if (typeName.indexOf(\"Xam\") === 0) {\n            typeName = typeName.substring(3);\n        }\n        genericPrefix = toSpinal(\"Treemap\");\n        var additionalPrefixes = [];\n        var prefix = toSpinal(typeName);\n        additionalPrefixes.push(prefix + \"-\");\n        var b = this.i.$type.baseType;\n        while (b && b.name != \"Object\" &&\n            b.name != \"Base\" &&\n            b.name != \"Control\" &&\n            b.Name != \"DependencyObject\" &&\n            b.Name != \"FrameworkElement\") {\n            typeName = b.name;\n            if (typeName.indexOf(\"Xam\") === 0) {\n                typeName = typeName.substring(3);\n            }\n            var basePrefix = toSpinal(typeName);\n            additionalPrefixes.push(basePrefix + \"-\");\n            b = b.baseType;\n        }\n        if (parent) {\n            var parentTypeName = parent.i.$type.name;\n            if (parentTypeName.indexOf(\"Xam\") === 0) {\n                parentTypeName = parentTypeName.substring(3);\n            }\n            var parentPrefix = toSpinal(parentTypeName);\n            additionalPrefixes.push(parentPrefix + \"-\" + genericPrefix + \"-\");\n            additionalPrefixes.push(parentPrefix + \"-\" + prefix + \"-\");\n        }\n        initializePropertiesFromCss(container, this, genericPrefix + \"-\", this.hasUserValues, false, additionalPrefixes);\n        if (this._otherStyling) {\n            this._otherStyling(container, component, parent);\n        }\n        this._inStyling = false;\n    };\n    IgrTreemap.prototype.notifySizeChanged = function () {\n        this.i.notifySizeChanged();\n    };\n    /**\n     * Returns visuals as a serialized string.\n    \r\n    */\n    IgrTreemap.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.ej();\n        return (iv);\n    };\n    IgrTreemap.prototype.markDirty = function () {\n        this.i.gt();\n    };\n    IgrTreemap.prototype.onDetachedFromUI = function () {\n        this.i.onDetachedFromUI();\n    };\n    IgrTreemap.prototype.onAttachedToUI = function () {\n        this.i.onAttachedToUI();\n    };\n    IgrTreemap.prototype.flush = function () {\n        this.i.gr();\n    };\n    IgrTreemap.prototype.notifySetItem = function (source_, index, oldItem, newItem) {\n        this.i.gx(source_, index, oldItem, newItem);\n    };\n    /**\n     * Manually notifies the treemap's data source that the data it has bound to has been cleared and needs to be re-examined.\n     * This should not be called if the data that the pie chart is bound to is already observable.\n    \r\n    * @param source_  * The data source.\n    */\n    IgrTreemap.prototype.notifyClearItems = function (source_) {\n        this.i.gu(source_);\n    };\n    IgrTreemap.prototype.notifyInsertItem = function (source_, index, newItem) {\n        this.i.gv(source_, index, newItem);\n    };\n    IgrTreemap.prototype.notifyRemoveItem = function (source_, index, oldItem) {\n        this.i.gw(source_, index, oldItem);\n    };\n    IgrTreemap.prototype.simulateHover = function (point) {\n        this.i.hg(toPoint(point));\n    };\n    Object.defineProperty(IgrTreemap.prototype, \"nodeStyling\", {\n        /**\n         * Fired when a node is being styled. Provides an opportunity to customize node styling.\n        */\n        get: function () {\n            return this._nodeStyling;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodeStyling_wrapped !== null) {\n                this.i.nodeStyling = delegateRemove(this.i.nodeStyling, this._nodeStyling_wrapped);\n                this._nodeStyling_wrapped = null;\n                this._nodeStyling = null;\n            }\n            this._nodeStyling = ev;\n            this._nodeStyling_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodeStylingEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodeStyling) {\n                    _this.beforeNodeStyling(_this, outerArgs);\n                }\n                if (_this._nodeStyling) {\n                    _this._nodeStyling(_this, outerArgs);\n                }\n            };\n            this.i.nodeStyling = delegateCombine(this.i.nodeStyling, this._nodeStyling_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"nodePointerOver\", {\n        /**\n         * Fired with the pointer is moving over a node.\n        */\n        get: function () {\n            return this._nodePointerOver;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodePointerOver_wrapped !== null) {\n                this.i.nodePointerOver = delegateRemove(this.i.nodePointerOver, this._nodePointerOver_wrapped);\n                this._nodePointerOver_wrapped = null;\n                this._nodePointerOver = null;\n            }\n            this._nodePointerOver = ev;\n            this._nodePointerOver_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodePointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodePointerOver) {\n                    _this.beforeNodePointerOver(_this, outerArgs);\n                }\n                if (_this._nodePointerOver) {\n                    _this._nodePointerOver(_this, outerArgs);\n                }\n            };\n            this.i.nodePointerOver = delegateCombine(this.i.nodePointerOver, this._nodePointerOver_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"nodePointerEnter\", {\n        /**\n         * Fired when the pointer enters a node.\n        */\n        get: function () {\n            return this._nodePointerEnter;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodePointerEnter_wrapped !== null) {\n                this.i.nodePointerEnter = delegateRemove(this.i.nodePointerEnter, this._nodePointerEnter_wrapped);\n                this._nodePointerEnter_wrapped = null;\n                this._nodePointerEnter = null;\n            }\n            this._nodePointerEnter = ev;\n            this._nodePointerEnter_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodePointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodePointerEnter) {\n                    _this.beforeNodePointerEnter(_this, outerArgs);\n                }\n                if (_this._nodePointerEnter) {\n                    _this._nodePointerEnter(_this, outerArgs);\n                }\n            };\n            this.i.nodePointerEnter = delegateCombine(this.i.nodePointerEnter, this._nodePointerEnter_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"nodePointerLeave\", {\n        /**\n         * Fired when the pointer leaved a node.\n        */\n        get: function () {\n            return this._nodePointerLeave;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodePointerLeave_wrapped !== null) {\n                this.i.nodePointerLeave = delegateRemove(this.i.nodePointerLeave, this._nodePointerLeave_wrapped);\n                this._nodePointerLeave_wrapped = null;\n                this._nodePointerLeave = null;\n            }\n            this._nodePointerLeave = ev;\n            this._nodePointerLeave_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodePointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodePointerLeave) {\n                    _this.beforeNodePointerLeave(_this, outerArgs);\n                }\n                if (_this._nodePointerLeave) {\n                    _this._nodePointerLeave(_this, outerArgs);\n                }\n            };\n            this.i.nodePointerLeave = delegateCombine(this.i.nodePointerLeave, this._nodePointerLeave_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"nodePointerPressed\", {\n        /**\n         * Fired when the pointer is pressed on a node.\n        */\n        get: function () {\n            return this._nodePointerPressed;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodePointerPressed_wrapped !== null) {\n                this.i.nodePointerPressed = delegateRemove(this.i.nodePointerPressed, this._nodePointerPressed_wrapped);\n                this._nodePointerPressed_wrapped = null;\n                this._nodePointerPressed = null;\n            }\n            this._nodePointerPressed = ev;\n            this._nodePointerPressed_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodePointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodePointerPressed) {\n                    _this.beforeNodePointerPressed(_this, outerArgs);\n                }\n                if (_this._nodePointerPressed) {\n                    _this._nodePointerPressed(_this, outerArgs);\n                }\n            };\n            this.i.nodePointerPressed = delegateCombine(this.i.nodePointerPressed, this._nodePointerPressed_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrTreemap.prototype, \"nodePointerReleased\", {\n        /**\n         * Fired when the pointer is released on a node.\n        */\n        get: function () {\n            return this._nodePointerReleased;\n        },\n        set: function (ev) {\n            var _this = this;\n            if (this._nodePointerReleased_wrapped !== null) {\n                this.i.nodePointerReleased = delegateRemove(this.i.nodePointerReleased, this._nodePointerReleased_wrapped);\n                this._nodePointerReleased_wrapped = null;\n                this._nodePointerReleased = null;\n            }\n            this._nodePointerReleased = ev;\n            this._nodePointerReleased_wrapped = function (o, e) {\n                var outerArgs = new IgrTreemapNodePointerEventArgs();\n                outerArgs._provideImplementation(e);\n                if (_this.beforeNodePointerReleased) {\n                    _this.beforeNodePointerReleased(_this, outerArgs);\n                }\n                if (_this._nodePointerReleased) {\n                    _this._nodePointerReleased(_this, outerArgs);\n                }\n            };\n            this.i.nodePointerReleased = delegateCombine(this.i.nodePointerReleased, this._nodePointerReleased_wrapped);\n            ;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrTreemap;\n}(React.Component));\nexport { IgrTreemap };\n"]},"metadata":{},"sourceType":"module"}