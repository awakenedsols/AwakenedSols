{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { CategorySeriesMarkerCollisionAvoidance_$type } from \"./CategorySeriesMarkerCollisionAvoidance\";\nimport { ConsolidatedItemHitTestBehavior_$type } from \"./ConsolidatedItemHitTestBehavior\";\nimport { IgrCategorySeries } from \"./igr-category-series\";\nimport { ensureEnum, brushToString, stringToBrush, toPoint } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent anchored category/value series.\n*\n* The `IgrAnchoredCategorySeries` represents the base class for all IgxDataChartComponent anchored category/value series.\n*\n* ```ts\n* <IgrDataChart >\n*\n*\n*     <IgrCategoryXAxis name=\"xAxisYears\"\n*     interval={12} labelLocation=\"OutsideBottom\"\n*     label=\"Year\"  overlap={1} gap={0.4}  />\n*\n*     <IgrCategoryXAxis name=\"xAxisMonths\"\n*     interval={1}  labelLocation=\"OutsideBottom\"\n*     label=\"Month\" overlap={1} gap={0.4}/>\n*\n*     <IgrNumericYAxis  name=\"yAxisLeft\"\n*     title=\"Expanse | Revenue\"\n*     minimumValue={-900} labelLocation=\"OutsideLeft\"\n*     maximumValue={900}\n*     interval={300} />\n*\n*     <IgrNumericYAxis  name=\"yAxisRight\"\n*     title=\"Profit (%)\"\n*     minimumValue={0}  labelLocation=\"OutsideRight\"\n*     maximumValue={100} />\n*\n*\n*     <IgrLineSeries name=\"series1\"\n*     valueMemberPath=\"Revenue\"\n*     xAxisName=\"xAxisMonths\"\n*     yAxisName=\"yAxisLeft\" />\n*  </IgrDataChart>\n* ```\n*/\n\nvar IgrAnchoredCategorySeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrAnchoredCategorySeries, _super);\n\n  function IgrAnchoredCategorySeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"valueMemberPath\", {\n    /**\n     * Gets or sets the value mapping property for the current series object.\n    *\n    * The `valueMemberPath` property is used for the value mapping property of the current series object.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.t1;\n    },\n    set: function (v) {\n      this.i.t1 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"valueMemberAsLegendLabel\", {\n    /**\n     * Gets or sets the label displayed before series value in the Data Legend.\n    */\n    get: function () {\n      return this.i.tx;\n    },\n    set: function (v) {\n      this.i.tx = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"valueMemberAsLegendUnit\", {\n    /**\n     * Gets or sets the unit displayed after series value in the Data Legend.\n    */\n    get: function () {\n      return this.i.tz;\n    },\n    set: function (v) {\n      this.i.tz = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineType\", {\n    /**\n     * Gets or sets the trend type for the current series object.\n    *\n    * The `trendLineType` property is used for the current series object's trend type.'\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \ttrendLineType=\"SimpleAverage\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLineType= \"CubicFit\";\n    * ```\n    */\n    get: function () {\n      return this.i.trendLineType;\n    },\n    set: function (v) {\n      this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineBrush\", {\n    /**\n     * Gets or sets the brush to use to draw the trend line.\n    *\n    * The `trendLineBrush` property is used to brush the trend line.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \ttrendLineBrush=\"Gray\"  />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLineBrush=\"red\";\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.trendLineBrush);\n    },\n    set: function (v) {\n      this.i.trendLineBrush = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"actualTrendLineBrush\", {\n    /**\n     * Gets the effective TrendLineBrush for this series.\n    *\n    * The `actualTrendLineBrush` property is used to gets the effective `trendLineBrush` for this series.\n    */\n    get: function () {\n      return brushToString(this.i.ul);\n    },\n    set: function (v) {\n      this.i.ul = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineThickness\", {\n    /**\n     * Gets or sets the thickness of the current series object's trend line.\n    *\n    * The `trendLineThickness` property is used for thickness of the current series object's trend line.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \ttrendLineThickness =\"2\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLineThickness= 2;\n    * ```\n    */\n    get: function () {\n      return this.i.trendLineThickness;\n    },\n    set: function (v) {\n      this.i.trendLineThickness = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLinePeriod\", {\n    /**\n     * Gets or sets the trend line period for the current series.\n     * The typical, and initial, value for trend line period is 7.\n    *\n    * The `trendLinePeriod` property is used for trend line period of the current series.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \ttrendLinePeriod =\"2\" />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    * series.trendLinePeriod= 7;\n    * ```\n    */\n    get: function () {\n      return this.i.trendLinePeriod;\n    },\n    set: function (v) {\n      this.i.trendLinePeriod = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"markerCollisionAvoidance\", {\n    /**\n     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.\n    *\n    * The `markerCollisionAvoidance` property controls the technique the chart uses to avoid overlapping markers.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \tmarkerCollisionAvoidance=\"fade\"  />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.tj;\n    },\n    set: function (v) {\n      this.i.tj = ensureEnum(CategorySeriesMarkerCollisionAvoidance_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"consolidatedItemHitTestBehavior\", {\n    /**\n     * Determines the item returned in hit-testing when the pointer is over an object which represents several consolidated items.\n    *\n    * The `consolidatedItemHitTestBehavior` property is used to determines returned item in hit-testing when the pointer is over an object which represents several consolidated items.\n    *\n    * ```ts\n    * <IgrDataChart >\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxisYears\"\n    *     interval={12} labelLocation=\"OutsideBottom\"\n    *     label=\"Year\"  overlap={1} gap={0.4}  />\n    *\n    *     <IgrCategoryXAxis name=\"xAxisMonths\"\n    *     interval={1}  labelLocation=\"OutsideBottom\"\n    *     label=\"Month\" overlap={1} gap={0.4}/>\n    *\n    *     <IgrNumericYAxis  name=\"yAxisLeft\"\n    *     title=\"Expanse | Revenue\"\n    *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n    *     maximumValue={900}\n    *     interval={300} />\n    *\n    *     <IgrNumericYAxis  name=\"yAxisRight\"\n    *     title=\"Profit (%)\"\n    *     minimumValue={0}  labelLocation=\"OutsideRight\"\n    *     maximumValue={100} />\n    *\n    *\n    *     <IgrLineSeries name=\"series1\"\n    *     valueMemberPath=\"Revenue\"\n    *     xAxisName=\"xAxisMonths\"\n    *     yAxisName=\"yAxisLeft\"\n    * \tconsolidatedItemHitTestBehavior=\"Basic\"  />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.tk;\n    },\n    set: function (v) {\n      this.i.tk = ensureEnum(ConsolidatedItemHitTestBehavior_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrAnchoredCategorySeries.prototype.getItemValue = function (item, memberPathName) {\n    var iv = this.i.hw(item, memberPathName);\n    return iv;\n  };\n  /**\n   * Scrolls the series to display the item for the specified data item.\n   * The series is scrolled by the minimum amount required to place the specified data item within\n   * the central 80% of the visible axis.\n  \r\n  * @param item  * The data item (item) to scroll to.\n  *\n  * The `scrollIntoView` method is used to notifies the target axis or series that it should scroll the requested data item into view.\n  *\n  * ```ts\n  * this.series.scrollIntoView(dataItem);\n  * ```\n  */\n\n\n  IgrAnchoredCategorySeries.prototype.scrollIntoView = function (item) {\n    var iv = this.i.en(item);\n    return iv;\n  };\n  /**\n   * Gets the item that is the best match for the specified world coordinates.\n  \r\n  * @param world  * The world coordinates to use.\n  *\n  * The `getItem` method is used to gets the item that is the best match for the specified world coordinates.\n  *\n  * ```ts\n  * let item: number = this.series.getItem({x:.5,y:.5});\n  * ```\n  */\n\n\n  IgrAnchoredCategorySeries.prototype.getItem = function (world) {\n    var iv = this.i.ht(toPoint(world));\n    return iv;\n  };\n\n  return IgrAnchoredCategorySeries;\n}(IgrCategorySeries);\n\nexport { IgrAnchoredCategorySeries };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-anchored-category-series.js"],"names":["__extends","TrendLineType_$type","CategorySeriesMarkerCollisionAvoidance_$type","ConsolidatedItemHitTestBehavior_$type","IgrCategorySeries","ensureEnum","brushToString","stringToBrush","toPoint","IgrAnchoredCategorySeries","_super","props","call","Object","defineProperty","prototype","get","_implementation","enumerable","configurable","i","t1","set","v","tx","tz","trendLineType","trendLineBrush","ul","trendLineThickness","trendLinePeriod","tj","tk","getItemValue","item","memberPathName","iv","hw","scrollIntoView","en","getItem","world","ht"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,mBAAT,QAAoC,qBAApC;AACA,SAASC,4CAAT,QAA6D,0CAA7D;AACA,SAASC,qCAAT,QAAsD,mCAAtD;AACA,SAASC,iBAAT,QAAkC,uBAAlC;AACA,SAASC,UAAT,EAAqBC,aAArB,EAAoCC,aAApC,EAAmDC,OAAnD,QAAkE,qBAAlE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,yBAAyB;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;AAC3EV,EAAAA,SAAS,CAACS,yBAAD,EAA4BC,MAA5B,CAAT;;AACA,WAASD,yBAAT,CAAmCE,KAAnC,EAA0C;AACtC,WAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;AACH;;AACDE,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,GAA3D,EAAgE;AAC5D;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKC,eAAZ;AACH,KAN2D;AAO5DC,IAAAA,UAAU,EAAE,KAPgD;AAQ5DC,IAAAA,YAAY,EAAE;AAR8C,GAAhE;AAUAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,iBAA3D,EAA8E;AAC1E;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOC,EAAd;AACH,KAvCyE;AAwC1EC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOC,EAAP,GAAYE,CAAZ;AACH,KA1CyE;AA2C1EL,IAAAA,UAAU,EAAE,KA3C8D;AA4C1EC,IAAAA,YAAY,EAAE;AA5C4D,GAA9E;AA8CAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,0BAA3D,EAAuF;AACnF;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOI,EAAd;AACH,KANkF;AAOnFF,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOI,EAAP,GAAYD,CAAZ;AACH,KATkF;AAUnFL,IAAAA,UAAU,EAAE,KAVuE;AAWnFC,IAAAA,YAAY,EAAE;AAXqE,GAAvF;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,yBAA3D,EAAsF;AAClF;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOK,EAAd;AACH,KANiF;AAOlFH,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOK,EAAP,GAAYF,CAAZ;AACH,KATiF;AAUlFL,IAAAA,UAAU,EAAE,KAVsE;AAWlFC,IAAAA,YAAY,EAAE;AAXoE,GAAtF;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,eAA3D,EAA4E;AACxE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOM,aAAd;AACH,KA5CuE;AA6CxEJ,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOM,aAAP,GAAuBrB,UAAU,CAACJ,mBAAD,EAAsBsB,CAAtB,CAAjC;AACH,KA/CuE;AAgDxEL,IAAAA,UAAU,EAAE,KAhD4D;AAiDxEC,IAAAA,YAAY,EAAE;AAjD0D,GAA5E;AAmDAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,gBAA3D,EAA6E;AACzE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOV,aAAa,CAAC,KAAKc,CAAL,CAAOO,cAAR,CAApB;AACH,KA5CwE;AA6CzEL,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOO,cAAP,GAAwBpB,aAAa,CAACgB,CAAD,CAArC;AACH,KA/CwE;AAgDzEL,IAAAA,UAAU,EAAE,KAhD6D;AAiDzEC,IAAAA,YAAY,EAAE;AAjD2D,GAA7E;AAmDAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,sBAA3D,EAAmF;AAC/E;AACR;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOV,aAAa,CAAC,KAAKc,CAAL,CAAOQ,EAAR,CAApB;AACH,KAR8E;AAS/EN,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOQ,EAAP,GAAYrB,aAAa,CAACgB,CAAD,CAAzB;AACH,KAX8E;AAY/EL,IAAAA,UAAU,EAAE,KAZmE;AAa/EC,IAAAA,YAAY,EAAE;AAbiE,GAAnF;AAeAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,oBAA3D,EAAiF;AAC7E;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOS,kBAAd;AACH,KA5C4E;AA6C7EP,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOS,kBAAP,GAA4B,CAACN,CAA7B;AACH,KA/C4E;AAgD7EL,IAAAA,UAAU,EAAE,KAhDiE;AAiD7EC,IAAAA,YAAY,EAAE;AAjD+D,GAAjF;AAmDAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,iBAA3D,EAA8E;AAC1E;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOU,eAAd;AACH,KA7CyE;AA8C1ER,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOU,eAAP,GAAyB,CAACP,CAA1B;AACH,KAhDyE;AAiD1EL,IAAAA,UAAU,EAAE,KAjD8D;AAkD1EC,IAAAA,YAAY,EAAE;AAlD4D,GAA9E;AAoDAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,0BAA3D,EAAuF;AACnF;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOW,EAAd;AACH,KAxCkF;AAyCnFT,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOW,EAAP,GAAY1B,UAAU,CAACH,4CAAD,EAA+CqB,CAA/C,CAAtB;AACH,KA3CkF;AA4CnFL,IAAAA,UAAU,EAAE,KA5CuE;AA6CnFC,IAAAA,YAAY,EAAE;AA7CqE,GAAvF;AA+CAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,yBAAyB,CAACM,SAAhD,EAA2D,iCAA3D,EAA8F;AAC1F;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOY,EAAd;AACH,KAxCyF;AAyC1FV,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOY,EAAP,GAAY3B,UAAU,CAACF,qCAAD,EAAwCoB,CAAxC,CAAtB;AACH,KA3CyF;AA4C1FL,IAAAA,UAAU,EAAE,KA5C8E;AA6C1FC,IAAAA,YAAY,EAAE;AA7C4E,GAA9F;;AA+CAV,EAAAA,yBAAyB,CAACM,SAA1B,CAAoCkB,YAApC,GAAmD,UAAUC,IAAV,EAAgBC,cAAhB,EAAgC;AAC/E,QAAIC,EAAE,GAAG,KAAKhB,CAAL,CAAOiB,EAAP,CAAUH,IAAV,EAAgBC,cAAhB,CAAT;AACA,WAAQC,EAAR;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI3B,EAAAA,yBAAyB,CAACM,SAA1B,CAAoCuB,cAApC,GAAqD,UAAUJ,IAAV,EAAgB;AACjE,QAAIE,EAAE,GAAG,KAAKhB,CAAL,CAAOmB,EAAP,CAAUL,IAAV,CAAT;AACA,WAAQE,EAAR;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI3B,EAAAA,yBAAyB,CAACM,SAA1B,CAAoCyB,OAApC,GAA8C,UAAUC,KAAV,EAAiB;AAC3D,QAAIL,EAAE,GAAG,KAAKhB,CAAL,CAAOsB,EAAP,CAAUlC,OAAO,CAACiC,KAAD,CAAjB,CAAT;AACA,WAAQL,EAAR;AACH,GAHD;;AAIA,SAAO3B,yBAAP;AACH,CAtb4D,CAsb3DL,iBAtb2D,CAA7D;;AAubA,SAASK,yBAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { TrendLineType_$type } from \"igniteui-react-core\";\nimport { CategorySeriesMarkerCollisionAvoidance_$type } from \"./CategorySeriesMarkerCollisionAvoidance\";\nimport { ConsolidatedItemHitTestBehavior_$type } from \"./ConsolidatedItemHitTestBehavior\";\nimport { IgrCategorySeries } from \"./igr-category-series\";\nimport { ensureEnum, brushToString, stringToBrush, toPoint } from \"igniteui-react-core\";\n/**\n * Represents the base class for all IgxDataChartComponent anchored category/value series.\n*\n* The `IgrAnchoredCategorySeries` represents the base class for all IgxDataChartComponent anchored category/value series.\n*\n* ```ts\n* <IgrDataChart >\n*\n*\n*     <IgrCategoryXAxis name=\"xAxisYears\"\n*     interval={12} labelLocation=\"OutsideBottom\"\n*     label=\"Year\"  overlap={1} gap={0.4}  />\n*\n*     <IgrCategoryXAxis name=\"xAxisMonths\"\n*     interval={1}  labelLocation=\"OutsideBottom\"\n*     label=\"Month\" overlap={1} gap={0.4}/>\n*\n*     <IgrNumericYAxis  name=\"yAxisLeft\"\n*     title=\"Expanse | Revenue\"\n*     minimumValue={-900} labelLocation=\"OutsideLeft\"\n*     maximumValue={900}\n*     interval={300} />\n*\n*     <IgrNumericYAxis  name=\"yAxisRight\"\n*     title=\"Profit (%)\"\n*     minimumValue={0}  labelLocation=\"OutsideRight\"\n*     maximumValue={100} />\n*\n*\n*     <IgrLineSeries name=\"series1\"\n*     valueMemberPath=\"Revenue\"\n*     xAxisName=\"xAxisMonths\"\n*     yAxisName=\"yAxisLeft\" />\n*  </IgrDataChart>\n* ```\n*/\nvar IgrAnchoredCategorySeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrAnchoredCategorySeries, _super);\n    function IgrAnchoredCategorySeries(props) {\n        return _super.call(this, props) || this;\n    }\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"valueMemberPath\", {\n        /**\n         * Gets or sets the value mapping property for the current series object.\n        *\n        * The `valueMemberPath` property is used for the value mapping property of the current series object.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.t1;\n        },\n        set: function (v) {\n            this.i.t1 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"valueMemberAsLegendLabel\", {\n        /**\n         * Gets or sets the label displayed before series value in the Data Legend.\n        */\n        get: function () {\n            return this.i.tx;\n        },\n        set: function (v) {\n            this.i.tx = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"valueMemberAsLegendUnit\", {\n        /**\n         * Gets or sets the unit displayed after series value in the Data Legend.\n        */\n        get: function () {\n            return this.i.tz;\n        },\n        set: function (v) {\n            this.i.tz = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineType\", {\n        /**\n         * Gets or sets the trend type for the current series object.\n        *\n        * The `trendLineType` property is used for the current series object's trend type.'\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \ttrendLineType=\"SimpleAverage\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLineType= \"CubicFit\";\n        * ```\n        */\n        get: function () {\n            return this.i.trendLineType;\n        },\n        set: function (v) {\n            this.i.trendLineType = ensureEnum(TrendLineType_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineBrush\", {\n        /**\n         * Gets or sets the brush to use to draw the trend line.\n        *\n        * The `trendLineBrush` property is used to brush the trend line.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \ttrendLineBrush=\"Gray\"  />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLineBrush=\"red\";\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.trendLineBrush);\n        },\n        set: function (v) {\n            this.i.trendLineBrush = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"actualTrendLineBrush\", {\n        /**\n         * Gets the effective TrendLineBrush for this series.\n        *\n        * The `actualTrendLineBrush` property is used to gets the effective `trendLineBrush` for this series.\n        */\n        get: function () {\n            return brushToString(this.i.ul);\n        },\n        set: function (v) {\n            this.i.ul = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLineThickness\", {\n        /**\n         * Gets or sets the thickness of the current series object's trend line.\n        *\n        * The `trendLineThickness` property is used for thickness of the current series object's trend line.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \ttrendLineThickness =\"2\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLineThickness= 2;\n        * ```\n        */\n        get: function () {\n            return this.i.trendLineThickness;\n        },\n        set: function (v) {\n            this.i.trendLineThickness = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"trendLinePeriod\", {\n        /**\n         * Gets or sets the trend line period for the current series.\n         * The typical, and initial, value for trend line period is 7.\n        *\n        * The `trendLinePeriod` property is used for trend line period of the current series.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \ttrendLinePeriod =\"2\" />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        * series.trendLinePeriod= 7;\n        * ```\n        */\n        get: function () {\n            return this.i.trendLinePeriod;\n        },\n        set: function (v) {\n            this.i.trendLinePeriod = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"markerCollisionAvoidance\", {\n        /**\n         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.\n        *\n        * The `markerCollisionAvoidance` property controls the technique the chart uses to avoid overlapping markers.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \tmarkerCollisionAvoidance=\"fade\"  />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.tj;\n        },\n        set: function (v) {\n            this.i.tj = ensureEnum(CategorySeriesMarkerCollisionAvoidance_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrAnchoredCategorySeries.prototype, \"consolidatedItemHitTestBehavior\", {\n        /**\n         * Determines the item returned in hit-testing when the pointer is over an object which represents several consolidated items.\n        *\n        * The `consolidatedItemHitTestBehavior` property is used to determines returned item in hit-testing when the pointer is over an object which represents several consolidated items.\n        *\n        * ```ts\n        * <IgrDataChart >\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxisYears\"\n        *     interval={12} labelLocation=\"OutsideBottom\"\n        *     label=\"Year\"  overlap={1} gap={0.4}  />\n        *\n        *     <IgrCategoryXAxis name=\"xAxisMonths\"\n        *     interval={1}  labelLocation=\"OutsideBottom\"\n        *     label=\"Month\" overlap={1} gap={0.4}/>\n        *\n        *     <IgrNumericYAxis  name=\"yAxisLeft\"\n        *     title=\"Expanse | Revenue\"\n        *     minimumValue={-900} labelLocation=\"OutsideLeft\"\n        *     maximumValue={900}\n        *     interval={300} />\n        *\n        *     <IgrNumericYAxis  name=\"yAxisRight\"\n        *     title=\"Profit (%)\"\n        *     minimumValue={0}  labelLocation=\"OutsideRight\"\n        *     maximumValue={100} />\n        *\n        *\n        *     <IgrLineSeries name=\"series1\"\n        *     valueMemberPath=\"Revenue\"\n        *     xAxisName=\"xAxisMonths\"\n        *     yAxisName=\"yAxisLeft\"\n        * \tconsolidatedItemHitTestBehavior=\"Basic\"  />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.tk;\n        },\n        set: function (v) {\n            this.i.tk = ensureEnum(ConsolidatedItemHitTestBehavior_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrAnchoredCategorySeries.prototype.getItemValue = function (item, memberPathName) {\n        var iv = this.i.hw(item, memberPathName);\n        return (iv);\n    };\n    /**\n     * Scrolls the series to display the item for the specified data item.\n     * The series is scrolled by the minimum amount required to place the specified data item within\n     * the central 80% of the visible axis.\n    \r\n    * @param item  * The data item (item) to scroll to.\n    *\n    * The `scrollIntoView` method is used to notifies the target axis or series that it should scroll the requested data item into view.\n    *\n    * ```ts\n    * this.series.scrollIntoView(dataItem);\n    * ```\n    */\n    IgrAnchoredCategorySeries.prototype.scrollIntoView = function (item) {\n        var iv = this.i.en(item);\n        return (iv);\n    };\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n    \r\n    * @param world  * The world coordinates to use.\n    *\n    * The `getItem` method is used to gets the item that is the best match for the specified world coordinates.\n    *\n    * ```ts\n    * let item: number = this.series.getItem({x:.5,y:.5});\n    * ```\n    */\n    IgrAnchoredCategorySeries.prototype.getItem = function (world) {\n        var iv = this.i.ht(toPoint(world));\n        return (iv);\n    };\n    return IgrAnchoredCategorySeries;\n}(IgrCategorySeries));\nexport { IgrAnchoredCategorySeries };\n"]},"metadata":{},"sourceType":"module"}