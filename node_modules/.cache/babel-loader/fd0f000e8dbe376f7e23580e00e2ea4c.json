{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { GridMode_$type } from './GridMode';\nimport { IgrSeriesViewer } from './igr-series-viewer';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { XamDataChart } from './XamDataChart';\nimport { CollectionAdapter, brushToString, stringToBrush, ensureBool, ensureEnum, NamePatcher } from \"igniteui-react-core\";\nimport { Axis } from './Axis';\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { IgrSeriesCollection } from './igr-series-collection';\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { IgrAxisCollection } from './igr-axis-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { SyncLinkManager } from './SyncLinkManager';\nimport { SyncLink } from './SyncLink';\nimport { ComputedPlotAreaMarginMode_$type } from './ComputedPlotAreaMarginMode';\nimport { AutoMarginsAndAngleUpdateMode_$type } from './AutoMarginsAndAngleUpdateMode';\nimport { SeriesPlotAreaMarginHorizontalMode_$type } from './SeriesPlotAreaMarginHorizontalMode';\nimport { SeriesPlotAreaMarginVerticalMode_$type } from './SeriesPlotAreaMarginVerticalMode';\n/**\n * Represents a chart area containing axes, series, an optional legend and other hosted content.\n*/\n\nvar IgrDataChart =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrDataChart, _super);\n\n  function IgrDataChart(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.contentAxes = [];\n    _this.contentSeries = [];\n    /**\n     * The series actually present in the chart. Do not directly modify this array.\n     * This array's contents can be modified by causing React to reproject the child content.\n     * Or adding and removing series from the manual series collection on the series property.\n     */\n\n    _this.actualSeries = [];\n    /**\n     * The axes actually present in the chart. Do not directly modify this array.\n     * This array's contents can be modified by causing React to reproject the child content.\n     * Or adding and removing axes from the manual axes collection on the axes property.\n     */\n\n    _this.actualAxes = [];\n    _this._series = null;\n    _this._axes = null;\n    _this._initialized = false;\n    _this._axesAdapter = null;\n    _this._seriesAdapter = null;\n    _this._defaultTooltips = null;\n    _this._uniqueTooltipId = 0;\n\n    if (_this._styling) {\n      NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n    }\n\n    _this._getMainRef = _this._getMainRef.bind(_this);\n    _this._tooltipRef = _this._tooltipRef.bind(_this);\n    _this._activeTooltipElements = new Map();\n    _this._activeTooltips = new Map();\n    _this._currentTooltips = [];\n    _this._contentChildrenManager = new ContentChildrenManager(function (ch) {\n      return ch.key || ch.props.name;\n    }, function (ch) {\n      return ch.key || ch.props.name;\n    }, function () {\n      return _this._updateContentChildren();\n    });\n\n    if (document) {\n      _this._container = document.createElement(\"div\");\n      _this._container.style.display = \"block\";\n      _this._container.style.width = \"100%\";\n      _this._container.style.height = \"100%\";\n    }\n\n    var root;\n    root = _this._container;\n    var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n    _this._wrapper = ren;\n    var chart = _this.i;\n    _this._chart = chart;\n    _this._axesAdapter = new CollectionAdapter(_this.contentAxes, _this.i.axes, _this.actualAxes, function (c) {\n      return c.i;\n    }, function (i) {\n      i._provideRenderer(_this._wrapper);\n\n      i.provideData(_this._dataSource);\n\n      for (var j = 0; j < _this.actualSeries.length; j++) {\n        _this.actualSeries[j].bindAxes(_this.actualAxes);\n      }\n\n      for (var j = 0; j < _this.actualAxes.length; j++) {\n        _this.actualAxes[j].bindAxes(_this.actualAxes);\n      }\n\n      if (_this._container && _this._container.parentElement) {\n        i._styling(_this._container, _this, _this);\n      } //this._checkCrossing(); \n\n    }, function (i) {\n      i._provideRenderer(null);\n\n      i.provideData(null);\n    });\n    _this._seriesAdapter = new CollectionAdapter(_this.contentSeries, _this.i.series, _this.actualSeries, function (c) {\n      return c.i;\n    }, function (i) {\n      i.owner = _this;\n\n      i._provideRenderer(_this._wrapper);\n\n      i.provideData(_this._dataSource);\n\n      if (_this._container && _this._container.parentElement) {\n        i._styling(_this._container, _this, _this);\n      }\n\n      i.bindAxes(_this.actualAxes);\n\n      _this._ensureDefaultTooltip(i);\n\n      _this._ensureTooltipCreated(i);\n    }, function (i) {\n      i._provideRenderer(null);\n\n      i.provideData(null);\n    });\n    chart.provideContainer(ren);\n    ren.addSizeWatcher(function () {\n      _this._chart.notifyContainerResized();\n    });\n    _this._initialized = true;\n    return _this;\n  }\n\n  Object.defineProperty(IgrDataChart.prototype, \"height\", {\n    get: function () {\n      return this._height;\n    },\n    set: function (value) {\n      this._height = value;\n\n      if (this._elRef) {\n        this._elRef.style.height = value;\n\n        this._chart.notifyContainerResized();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"legend\", {\n    /**\n     * Gets or sets the legend used for the current chart.\n    */\n    get: function () {\n      if (this.i.legend != null) return this.i.legend.externalObject;\n    },\n    set: function (v) {\n      if (v != undefined && v != null) this.i.legend = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrDataChart.prototype._updateContentChildren = function () {\n    this.contentAxes.length = 0;\n    this.contentSeries.length = 0;\n    var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n\n    for (var i = 0; i < contentChildrenActual.length; i++) {\n      if (Axis.$type.isAssignableFrom(contentChildrenActual[i].i.$type)) {\n        this.contentAxes.push(contentChildrenActual[i]);\n      } else {\n        this.contentSeries.push(contentChildrenActual[i]);\n      }\n    }\n\n    if (this._axesAdapter !== null) {\n      this._axesAdapter.notifyContentChanged();\n    }\n\n    if (this._seriesAdapter !== null) {\n      this._seriesAdapter.notifyContentChanged();\n    }\n  }; // private _childrenDiffer(children: any): boolean {\n  //     if (this._contentChildren === null) {\n  //         return true;\n  //     }\n  //     if (React.Children.count(children) != this._contentChildren.length) {\n  //         return true;\n  //     }\n  //     let arr = React.Children.toArray(children);\n  //     for (let i = 0; i < arr.length; i++) {\n  //         if ((arr[i] as any).props.name !== this._contentChildren[i].props.name) {\n  //             return true;\n  //         }\n  //     }\n  //     return false;\n  // }\n\n\n  IgrDataChart.prototype._getMainRef = function (ref) {\n    this._elRef = ref;\n  };\n\n  IgrDataChart.prototype.render = function () {\n    // if (!this._childrenDiffer(this.props.children)) {\n    // \tlet div = React.createElement(\"div\", {\n    // \t\tref: (ref) => {\n    // \t\t\tthis._elRef = ref;\n    // \t\t},\n    // \t\tchildren: this.props.children\n    // \t});\n    // \treturn div;\n    // } else {\n    var children = this._contentChildrenManager.getChildren(this.props.children); //this._contentChildrenUnresolved = this._contentChildrenMap.size;\n\n\n    if (this._currentTooltips && this._currentTooltips.length > 0) {\n      //children = React.Children.toArray(this.props.children);\n      for (var i = 0; i < this._currentTooltips.length; i++) {\n        var t = this._currentTooltips[i];\n\n        if (this._activeTooltipElements.has(t)) {\n          children.push(this._activeTooltipElements.get(t));\n        } else {\n          if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n            continue;\n          }\n\n          var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n          var tEle = React.createElement(Tooltip, {\n            ref: this._tooltipRef,\n            key: this._currentTooltips[i].key,\n            owner: this._currentTooltips[i]\n          });\n          var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n\n          this._activeTooltipElements.set(t, portal);\n\n          children.push(portal);\n        }\n      }\n    }\n\n    var div = React.createElement(\"div\", {\n      className: \"ig-data-chart igr-data-chart\",\n      ref: this._getMainRef,\n      children: children\n    });\n    return div; //}\n  };\n\n  IgrDataChart.prototype._tooltipRef = function (t) {\n    //console.log(t);\n    if (t === null) {\n      return;\n    }\n\n    if (t.currentOwner && t.currentOwner.tooltipTemplate) {\n      t.template = t.currentOwner.tooltipTemplate;\n    }\n\n    this._activeTooltips.set(t.currentOwner, t);\n  };\n\n  IgrDataChart.prototype.componentDidMount = function () {\n    _super.prototype.componentDidMount.call(this);\n\n    this._elRef.style.width = this._width ? this._width : \"\";\n    this._elRef.style.height = this._height ? this._height : \"\";\n\n    this._elRef.appendChild(this._container);\n\n    this._chart.notifyContainerResized();\n\n    this.initializeContent();\n  };\n\n  Object.defineProperty(IgrDataChart.prototype, \"width\", {\n    get: function () {\n      return this._width;\n    },\n    set: function (value) {\n      this._width = value;\n\n      if (this._elRef) {\n        this._elRef.style.width = value;\n\n        this._chart.notifyContainerResized();\n      }\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"series\", {\n    /**\n     * A collection or manually added series for the chart.\n    */\n    get: function () {\n      var _this = this;\n\n      if (this._series === null) {\n        var coll = new IgrSeriesCollection();\n        var inner = coll._innerColl;\n        inner.addListener(function (sender, e) {\n          switch (e.action) {\n            case NotifyCollectionChangedAction.Add:\n              _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Remove:\n              _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              break;\n\n            case NotifyCollectionChangedAction.Replace:\n              _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Reset:\n              _this._seriesAdapter.clearManualItems();\n\n              break;\n          }\n        });\n        this._series = coll;\n      }\n\n      return this._series;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"axes\", {\n    /**\n     * A collection or manually added axes for the chart.\n    */\n    get: function () {\n      var _this = this;\n\n      if (this._axes === null) {\n        var coll = new IgrAxisCollection();\n        var inner = coll._innerColl;\n        inner.addListener(function (sender, e) {\n          switch (e.action) {\n            case NotifyCollectionChangedAction.Add:\n              _this._axesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Remove:\n              _this._axesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              break;\n\n            case NotifyCollectionChangedAction.Replace:\n              _this._axesAdapter.removeManualItemAt(e.oldStartingIndex);\n\n              _this._axesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n\n              break;\n\n            case NotifyCollectionChangedAction.Reset:\n              _this._axesAdapter.clearManualItems();\n\n              break;\n          }\n        });\n        this._axes = coll;\n      }\n\n      return this._axes;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrDataChart.prototype.componentWillUnmount = function () {\n    this._chart.destroy();\n\n    this._wrapper.destroy();\n  };\n\n  IgrDataChart.prototype.createImplementation = function () {\n    return new XamDataChart();\n  };\n\n  Object.defineProperty(IgrDataChart.prototype, \"dataSource\", {\n    get: function () {\n      return this._dataSource;\n    },\n    set: function (value) {\n      this._dataSource = value;\n      this.bindData();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrDataChart.prototype.bindData = function () {\n    //console.log(\"binding data: \" + this._dataSource);\n    if (this.actualAxes && this.actualAxes.length > 0) {\n      var currAxes = this.actualAxes;\n\n      for (var i = 0; i < currAxes.length; i++) {\n        currAxes[i].provideData(this._dataSource);\n      }\n    }\n\n    if (this.actualSeries && this.actualSeries.length > 0) {\n      var currSeries = this.actualSeries;\n\n      for (var i = 0; i < currSeries.length; i++) {\n        currSeries[i].provideData(this._dataSource);\n      }\n    }\n  };\n\n  IgrDataChart.prototype.initializeContent = function () {\n    if (TypeRegistrar.isRegistered(\"IgrDataChartDefaultTooltips\")) {\n      var d = TypeRegistrar.create(\"IgrDataChartDefaultTooltips\");\n      this._defaultTooltips = d;\n\n      this._onDefaultTooltipsReady(d); //this._container.appendChild(cr.location.nativeElement);\n\n    }\n\n    this._styling(this._container, this);\n\n    if (this.actualAxes && this.actualAxes.length > 0) {\n      var currAxes = this.actualAxes;\n\n      for (var i = 0; i < currAxes.length; i++) {\n        currAxes[i]._styling(this._container, this, this);\n      }\n    }\n\n    if (this.actualSeries && this.actualSeries.length > 0) {\n      var currSeries = this.actualSeries;\n\n      for (var i = 0; i < currSeries.length; i++) {\n        currSeries[i]._styling(this._container, this, this);\n      }\n    }\n\n    this.i.notifyContainerResized();\n  }; //private _checkCrossing() {\n  //    let toBind: IgrAxis[] = [];\n  //    let byName = new Map<string, IgrAxis>();\n  //    for (let i = 0; i < this.actualAxes.length; i++) {\n  //        byName.set(this.actualAxes[i].name, this.actualAxes[i]);\n  //        if (this.actualAxes[i].crossingAxisName) {\n  //            toBind.push(this.actualAxes[i]);\n  //        }\n  //    }\n  //    for (let i = 0; i < toBind.length; i++) {\n  //        if (byName.has(toBind[i].crossingAxisName)) {\n  //            if (toBind[i].crossingAxis !== byName.get(toBind[i].crossingAxisName)) {\n  //                toBind[i].crossingAxis = byName.get(toBind[i].crossingAxisName);\n  //            }\n  //        }\n  //    }\n  //}\n\n\n  IgrDataChart.prototype._ensureTooltipCreated = function (series) {\n    var _this = this;\n\n    series._ensureTooltipCreated(function () {\n      return _this.createTooltip();\n    }, function (ele) {\n      var wrapper = new ReactWrapper(ele, _this._wrapper);\n      wrapper.updateToolTip = ele.updateToolTip;\n      wrapper.hideToolTip = ele.hideToolTip;\n\n      if (_this._activeTooltips.has(ele)) {\n        var tCont = _this._activeTooltips.get(ele);\n\n        tCont.template = ele.tooltipTemplate;\n      }\n\n      return wrapper;\n    });\n  };\n\n  IgrDataChart.prototype._ensureDefaultTooltip = function (series) {\n    if (this._defaultTooltips == null) {\n      return;\n    }\n\n    this._defaultTooltips[\"ensureDefaultTooltip\"](series);\n  };\n\n  IgrDataChart.prototype._onDefaultTooltipsReady = function (cr) {\n    if (this.actualSeries && this.actualSeries.length > 0) {\n      var currSeries = this.actualSeries;\n\n      for (var i = 0; i < currSeries.length; i++) {\n        if (currSeries[i].showDefaultTooltip) {\n          this._ensureDefaultTooltip(currSeries[i]);\n        }\n      }\n    }\n  };\n\n  IgrDataChart.prototype.createTooltip = function () {\n    // if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n    // \treturn null;\n    // }\n    // let Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n    var wrapper = this._wrapper.createElement(\"div\");\n\n    var ele = wrapper.getNativeElement();\n    ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n    this._uniqueTooltipId++;\n    this._currentTooltips = this._currentTooltips.slice(0);\n\n    this._currentTooltips.push(ele); //let element = React.createElement(Tooltip,  );\n    //let portal = ReactDOM.createPortal(element, ele);\n\n\n    var self = this;\n\n    ele.updateToolTip = function (c, isSubContent) {\n      if (c.externalObject) {\n        c = c.externalObject;\n      } else {\n        var ext = new IgrDataContext();\n        ext._implementation = c;\n        c = ext;\n      }\n\n      if (!isSubContent) {\n        if (ele.parentElement != self._container) {\n          if (ele.parentElement != null) {\n            ele.parentElement.removeChild(ele);\n          }\n\n          self._container.appendChild(ele);\n        }\n      } else {\n        c.isSubContent = true;\n      }\n\n      if (self._activeTooltips.has(ele)) {\n        var t = self._activeTooltips.get(ele);\n\n        t.dataContext = c;\n      }\n\n      ele.style.display = \"block\";\n      return true;\n    };\n\n    ele.hideToolTip = function () {\n      ele.style.display = \"none\";\n    };\n\n    ele.style.display = \"none\";\n\n    this._updateTooltipState();\n\n    return ele;\n  };\n\n  IgrDataChart.prototype._updateTooltipState = function () {\n    if (this._initialized) {\n      this.setState({\n        tooltips: this._currentTooltips\n      });\n    }\n  };\n\n  Object.defineProperty(IgrDataChart.prototype, \"syncChannel\", {\n    /**\n     * Gets or sets the channel with which to synchronize.\n    *\n    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n    */\n    get: function () {\n      return this.i.syncChannel;\n    },\n    set: function (v) {\n      var newLink = null;\n\n      if (v && v.length > 0) {\n        newLink = SyncLinkManager.instance().getLink(v);\n      }\n\n      var oldLink = this.i.actualSyncLink;\n\n      if (oldLink) {\n        SyncLinkManager.instance().releaseLink(oldLink);\n      }\n\n      if (newLink) {\n        this.i.actualSyncLink = newLink;\n      } else {\n        this.i.actualSyncLink = new SyncLink();\n      }\n\n      this.i.syncChannel = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"synchronizeVertically\", {\n    /**\n     * Gets or sets the bool used to display the window preview shadow.\n    *\n    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n    */\n    get: function () {\n      return this.i.syncSettings ? this.i.syncSettings.synchronizeVertically : false;\n    },\n    set: function (v) {\n      this.i.syncSettings.synchronizeVertically = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"synchronizeHorizontally\", {\n    /**\n     * Gets or sets the bool used to display the window preview shadow.\n    *\n    * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n    */\n    get: function () {\n      return this.i.syncSettings ? this.i.syncSettings.synchronizeHorizontally : false;\n    },\n    set: function (v) {\n      this.i.syncSettings.synchronizeHorizontally = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"i\", {\n    /**\n                             * @hidden\n                             */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"isSquare\", {\n    /**\n    * Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.\n    *\n    * Set `isSquare` to true to constrain the chart to a square, using the minimum of its height and width.\n    *\n    * ```ts\n    *  this.chart.isSquare=\"True\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tIsHorizontalZoomEnabled=\"True\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ts;\n    },\n    set: function (v) {\n      this.i.ts = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"windowScaleHorizontal\", {\n    /**\n     * A number between 0 and 1 determining the scale of the horizontal zoom.\n     * This property is effectively a shortcut to the Width of the WindowRect property.\n    *\n    * To programmatically change the horizontal zoom level, set `windowScaleHorizontal` to a value between 0 and 1.\n    *\n    * ```ts\n    * this.chart.windowScaleHorizontal=\"0.75\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \twindowScaleHorizontal=\"0.75\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.uz;\n    },\n    set: function (v) {\n      this.i.uz = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"windowScaleVertical\", {\n    /**\n     * A number between 0 and 1 determining the scale of the vertical zoom.\n     * This property is effectively a shortcut to the Height of the WindowRect property.\n    *\n    * To programmatically change the vertical zoom level, set `windowScaleVertical` to a value between 0 and 1.\n    *\n    * ```ts\n    * this.chart.windowScaleVertical=\"0.75\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \twindowScaleVertical=\"0.75\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.u0;\n    },\n    set: function (v) {\n      this.i.u0 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"actualWindowScaleHorizontal\", {\n    /**\n     * A number between 0 and 1 determining the scale of the horizontal zoom.\n     * This property is effectively a shortcut to the Width of the ActualWindowRect property.\n    */\n    get: function () {\n      return this.i.uk;\n    },\n    set: function (v) {\n      this.i.uk = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"actualWindowScaleVertical\", {\n    /**\n     * A number between 0 and 1 determining the scale of the vertical zoom.\n     * This property is effectively a shortcut to the Height of the ActualWindowRect property.\n    */\n    get: function () {\n      return this.i.ul;\n    },\n    set: function (v) {\n      this.i.ul = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"isHorizontalZoomEnabled\", {\n    /**\n     * Gets or sets horizontal zoomability of the current control\n    *\n    * Set `isHorizontalZoomEnabled` to enable or disable horizontal zooming.\n    *\n    * ```ts\n    * this.chart.IsHorizontalZoomEnabled= true;\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tIsHorizontalZoomEnabled=\"True\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.tq;\n    },\n    set: function (v) {\n      this.i.tq = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"isVerticalZoomEnabled\", {\n    /**\n     * Gets or sets vertical zoomability of the current control\n    *\n    * Set `isVerticalZoomEnabled` to enable or disable vertical zooming.\n    *\n    * ```ts\n    * this.chart.isVerticalZoomEnabled=\"True\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tIsVerticalZoomEnabled=\"True\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.tt;\n    },\n    set: function (v) {\n      this.i.tt = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"gridMode\", {\n    /**\n     * Gets or sets how grid lines are rendered in relation to series.\n    *\n    *  Try setting the `gridMode` property to bring your grid lines in front of the data series.\n    */\n    get: function () {\n      return this.i.s6;\n    },\n    set: function (v) {\n      this.i.s6 = ensureEnum(GridMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"alignsGridLinesToPixels\", {\n    /**\n     * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.\n    */\n    get: function () {\n      return this.i.tm;\n    },\n    set: function (v) {\n      this.i.tm = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"autoExpandMarginMaximumValue\", {\n    /**\n     * Gets or sets the maximum amount the series viewer should auto expand margins to accomodate the initial horizontal axis labels.\n    */\n    get: function () {\n      return this.i.un;\n    },\n    set: function (v) {\n      this.i.un = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"autoExpandMarginExtraPadding\", {\n    /**\n     * Gets or sets the extra amount the series viewer should auto expand margins to accomodate the initial horizontal axis labels.\n    */\n    get: function () {\n      return this.i.um;\n    },\n    set: function (v) {\n      this.i.um = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"shouldSuppressAxisLabelTruncation\", {\n    /**\n     * Gets or sets a whether the series viewer should suppress truncation of axis labels.\n    */\n    get: function () {\n      return this.i.t0;\n    },\n    set: function (v) {\n      this.i.t0 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"shouldAutoExpandMarginForInitialLabels\", {\n    /**\n     * Gets or sets a whether the series viewer should auto expand margins to accomodate the initial horizontal axis labels.\n    */\n    get: function () {\n      return this.i.tw;\n    },\n    set: function (v) {\n      this.i.tw = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"shouldConsiderAutoRotationForInitialLabels\", {\n    /**\n     * Gets or sets a whether the series viewer should consider auto rotating labels to fit them in the initial view. This implies that ShouldAutoExpandMarginForInitialLabels is true.\n    */\n    get: function () {\n      return this.i.tz;\n    },\n    set: function (v) {\n      this.i.tz = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"suppressAutoMarginAndAngleRecalculation\", {\n    /**\n     * Gets or sets a whether the series viewer should suppress auto recalculating margin and axis label angles.\n    */\n    get: function () {\n      return this.i.t1;\n    },\n    set: function (v) {\n      this.i.t1 = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"autoMarginAndAngleUpdateMode\", {\n    /**\n     * Gets or sets a whether the series viewer should consider auto rotating labels to fit them in the initial view. This implies that ShouldAutoExpandMarginForInitialLabels is true.\n    */\n    get: function () {\n      return this.i.s1;\n    },\n    set: function (v) {\n      this.i.s1 = ensureEnum(AutoMarginsAndAngleUpdateMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"defaultAxisStroke\", {\n    /**\n     * Gets or sets the DefaultAxisStroke property.\n     * The DefaultAxisStroke property defines the brush which is used by the axes when no\n     * Axis.Stroke is set.\n    */\n    get: function () {\n      return brushToString(this.i.w2);\n    },\n    set: function (v) {\n      this.i.w2 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"defaultAxisMajorStroke\", {\n    /**\n     * Gets or sets the DefaultAxisMajorStroke property.\n     * The DefaultAxisMajorStroke property defines the brush which is used by the axes when no\n     * Axis.MajorStroke is set.\n    */\n    get: function () {\n      return brushToString(this.i.w0);\n    },\n    set: function (v) {\n      this.i.w0 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"defaultAxisMinorStroke\", {\n    /**\n     * Gets or sets the DefaultAxisMinorStroke property.\n     * The DefaultAxisMinorStroke property defines the brush which is used by the axes when no\n     * Axis.MinorStroke is set.\n    */\n    get: function () {\n      return brushToString(this.i.w1);\n    },\n    set: function (v) {\n      this.i.w1 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"actualPlotAreaMarginLeft\", {\n    /**\n     * Gets the actual resolved left plot area margin;\n    */\n    get: function () {\n      return this.i.uh;\n    },\n    set: function (v) {\n      this.i.uh = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"actualPlotAreaMarginTop\", {\n    /**\n     * Gets the actual resolved top plot area margin;\n    */\n    get: function () {\n      return this.i.uj;\n    },\n    set: function (v) {\n      this.i.uj = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"actualPlotAreaMarginRight\", {\n    /**\n     * Gets the actual resolved right plot area margin;\n    */\n    get: function () {\n      return this.i.ui;\n    },\n    set: function (v) {\n      this.i.ui = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"actualPlotAreaMarginBottom\", {\n    /**\n     * Gets the actual resolved bottom plot area margin;\n    */\n    get: function () {\n      return this.i.ug;\n    },\n    set: function (v) {\n      this.i.ug = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"computedPlotAreaMarginMode\", {\n    /**\n     * Gets or sets mode to use for automatically calculating the plot area margin.\n    */\n    get: function () {\n      return this.i.s4;\n    },\n    set: function (v) {\n      this.i.s4 = ensureEnum(ComputedPlotAreaMarginMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"seriesPlotAreaMarginHorizontalMode\", {\n    /**\n     * Gets or sets horizontal mode to use for automatically calculating the plot area margin based ont the series.\n    */\n    get: function () {\n      return this.i.tb;\n    },\n    set: function (v) {\n      this.i.tb = ensureEnum(SeriesPlotAreaMarginHorizontalMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"seriesPlotAreaMarginVerticalMode\", {\n    /**\n     * Gets or sets vertical mode to use for automatically calculating the plot area margin based ont the series.\n    */\n    get: function () {\n      return this.i.te;\n    },\n    set: function (v) {\n      this.i.te = ensureEnum(SeriesPlotAreaMarginVerticalMode_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginLeft\", {\n    /**\n     * Margin applied to the left of the plot area.\n    */\n    get: function () {\n      return this.i.uv;\n    },\n    set: function (v) {\n      this.i.uv = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginTop\", {\n    /**\n     * Margin applied above the plot area.\n    */\n    get: function () {\n      return this.i.ux;\n    },\n    set: function (v) {\n      this.i.ux = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginRight\", {\n    /**\n     * Margin applied to the right of the plot area.\n    */\n    get: function () {\n      return this.i.uw;\n    },\n    set: function (v) {\n      this.i.uw = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginBottom\", {\n    /**\n     * Margin applied below the plot area.\n    */\n    get: function () {\n      return this.i.uu;\n    },\n    set: function (v) {\n      this.i.uu = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrDataChart.prototype.findByName = function (name) {\n    var baseResult = _super.prototype.findByName.call(this, name);\n\n    if (baseResult) {\n      return baseResult;\n    }\n\n    if (this.axes != null && this.axes.findByName && this.axes.findByName(name)) {\n      return this.axes.findByName(name);\n    }\n\n    return null;\n  };\n\n  IgrDataChart.prototype.refreshComputedPlotAreaMargin = function () {\n    this.i.v8();\n  };\n\n  IgrDataChart.prototype.recalculateMarginAutoExpansion = function () {\n    this.i.v7();\n  };\n\n  IgrDataChart.prototype.recalculateAutoLabelsAngle = function () {\n    this.i.v6();\n  };\n  /**\n   * Notifies the chart that the CSS styles in effect have been updated.\n  \r\n  */\n\n\n  IgrDataChart.prototype.styleUpdated = function () {\n    this.i.v9();\n  };\n  /**\n   * Export serialized visual data.\n  \r\n  */\n\n\n  IgrDataChart.prototype.exportSerializedVisualData = function () {\n    var iv = this.i.vh();\n    return iv;\n  };\n\n  return IgrDataChart;\n}(IgrSeriesViewer);\n\nexport { IgrDataChart };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-data-chart.js"],"names":["__extends","React","ReactDOM","GridMode_$type","IgrSeriesViewer","ReactRenderer","ReactWrapper","TypeRegistrar","XamDataChart","CollectionAdapter","brushToString","stringToBrush","ensureBool","ensureEnum","NamePatcher","Axis","DataChartStylingDefaults","IgrDataContext","IgrSeriesCollection","NotifyCollectionChangedAction","IgrAxisCollection","ContentChildrenManager","SyncLinkManager","SyncLink","ComputedPlotAreaMarginMode_$type","AutoMarginsAndAngleUpdateMode_$type","SeriesPlotAreaMarginHorizontalMode_$type","SeriesPlotAreaMarginVerticalMode_$type","IgrDataChart","_super","props","_this","call","contentAxes","contentSeries","actualSeries","actualAxes","_series","_axes","_initialized","_axesAdapter","_seriesAdapter","_defaultTooltips","_uniqueTooltipId","_styling","ensureStylablePatched","Object","getPrototypeOf","_getMainRef","bind","_tooltipRef","_activeTooltipElements","Map","_activeTooltips","_currentTooltips","_contentChildrenManager","ch","key","name","_updateContentChildren","document","_container","createElement","style","display","width","height","root","ren","_wrapper","chart","i","_chart","axes","c","_provideRenderer","provideData","_dataSource","j","length","bindAxes","parentElement","series","owner","_ensureDefaultTooltip","_ensureTooltipCreated","provideContainer","addSizeWatcher","notifyContainerResized","defineProperty","prototype","get","_height","set","value","_elRef","enumerable","configurable","legend","externalObject","v","undefined","contentChildrenActual","$type","isAssignableFrom","push","notifyContentChanged","ref","render","children","getChildren","t","has","isRegistered","Tooltip","tEle","portal","createPortal","div","className","currentOwner","tooltipTemplate","template","componentDidMount","_width","appendChild","initializeContent","coll","inner","_innerColl","addListener","sender","e","action","Add","insertManualItem","newStartingIndex","newItems","item","Remove","removeManualItemAt","oldStartingIndex","Replace","Reset","clearManualItems","componentWillUnmount","destroy","createImplementation","bindData","currAxes","currSeries","d","create","_onDefaultTooltipsReady","createTooltip","ele","wrapper","updateToolTip","hideToolTip","tCont","cr","showDefaultTooltip","getNativeElement","slice","self","isSubContent","ext","_implementation","removeChild","dataContext","_updateTooltipState","setState","tooltips","syncChannel","newLink","instance","getLink","oldLink","actualSyncLink","releaseLink","syncSettings","synchronizeVertically","synchronizeHorizontally","ts","uz","u0","uk","ul","tq","tt","s6","tm","un","um","t0","tw","tz","t1","s1","w2","w0","w1","uh","uj","ui","ug","s4","tb","te","uv","ux","uw","uu","findByName","baseResult","refreshComputedPlotAreaMargin","v8","recalculateMarginAutoExpansion","v7","recalculateAutoLabelsAngle","v6","styleUpdated","v9","exportSerializedVisualData","iv","vh"],"mappings":"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","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { GridMode_$type } from './GridMode';\nimport { IgrSeriesViewer } from './igr-series-viewer';\nimport { ReactRenderer, ReactWrapper } from \"igniteui-react-core\";\nimport { TypeRegistrar } from \"igniteui-react-core\";\nimport { XamDataChart } from './XamDataChart';\nimport { CollectionAdapter, brushToString, stringToBrush, ensureBool, ensureEnum, NamePatcher } from \"igniteui-react-core\";\nimport { Axis } from './Axis';\nimport { DataChartStylingDefaults } from './DataChartStylingDefaults';\nimport { IgrDataContext } from \"igniteui-react-core\";\nimport { IgrSeriesCollection } from './igr-series-collection';\nimport { NotifyCollectionChangedAction } from \"igniteui-react-core\";\nimport { IgrAxisCollection } from './igr-axis-collection';\nimport { ContentChildrenManager } from \"igniteui-react-core\";\nimport { SyncLinkManager } from './SyncLinkManager';\nimport { SyncLink } from './SyncLink';\nimport { ComputedPlotAreaMarginMode_$type } from './ComputedPlotAreaMarginMode';\nimport { AutoMarginsAndAngleUpdateMode_$type } from './AutoMarginsAndAngleUpdateMode';\nimport { SeriesPlotAreaMarginHorizontalMode_$type } from './SeriesPlotAreaMarginHorizontalMode';\nimport { SeriesPlotAreaMarginVerticalMode_$type } from './SeriesPlotAreaMarginVerticalMode';\n/**\n * Represents a chart area containing axes, series, an optional legend and other hosted content.\n*/\nvar IgrDataChart = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrDataChart, _super);\n    function IgrDataChart(props) {\n        var _this = _super.call(this, props) || this;\n        _this.contentAxes = [];\n        _this.contentSeries = [];\n        /**\n         * The series actually present in the chart. Do not directly modify this array.\n         * This array's contents can be modified by causing React to reproject the child content.\n         * Or adding and removing series from the manual series collection on the series property.\n         */\n        _this.actualSeries = [];\n        /**\n         * The axes actually present in the chart. Do not directly modify this array.\n         * This array's contents can be modified by causing React to reproject the child content.\n         * Or adding and removing axes from the manual axes collection on the axes property.\n         */\n        _this.actualAxes = [];\n        _this._series = null;\n        _this._axes = null;\n        _this._initialized = false;\n        _this._axesAdapter = null;\n        _this._seriesAdapter = null;\n        _this._defaultTooltips = null;\n        _this._uniqueTooltipId = 0;\n        if (_this._styling) {\n            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(_this));\n        }\n        _this._getMainRef = _this._getMainRef.bind(_this);\n        _this._tooltipRef = _this._tooltipRef.bind(_this);\n        _this._activeTooltipElements = new Map();\n        _this._activeTooltips = new Map();\n        _this._currentTooltips = [];\n        _this._contentChildrenManager = new ContentChildrenManager(function (ch) { return ch.key || ch.props.name; }, function (ch) { return ch.key || ch.props.name; }, function () { return _this._updateContentChildren(); });\n        if (document) {\n            _this._container = document.createElement(\"div\");\n            _this._container.style.display = \"block\";\n            _this._container.style.width = \"100%\";\n            _this._container.style.height = \"100%\";\n        }\n        var root;\n        root = _this._container;\n        var ren = new ReactRenderer(root, document, true, DataChartStylingDefaults);\n        _this._wrapper = ren;\n        var chart = _this.i;\n        _this._chart = chart;\n        _this._axesAdapter = new CollectionAdapter(_this.contentAxes, _this.i.axes, _this.actualAxes, function (c) { return c.i; }, function (i) {\n            i._provideRenderer(_this._wrapper);\n            i.provideData(_this._dataSource);\n            for (var j = 0; j < _this.actualSeries.length; j++) {\n                _this.actualSeries[j].bindAxes(_this.actualAxes);\n            }\n            for (var j = 0; j < _this.actualAxes.length; j++) {\n                _this.actualAxes[j].bindAxes(_this.actualAxes);\n            }\n            if (_this._container && _this._container.parentElement) {\n                i._styling(_this._container, _this, _this);\n            }\n            //this._checkCrossing(); \n        }, function (i) { i._provideRenderer(null); i.provideData(null); });\n        _this._seriesAdapter = new CollectionAdapter(_this.contentSeries, _this.i.series, _this.actualSeries, function (c) { return c.i; }, function (i) {\n            i.owner = _this;\n            i._provideRenderer(_this._wrapper);\n            i.provideData(_this._dataSource);\n            if (_this._container && _this._container.parentElement) {\n                i._styling(_this._container, _this, _this);\n            }\n            i.bindAxes(_this.actualAxes);\n            _this._ensureDefaultTooltip(i);\n            _this._ensureTooltipCreated(i);\n        }, function (i) { i._provideRenderer(null); i.provideData(null); });\n        chart.provideContainer(ren);\n        ren.addSizeWatcher(function () {\n            _this._chart.notifyContainerResized();\n        });\n        _this._initialized = true;\n        return _this;\n    }\n    Object.defineProperty(IgrDataChart.prototype, \"height\", {\n        get: function () {\n            return this._height;\n        },\n        set: function (value) {\n            this._height = value;\n            if (this._elRef) {\n                this._elRef.style.height = value;\n                this._chart.notifyContainerResized();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"legend\", {\n        /**\n         * Gets or sets the legend used for the current chart.\n        */\n        get: function () {\n            if (this.i.legend != null)\n                return this.i.legend.externalObject;\n        },\n        set: function (v) {\n            if (v != undefined && v != null)\n                this.i.legend = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrDataChart.prototype._updateContentChildren = function () {\n        this.contentAxes.length = 0;\n        this.contentSeries.length = 0;\n        var contentChildrenActual = this._contentChildrenManager.contentChildrenActual;\n        for (var i = 0; i < contentChildrenActual.length; i++) {\n            if ((Axis.$type).isAssignableFrom(contentChildrenActual[i].i.$type)) {\n                this.contentAxes.push(contentChildrenActual[i]);\n            }\n            else {\n                this.contentSeries.push(contentChildrenActual[i]);\n            }\n        }\n        if (this._axesAdapter !== null) {\n            this._axesAdapter.notifyContentChanged();\n        }\n        if (this._seriesAdapter !== null) {\n            this._seriesAdapter.notifyContentChanged();\n        }\n    };\n    // private _childrenDiffer(children: any): boolean {\n    //     if (this._contentChildren === null) {\n    //         return true;\n    //     }\n    //     if (React.Children.count(children) != this._contentChildren.length) {\n    //         return true;\n    //     }\n    //     let arr = React.Children.toArray(children);\n    //     for (let i = 0; i < arr.length; i++) {\n    //         if ((arr[i] as any).props.name !== this._contentChildren[i].props.name) {\n    //             return true;\n    //         }\n    //     }\n    //     return false;\n    // }\n    IgrDataChart.prototype._getMainRef = function (ref) {\n        this._elRef = ref;\n    };\n    IgrDataChart.prototype.render = function () {\n        // if (!this._childrenDiffer(this.props.children)) {\n        // \tlet div = React.createElement(\"div\", {\n        // \t\tref: (ref) => {\n        // \t\t\tthis._elRef = ref;\n        // \t\t},\n        // \t\tchildren: this.props.children\n        // \t});\n        // \treturn div;\n        // } else {\n        var children = this._contentChildrenManager.getChildren(this.props.children);\n        //this._contentChildrenUnresolved = this._contentChildrenMap.size;\n        if (this._currentTooltips && this._currentTooltips.length > 0) {\n            //children = React.Children.toArray(this.props.children);\n            for (var i = 0; i < this._currentTooltips.length; i++) {\n                var t = this._currentTooltips[i];\n                if (this._activeTooltipElements.has(t)) {\n                    children.push(this._activeTooltipElements.get(t));\n                }\n                else {\n                    if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n                        continue;\n                    }\n                    var Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n                    var tEle = React.createElement(Tooltip, {\n                        ref: this._tooltipRef,\n                        key: this._currentTooltips[i].key,\n                        owner: this._currentTooltips[i]\n                    });\n                    var portal = ReactDOM.createPortal(tEle, t, this._currentTooltips[i].key);\n                    this._activeTooltipElements.set(t, portal);\n                    children.push(portal);\n                }\n            }\n        }\n        var div = React.createElement(\"div\", {\n            className: \"ig-data-chart igr-data-chart\",\n            ref: this._getMainRef,\n            children: children\n        });\n        return div;\n        //}\n    };\n    IgrDataChart.prototype._tooltipRef = function (t) {\n        //console.log(t);\n        if (t === null) {\n            return;\n        }\n        if (t.currentOwner &&\n            t.currentOwner.tooltipTemplate) {\n            t.template = t.currentOwner.tooltipTemplate;\n        }\n        this._activeTooltips.set(t.currentOwner, t);\n    };\n    IgrDataChart.prototype.componentDidMount = function () {\n        _super.prototype.componentDidMount.call(this);\n        this._elRef.style.width = this._width ? this._width : \"\";\n        this._elRef.style.height = this._height ? this._height : \"\";\n        this._elRef.appendChild(this._container);\n        this._chart.notifyContainerResized();\n        this.initializeContent();\n    };\n    Object.defineProperty(IgrDataChart.prototype, \"width\", {\n        get: function () {\n            return this._width;\n        },\n        set: function (value) {\n            this._width = value;\n            if (this._elRef) {\n                this._elRef.style.width = value;\n                this._chart.notifyContainerResized();\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"series\", {\n        /**\n         * A collection or manually added series for the chart.\n        */\n        get: function () {\n            var _this = this;\n            if (this._series === null) {\n                var coll = new IgrSeriesCollection();\n                var inner = coll._innerColl;\n                inner.addListener(function (sender, e) {\n                    switch (e.action) {\n                        case NotifyCollectionChangedAction.Add:\n                            _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Remove:\n                            _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            break;\n                        case NotifyCollectionChangedAction.Replace:\n                            _this._seriesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            _this._seriesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Reset:\n                            _this._seriesAdapter.clearManualItems();\n                            break;\n                    }\n                });\n                this._series = coll;\n            }\n            return this._series;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"axes\", {\n        /**\n         * A collection or manually added axes for the chart.\n        */\n        get: function () {\n            var _this = this;\n            if (this._axes === null) {\n                var coll = new IgrAxisCollection();\n                var inner = coll._innerColl;\n                inner.addListener(function (sender, e) {\n                    switch (e.action) {\n                        case NotifyCollectionChangedAction.Add:\n                            _this._axesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Remove:\n                            _this._axesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            break;\n                        case NotifyCollectionChangedAction.Replace:\n                            _this._axesAdapter.removeManualItemAt(e.oldStartingIndex);\n                            _this._axesAdapter.insertManualItem(e.newStartingIndex, e.newItems.item(0));\n                            break;\n                        case NotifyCollectionChangedAction.Reset:\n                            _this._axesAdapter.clearManualItems();\n                            break;\n                    }\n                });\n                this._axes = coll;\n            }\n            return this._axes;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrDataChart.prototype.componentWillUnmount = function () {\n        this._chart.destroy();\n        this._wrapper.destroy();\n    };\n    IgrDataChart.prototype.createImplementation = function () {\n        return new XamDataChart();\n    };\n    Object.defineProperty(IgrDataChart.prototype, \"dataSource\", {\n        get: function () {\n            return this._dataSource;\n        },\n        set: function (value) {\n            this._dataSource = value;\n            this.bindData();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrDataChart.prototype.bindData = function () {\n        //console.log(\"binding data: \" + this._dataSource);\n        if (this.actualAxes && this.actualAxes.length > 0) {\n            var currAxes = this.actualAxes;\n            for (var i = 0; i < currAxes.length; i++) {\n                currAxes[i].provideData(this._dataSource);\n            }\n        }\n        if (this.actualSeries && this.actualSeries.length > 0) {\n            var currSeries = this.actualSeries;\n            for (var i = 0; i < currSeries.length; i++) {\n                currSeries[i].provideData(this._dataSource);\n            }\n        }\n    };\n    IgrDataChart.prototype.initializeContent = function () {\n        if (TypeRegistrar.isRegistered(\"IgrDataChartDefaultTooltips\")) {\n            var d = TypeRegistrar.create(\"IgrDataChartDefaultTooltips\");\n            this._defaultTooltips = d;\n            this._onDefaultTooltipsReady(d);\n            //this._container.appendChild(cr.location.nativeElement);\n        }\n        this._styling(this._container, this);\n        if (this.actualAxes && this.actualAxes.length > 0) {\n            var currAxes = this.actualAxes;\n            for (var i = 0; i < currAxes.length; i++) {\n                currAxes[i]._styling(this._container, this, this);\n            }\n        }\n        if (this.actualSeries && this.actualSeries.length > 0) {\n            var currSeries = this.actualSeries;\n            for (var i = 0; i < currSeries.length; i++) {\n                currSeries[i]._styling(this._container, this, this);\n            }\n        }\n        this.i.notifyContainerResized();\n    };\n    //private _checkCrossing() {\n    //    let toBind: IgrAxis[] = [];\n    //    let byName = new Map<string, IgrAxis>();\n    //    for (let i = 0; i < this.actualAxes.length; i++) {\n    //        byName.set(this.actualAxes[i].name, this.actualAxes[i]);\n    //        if (this.actualAxes[i].crossingAxisName) {\n    //            toBind.push(this.actualAxes[i]);\n    //        }\n    //    }\n    //    for (let i = 0; i < toBind.length; i++) {\n    //        if (byName.has(toBind[i].crossingAxisName)) {\n    //            if (toBind[i].crossingAxis !== byName.get(toBind[i].crossingAxisName)) {\n    //                toBind[i].crossingAxis = byName.get(toBind[i].crossingAxisName);\n    //            }\n    //        }\n    //    }\n    //}\n    IgrDataChart.prototype._ensureTooltipCreated = function (series) {\n        var _this = this;\n        series._ensureTooltipCreated(function () { return _this.createTooltip(); }, function (ele) {\n            var wrapper = new ReactWrapper(ele, _this._wrapper);\n            wrapper.updateToolTip = ele.updateToolTip;\n            wrapper.hideToolTip = ele.hideToolTip;\n            if (_this._activeTooltips.has(ele)) {\n                var tCont = _this._activeTooltips.get(ele);\n                tCont.template = ele.tooltipTemplate;\n            }\n            return wrapper;\n        });\n    };\n    IgrDataChart.prototype._ensureDefaultTooltip = function (series) {\n        if (this._defaultTooltips == null) {\n            return;\n        }\n        this._defaultTooltips[\"ensureDefaultTooltip\"](series);\n    };\n    IgrDataChart.prototype._onDefaultTooltipsReady = function (cr) {\n        if (this.actualSeries && this.actualSeries.length > 0) {\n            var currSeries = this.actualSeries;\n            for (var i = 0; i < currSeries.length; i++) {\n                if (currSeries[i].showDefaultTooltip) {\n                    this._ensureDefaultTooltip(currSeries[i]);\n                }\n            }\n        }\n    };\n    IgrDataChart.prototype.createTooltip = function () {\n        // if (!TypeRegistrar.isRegistered(\"IgrTooltipContainer\")) {\n        // \treturn null;\n        // }\n        // let Tooltip = TypeRegistrar.get(\"IgrTooltipContainer\");\n        var wrapper = this._wrapper.createElement(\"div\");\n        var ele = wrapper.getNativeElement();\n        ele.key = \"__tooltip_\" + this._uniqueTooltipId;\n        this._uniqueTooltipId++;\n        this._currentTooltips = this._currentTooltips.slice(0);\n        this._currentTooltips.push(ele);\n        //let element = React.createElement(Tooltip,  );\n        //let portal = ReactDOM.createPortal(element, ele);\n        var self = this;\n        ele.updateToolTip = function (c, isSubContent) {\n            if (c.externalObject) {\n                c = c.externalObject;\n            }\n            else {\n                var ext = new IgrDataContext();\n                ext._implementation = c;\n                c = ext;\n            }\n            if (!isSubContent) {\n                if (ele.parentElement != self._container) {\n                    if (ele.parentElement != null) {\n                        ele.parentElement.removeChild(ele);\n                    }\n                    self._container.appendChild(ele);\n                }\n            }\n            else {\n                c.isSubContent = true;\n            }\n            if (self._activeTooltips.has(ele)) {\n                var t = self._activeTooltips.get(ele);\n                t.dataContext = c;\n            }\n            ele.style.display = \"block\";\n            return true;\n        };\n        ele.hideToolTip = function () {\n            ele.style.display = \"none\";\n        };\n        ele.style.display = \"none\";\n        this._updateTooltipState();\n        return ele;\n    };\n    IgrDataChart.prototype._updateTooltipState = function () {\n        if (this._initialized) {\n            this.setState({ tooltips: this._currentTooltips });\n        }\n    };\n    Object.defineProperty(IgrDataChart.prototype, \"syncChannel\", {\n        /**\n         * Gets or sets the channel with which to synchronize.\n        *\n        * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n        */\n        get: function () {\n            return this.i.syncChannel;\n        },\n        set: function (v) {\n            var newLink = null;\n            if (v && v.length > 0) {\n                newLink = SyncLinkManager.instance().getLink(v);\n            }\n            var oldLink = this.i.actualSyncLink;\n            if (oldLink) {\n                SyncLinkManager.instance().releaseLink(oldLink);\n            }\n            if (newLink) {\n                this.i.actualSyncLink = newLink;\n            }\n            else {\n                this.i.actualSyncLink = new SyncLink();\n            }\n            this.i.syncChannel = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"synchronizeVertically\", {\n        /**\n         * Gets or sets the bool used to display the window preview shadow.\n        *\n        * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n        */\n        get: function () {\n            return this.i.syncSettings ? this.i.syncSettings.synchronizeVertically : false;\n        },\n        set: function (v) {\n            this.i.syncSettings.synchronizeVertically = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"synchronizeHorizontally\", {\n        /**\n         * Gets or sets the bool used to display the window preview shadow.\n        *\n        * Synchronization is the coordination of zooming, panning and crosshairs events between multiple charts. Multiple chart controls can be synchronized horizontally (along X-Axis), vertically (along Y-Axis), or both. If you want to synchronize a set of charts, assign them the same name to the `syncChannel` and then specify whether or not synchronize chart horizontally and/or vertically.\n        */\n        get: function () {\n            return this.i.syncSettings ? this.i.syncSettings.synchronizeHorizontally : false;\n        },\n        set: function (v) {\n            this.i.syncSettings.synchronizeHorizontally = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"i\", {\n        /**\n                                 * @hidden\n                                 */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"isSquare\", {\n        /**\n     * Gets or sets whether to use a square aspect ratio for the chart. This is locked to true for polar and radial charts.\n    *\n    * Set `isSquare` to true to constrain the chart to a square, using the minimum of its height and width.\n    *\n    * ```ts\n    *  this.chart.isSquare=\"True\";\n    * ```\n    *\n    * ```ts\n    *  <IgrDataChart\n    * \tIsHorizontalZoomEnabled=\"True\"\n    *     dataSource={this.state.dataSource} >\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" />\n    *     <IgrNumericYAxis name=\"yAxis\" />\n    *\n    *     <IgrColumnSeries\n    *      name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    * \tyAxisName=\"yAxis\"\n    * \tvalueMemberPath=\"Value\" />\n    *  </IgrDataChart>\n    * ```\n    */\n        get: function () {\n            return this.i.ts;\n        },\n        set: function (v) {\n            this.i.ts = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"windowScaleHorizontal\", {\n        /**\n         * A number between 0 and 1 determining the scale of the horizontal zoom.\n         * This property is effectively a shortcut to the Width of the WindowRect property.\n        *\n        * To programmatically change the horizontal zoom level, set `windowScaleHorizontal` to a value between 0 and 1.\n        *\n        * ```ts\n        * this.chart.windowScaleHorizontal=\"0.75\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \twindowScaleHorizontal=\"0.75\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.uz;\n        },\n        set: function (v) {\n            this.i.uz = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"windowScaleVertical\", {\n        /**\n         * A number between 0 and 1 determining the scale of the vertical zoom.\n         * This property is effectively a shortcut to the Height of the WindowRect property.\n        *\n        * To programmatically change the vertical zoom level, set `windowScaleVertical` to a value between 0 and 1.\n        *\n        * ```ts\n        * this.chart.windowScaleVertical=\"0.75\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \twindowScaleVertical=\"0.75\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.u0;\n        },\n        set: function (v) {\n            this.i.u0 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"actualWindowScaleHorizontal\", {\n        /**\n         * A number between 0 and 1 determining the scale of the horizontal zoom.\n         * This property is effectively a shortcut to the Width of the ActualWindowRect property.\n        */\n        get: function () {\n            return this.i.uk;\n        },\n        set: function (v) {\n            this.i.uk = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"actualWindowScaleVertical\", {\n        /**\n         * A number between 0 and 1 determining the scale of the vertical zoom.\n         * This property is effectively a shortcut to the Height of the ActualWindowRect property.\n        */\n        get: function () {\n            return this.i.ul;\n        },\n        set: function (v) {\n            this.i.ul = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"isHorizontalZoomEnabled\", {\n        /**\n         * Gets or sets horizontal zoomability of the current control\n        *\n        * Set `isHorizontalZoomEnabled` to enable or disable horizontal zooming.\n        *\n        * ```ts\n        * this.chart.IsHorizontalZoomEnabled= true;\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \tIsHorizontalZoomEnabled=\"True\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.tq;\n        },\n        set: function (v) {\n            this.i.tq = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"isVerticalZoomEnabled\", {\n        /**\n         * Gets or sets vertical zoomability of the current control\n        *\n        * Set `isVerticalZoomEnabled` to enable or disable vertical zooming.\n        *\n        * ```ts\n        * this.chart.isVerticalZoomEnabled=\"True\";\n        * ```\n        *\n        * ```ts\n        *  <IgrDataChart\n        * \tIsVerticalZoomEnabled=\"True\"\n        *     dataSource={this.state.dataSource} >\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" />\n        *     <IgrNumericYAxis name=\"yAxis\" />\n        *\n        *     <IgrColumnSeries\n        *      name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        * \tyAxisName=\"yAxis\"\n        * \tvalueMemberPath=\"Value\" />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.tt;\n        },\n        set: function (v) {\n            this.i.tt = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"gridMode\", {\n        /**\n         * Gets or sets how grid lines are rendered in relation to series.\n        *\n        *  Try setting the `gridMode` property to bring your grid lines in front of the data series.\n        */\n        get: function () {\n            return this.i.s6;\n        },\n        set: function (v) {\n            this.i.s6 = ensureEnum(GridMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"alignsGridLinesToPixels\", {\n        /**\n         * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.\n        */\n        get: function () {\n            return this.i.tm;\n        },\n        set: function (v) {\n            this.i.tm = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"autoExpandMarginMaximumValue\", {\n        /**\n         * Gets or sets the maximum amount the series viewer should auto expand margins to accomodate the initial horizontal axis labels.\n        */\n        get: function () {\n            return this.i.un;\n        },\n        set: function (v) {\n            this.i.un = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"autoExpandMarginExtraPadding\", {\n        /**\n         * Gets or sets the extra amount the series viewer should auto expand margins to accomodate the initial horizontal axis labels.\n        */\n        get: function () {\n            return this.i.um;\n        },\n        set: function (v) {\n            this.i.um = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"shouldSuppressAxisLabelTruncation\", {\n        /**\n         * Gets or sets a whether the series viewer should suppress truncation of axis labels.\n        */\n        get: function () {\n            return this.i.t0;\n        },\n        set: function (v) {\n            this.i.t0 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"shouldAutoExpandMarginForInitialLabels\", {\n        /**\n         * Gets or sets a whether the series viewer should auto expand margins to accomodate the initial horizontal axis labels.\n        */\n        get: function () {\n            return this.i.tw;\n        },\n        set: function (v) {\n            this.i.tw = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"shouldConsiderAutoRotationForInitialLabels\", {\n        /**\n         * Gets or sets a whether the series viewer should consider auto rotating labels to fit them in the initial view. This implies that ShouldAutoExpandMarginForInitialLabels is true.\n        */\n        get: function () {\n            return this.i.tz;\n        },\n        set: function (v) {\n            this.i.tz = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"suppressAutoMarginAndAngleRecalculation\", {\n        /**\n         * Gets or sets a whether the series viewer should suppress auto recalculating margin and axis label angles.\n        */\n        get: function () {\n            return this.i.t1;\n        },\n        set: function (v) {\n            this.i.t1 = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"autoMarginAndAngleUpdateMode\", {\n        /**\n         * Gets or sets a whether the series viewer should consider auto rotating labels to fit them in the initial view. This implies that ShouldAutoExpandMarginForInitialLabels is true.\n        */\n        get: function () {\n            return this.i.s1;\n        },\n        set: function (v) {\n            this.i.s1 = ensureEnum(AutoMarginsAndAngleUpdateMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"defaultAxisStroke\", {\n        /**\n         * Gets or sets the DefaultAxisStroke property.\n         * The DefaultAxisStroke property defines the brush which is used by the axes when no\n         * Axis.Stroke is set.\n        */\n        get: function () {\n            return brushToString(this.i.w2);\n        },\n        set: function (v) {\n            this.i.w2 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"defaultAxisMajorStroke\", {\n        /**\n         * Gets or sets the DefaultAxisMajorStroke property.\n         * The DefaultAxisMajorStroke property defines the brush which is used by the axes when no\n         * Axis.MajorStroke is set.\n        */\n        get: function () {\n            return brushToString(this.i.w0);\n        },\n        set: function (v) {\n            this.i.w0 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"defaultAxisMinorStroke\", {\n        /**\n         * Gets or sets the DefaultAxisMinorStroke property.\n         * The DefaultAxisMinorStroke property defines the brush which is used by the axes when no\n         * Axis.MinorStroke is set.\n        */\n        get: function () {\n            return brushToString(this.i.w1);\n        },\n        set: function (v) {\n            this.i.w1 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"actualPlotAreaMarginLeft\", {\n        /**\n         * Gets the actual resolved left plot area margin;\n        */\n        get: function () {\n            return this.i.uh;\n        },\n        set: function (v) {\n            this.i.uh = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"actualPlotAreaMarginTop\", {\n        /**\n         * Gets the actual resolved top plot area margin;\n        */\n        get: function () {\n            return this.i.uj;\n        },\n        set: function (v) {\n            this.i.uj = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"actualPlotAreaMarginRight\", {\n        /**\n         * Gets the actual resolved right plot area margin;\n        */\n        get: function () {\n            return this.i.ui;\n        },\n        set: function (v) {\n            this.i.ui = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"actualPlotAreaMarginBottom\", {\n        /**\n         * Gets the actual resolved bottom plot area margin;\n        */\n        get: function () {\n            return this.i.ug;\n        },\n        set: function (v) {\n            this.i.ug = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"computedPlotAreaMarginMode\", {\n        /**\n         * Gets or sets mode to use for automatically calculating the plot area margin.\n        */\n        get: function () {\n            return this.i.s4;\n        },\n        set: function (v) {\n            this.i.s4 = ensureEnum(ComputedPlotAreaMarginMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"seriesPlotAreaMarginHorizontalMode\", {\n        /**\n         * Gets or sets horizontal mode to use for automatically calculating the plot area margin based ont the series.\n        */\n        get: function () {\n            return this.i.tb;\n        },\n        set: function (v) {\n            this.i.tb = ensureEnum(SeriesPlotAreaMarginHorizontalMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"seriesPlotAreaMarginVerticalMode\", {\n        /**\n         * Gets or sets vertical mode to use for automatically calculating the plot area margin based ont the series.\n        */\n        get: function () {\n            return this.i.te;\n        },\n        set: function (v) {\n            this.i.te = ensureEnum(SeriesPlotAreaMarginVerticalMode_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginLeft\", {\n        /**\n         * Margin applied to the left of the plot area.\n        */\n        get: function () {\n            return this.i.uv;\n        },\n        set: function (v) {\n            this.i.uv = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginTop\", {\n        /**\n         * Margin applied above the plot area.\n        */\n        get: function () {\n            return this.i.ux;\n        },\n        set: function (v) {\n            this.i.ux = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginRight\", {\n        /**\n         * Margin applied to the right of the plot area.\n        */\n        get: function () {\n            return this.i.uw;\n        },\n        set: function (v) {\n            this.i.uw = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrDataChart.prototype, \"plotAreaMarginBottom\", {\n        /**\n         * Margin applied below the plot area.\n        */\n        get: function () {\n            return this.i.uu;\n        },\n        set: function (v) {\n            this.i.uu = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrDataChart.prototype.findByName = function (name) {\n        var baseResult = _super.prototype.findByName.call(this, name);\n        if (baseResult) {\n            return baseResult;\n        }\n        if (this.axes != null && this.axes.findByName && this.axes.findByName(name)) {\n            return this.axes.findByName(name);\n        }\n        return null;\n    };\n    IgrDataChart.prototype.refreshComputedPlotAreaMargin = function () {\n        this.i.v8();\n    };\n    IgrDataChart.prototype.recalculateMarginAutoExpansion = function () {\n        this.i.v7();\n    };\n    IgrDataChart.prototype.recalculateAutoLabelsAngle = function () {\n        this.i.v6();\n    };\n    /**\n     * Notifies the chart that the CSS styles in effect have been updated.\n    \r\n    */\n    IgrDataChart.prototype.styleUpdated = function () {\n        this.i.v9();\n    };\n    /**\n     * Export serialized visual data.\n    \r\n    */\n    IgrDataChart.prototype.exportSerializedVisualData = function () {\n        var iv = this.i.vh();\n        return (iv);\n    };\n    return IgrDataChart;\n}(IgrSeriesViewer));\nexport { IgrDataChart };\n"]},"metadata":{},"sourceType":"module"}