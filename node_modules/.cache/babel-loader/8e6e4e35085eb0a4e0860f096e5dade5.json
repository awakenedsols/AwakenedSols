{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { PriceVolumeTrendIndicator } from \"./PriceVolumeTrendIndicator\";\n/**\n * Represents a IgxDataChartComponent Price Volume Trend Indicator series.\n * Default required members: Volume, Close\n*\n* You can use the `IgrPriceVolumeTrendIndicator` to measure money flow by adding or subtracting a portion of the daily volume.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*    <IgrPriceVolumeTrendIndicator\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPriceVolumeTrendIndicator({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* series.volumeMemberPath=\"Volume\" ;\n* ```\n*/\n\nvar IgrPriceVolumeTrendIndicator =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrPriceVolumeTrendIndicator, _super);\n\n  function IgrPriceVolumeTrendIndicator(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrPriceVolumeTrendIndicator.prototype.createImplementation = function () {\n    return new PriceVolumeTrendIndicator();\n  };\n\n  Object.defineProperty(IgrPriceVolumeTrendIndicator.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrPriceVolumeTrendIndicator;\n}(IgrStrategyBasedIndicator);\n\nexport { IgrPriceVolumeTrendIndicator };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-price-volume-trend-indicator.js"],"names":["__extends","IgrStrategyBasedIndicator","PriceVolumeTrendIndicator","IgrPriceVolumeTrendIndicator","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AACA,SAASC,yBAAT,QAA0C,6BAA1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,4BAA4B;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;AAC9EJ,EAAAA,SAAS,CAACG,4BAAD,EAA+BC,MAA/B,CAAT;;AACA,WAASD,4BAAT,CAAsCE,KAAtC,EAA6C;AACzC,WAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;AACH;;AACDF,EAAAA,4BAA4B,CAACI,SAA7B,CAAuCC,oBAAvC,GAA8D,YAAY;AACtE,WAAO,IAAIN,yBAAJ,EAAP;AACH,GAFD;;AAGAO,EAAAA,MAAM,CAACC,cAAP,CAAsBP,4BAA4B,CAACI,SAAnD,EAA8D,GAA9D,EAAmE;AAC/D;AACR;AACA;AACQI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKC,eAAZ;AACH,KAN8D;AAO/DC,IAAAA,UAAU,EAAE,KAPmD;AAQ/DC,IAAAA,YAAY,EAAE;AARiD,GAAnE;AAUA,SAAOX,4BAAP;AACH,CAnB+D,CAmB9DF,yBAnB8D,CAAhE;;AAoBA,SAASE,4BAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { PriceVolumeTrendIndicator } from \"./PriceVolumeTrendIndicator\";\n/**\n * Represents a IgxDataChartComponent Price Volume Trend Indicator series.\n * Default required members: Volume, Close\n*\n* You can use the `IgrPriceVolumeTrendIndicator` to measure money flow by adding or subtracting a portion of the daily volume.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*    <IgrPriceVolumeTrendIndicator\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPriceVolumeTrendIndicator({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* series.volumeMemberPath=\"Volume\" ;\n* ```\n*/\nvar IgrPriceVolumeTrendIndicator = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrPriceVolumeTrendIndicator, _super);\n    function IgrPriceVolumeTrendIndicator(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrPriceVolumeTrendIndicator.prototype.createImplementation = function () {\n        return new PriceVolumeTrendIndicator();\n    };\n    Object.defineProperty(IgrPriceVolumeTrendIndicator.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrPriceVolumeTrendIndicator;\n}(IgrStrategyBasedIndicator));\nexport { IgrPriceVolumeTrendIndicator };\n"]},"metadata":{},"sourceType":"module"}