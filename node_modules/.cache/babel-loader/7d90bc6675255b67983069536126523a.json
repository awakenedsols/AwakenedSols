{"ast":null,"code":"var _jsxFileName = \"/Users/genesisbarrios/Documents/coding/Thug Rugs/ThugRugzClient/src/HoverRugz.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Button, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport './HoverRugz.css';\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { getParsedNftAccountsByOwner } from \"@nfteyez/sol-rayz\";\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\nimport { getCandyMachineState } from \"./candy-machine\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)``;\n_c = ConnectButton;\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\n_c2 = MintContainer;\nconst MintButton = styled(Button)``; // add your styles here\n\nconst HoverRugz = props => {\n  _s();\n\n  const [balance, setBalance] = useState();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: \"\",\n    severity: undefined\n  });\n  let mintedItems = undefined;\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState();\n\n  const getAllNftData = async () => {\n    try {\n      if (wallet) {\n        let ownerToken = wallet.publicKey;\n        const nfts = await getParsedNftAccountsByOwner({\n          publicAddress: ownerToken,\n          connection: props.connection\n        });\n        return nfts;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  }; //Function to get all nft data\n\n\n  const getNftTokenData = async () => {\n    try {\n      let nftData = await getAllNftData();\n      let nftArray = [];\n\n      if (nftData) {\n        for (var x = 0; x < nftData.length; x++) {\n          nftArray.push({\n            name: nftData[x].data.name,\n            uri: nftData[x].data.uri\n          }); //console.log(nftArray[x]);\n        }\n      }\n\n      return nftArray;\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed\n      } = await getCandyMachineState(wallet, props.candyMachineId, props.connection);\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n        mintedItems = await getNftTokenData().then(res => mintedItems = res);\n        console.log(mintedItems);\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n  useEffect(refreshCandyMachineState, [wallet, props.candyMachineId, props.connection]);\n  var block = document.getElementById(\"block\");\n  var hole = document.getElementById(\"hole\");\n  var character = document.querySelector(\"#character\");\n\n  function blockAnimations() {\n    hole === null || hole === void 0 ? void 0 : hole.addEventListener('animationiteration', () => {\n      var random = -(Math.random() * 600 + 150);\n      hole === null || hole === void 0 ? void 0 : hole.setAttribute(\"style\", \"top:\" + random + \"px;\");\n    });\n  }\n\n  function gravity() {\n    setInterval(function () {\n      var characterTop;\n\n      if (character) {\n        characterTop = parseInt(getComputedStyle(character).getPropertyValue(\"top\"));\n        character === null || character === void 0 ? void 0 : character.setAttribute(\"style\", \"top:\" + (characterTop + 5) + \"px\");\n      }\n    }, 10);\n  }\n\n  blockAnimations();\n  gravity();\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(MintContainer, {\n      children: !wallet ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"city\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"connectButton\",\n          children: /*#__PURE__*/_jsxDEV(ConnectButton, {\n            id: \"button\",\n            children: \"Connect Wallet\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 44\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"game\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"block\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"hole\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"character\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertState.open,\n      autoHideDuration: 6000,\n      onClose: () => setAlertState({ ...alertState,\n        open: false\n      }),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        severity: alertState.severity,\n        children: alertState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n      children: \"blockAnimations();\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HoverRugz, \"yHayHpgobvE+v8EDXLv1P69gkss=\", false, function () {\n  return [useAnchorWallet];\n});\n\n_c3 = HoverRugz;\nexport default HoverRugz;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"MintContainer\");\n$RefreshReg$(_c3, \"HoverRugz\");","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/Thug Rugs/ThugRugzClient/src/HoverRugz.tsx"],"names":["useEffect","useState","styled","Button","Snackbar","Alert","LAMPORTS_PER_SOL","getParsedNftAccountsByOwner","useAnchorWallet","WalletDialogButton","getCandyMachineState","ConnectButton","CounterText","span","MintContainer","div","MintButton","HoverRugz","props","balance","setBalance","isActive","setIsActive","isSoldOut","setIsSoldOut","isMinting","setIsMinting","itemsAvailable","setItemsAvailable","itemsRedeemed","setItemsRedeemed","itemsRemaining","setItemsRemaining","alertState","setAlertState","open","message","severity","undefined","mintedItems","startDate","setStartDate","Date","wallet","candyMachine","setCandyMachine","getAllNftData","ownerToken","publicKey","nfts","publicAddress","connection","error","console","log","getNftTokenData","nftData","nftArray","x","length","push","name","data","uri","refreshCandyMachineState","goLiveDate","candyMachineId","getBalance","then","res","block","document","getElementById","hole","character","querySelector","blockAnimations","addEventListener","random","Math","setAttribute","gravity","setInterval","characterTop","parseInt","getComputedStyle","getPropertyValue"],"mappings":"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","sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport Countdown from \"react-countdown\";\nimport { Button, CircularProgress, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport './HoverRugz.css';\n\nimport * as anchor from \"@project-serum/anchor\";\n\nimport { LAMPORTS_PER_SOL } from \"@solana/web3.js\";\nimport { TokenAccountsFilter } from \"@solana/web3.js\";\nimport * as web3js from \"@solana/web3.js\";\nimport axios from \"axios\";\nimport { getParsedNftAccountsByOwner,isValidSolanaAddress, createConnectionConfig,} from \"@nfteyez/sol-rayz\";\n\nimport { useAnchorWallet } from \"@solana/wallet-adapter-react\";\nimport { WalletDialogButton } from \"@solana/wallet-adapter-material-ui\";\n\nimport Typewriter from \"typewriter-effect\";\n\nimport {\n  CandyMachine,\n  awaitTransactionSignatureConfirmation,\n  getCandyMachineState,\n  mintOneToken,\n  shortenAddress,\n} from \"./candy-machine\";\nimport { Filter } from \"@material-ui/icons\";\nimport { TOKEN_PROGRAM_ID } from \"@solana/spl-token\";\n\nconst ConnectButton = styled(WalletDialogButton)``;\n\nconst CounterText = styled.span``; // add your styles here\n\nconst MintContainer = styled.div``; // add your styles here\n\nconst MintButton = styled(Button)``; // add your styles here\n\nexport interface HoverRugzProps {\n  candyMachineId: anchor.web3.PublicKey;\n  config: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  startDate: number;\n  treasury: anchor.web3.PublicKey;\n  txTimeout: number;\n}\n\nconst HoverRugz = (props: HoverRugzProps) => {\n  const [balance, setBalance] = useState<number>();\n  const [isActive, setIsActive] = useState(false); // true when countdown completes\n  const [isSoldOut, setIsSoldOut] = useState(false); // true when items remaining is zero\n  const [isMinting, setIsMinting] = useState(false); // true when user got to press MINT\n\n  const [itemsAvailable, setItemsAvailable] = useState(0);\n  const [itemsRedeemed, setItemsRedeemed] = useState(0);\n  const [itemsRemaining, setItemsRemaining] = useState(0);\n\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: \"\",\n    severity: undefined,\n  });\n  \n  let mintedItems : any[] | undefined = undefined;\n\n  const [startDate, setStartDate] = useState(new Date(props.startDate));\n\n  const wallet = useAnchorWallet();\n  const [candyMachine, setCandyMachine] = useState<CandyMachine>();\n\n  const getAllNftData = async () => {\n    try {\n      if(wallet){\n        let ownerToken = wallet.publicKey;\n        const nfts = await getParsedNftAccountsByOwner({\n          publicAddress: ownerToken,\n          connection: props.connection\n        });\n        return nfts;\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  \n//Function to get all nft data\nconst getNftTokenData = async () => {\n  try {\n      let nftData = await getAllNftData();\n      let nftArray = []\n      if(nftData){\n        for(var x=0; x<nftData.length; x++){\n          nftArray.push({name: nftData[x].data.name, uri: nftData[x].data.uri})\n          //console.log(nftArray[x]);\n        }\n      }\n      return nftArray;\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst refreshCandyMachineState = () => {\n    (async () => {\n      if (!wallet) return;\n\n      const {\n        candyMachine,\n        goLiveDate,\n        itemsAvailable,\n        itemsRemaining,\n        itemsRedeemed,\n      } = await getCandyMachineState(\n        wallet as anchor.Wallet,\n        props.candyMachineId,\n        props.connection\n      );\n\n      setItemsAvailable(itemsAvailable);\n      setItemsRemaining(itemsRemaining);\n      setItemsRedeemed(itemsRedeemed);\n\n      setIsSoldOut(itemsRemaining === 0);\n      setStartDate(goLiveDate);\n      setCandyMachine(candyMachine);\n    })();\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (wallet) {\n        const balance = await props.connection.getBalance(wallet.publicKey);\n\n        \n        mintedItems = await getNftTokenData().then(res => (mintedItems = res));\n        console.log(mintedItems)\n        setBalance(balance / LAMPORTS_PER_SOL);\n      }\n    })();\n  }, [wallet, props.connection]);\n\n  useEffect(refreshCandyMachineState, [\n    wallet,\n    props.candyMachineId,\n    props.connection,\n  ]);\n\n  var block = document.getElementById(\"block\");\n  var hole = document.getElementById(\"hole\");\n  var character = document.querySelector(\"#character\");\n\n  function blockAnimations(){\n    hole?.addEventListener('animationiteration', () => {\n      var random = -((Math.random()*600) + 150);\n      hole?.setAttribute(\"style\", \"top:\" + random + \"px;\")\n    });\n  }\n\n  function gravity(){\n    setInterval(function(){\n      var characterTop;\n      if(character) {\n        characterTop = parseInt(getComputedStyle(character).getPropertyValue(\"top\"));\n        character?.setAttribute(\"style\", \"top:\" + (characterTop + 5) + \"px\" )\n    }\n    }, 10);\n  }\n\n  blockAnimations();\n  gravity();\n  \n\n\n  return (\n    <main>\n      \n      {/* {wallet && <p>Balance: {(balance || 0).toLocaleString()} SOL</p>} */}\n      \n      \n      <MintContainer>\n        {!wallet ? (\n            <div className=\"city\">\n            <div className=\"connectButton\"><ConnectButton id=\"button\">Connect Wallet</ConnectButton></div>\n            </div>\n        ) : (\n            <div id=\"game\">\n                <div id=\"block\"></div>\n                <div id=\"hole\"></div>\n                <div id=\"character\"></div>\n            </div>\n           \n        )}\n        </MintContainer>\n\n        <Snackbar\n            open={alertState.open}\n            autoHideDuration={6000}\n            onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n            <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n            >\n            {alertState.message}\n            </Alert>\n        </Snackbar>\n        <script>\n          \n        blockAnimations();\n        </script>\n    </main>\n  );\n};\n\ninterface AlertState {\n  open: boolean;\n  message: string;\n  severity: \"success\" | \"info\" | \"warning\" | \"error\" | undefined;\n}\n\nexport default HoverRugz;\n"]},"metadata":{},"sourceType":"module"}