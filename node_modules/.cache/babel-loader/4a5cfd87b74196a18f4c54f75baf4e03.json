{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base.mjs';\nimport { u128 } from './bigint.mjs';\nexport var WAD = new BigNumber('1e+18');\nexport var decimal = function decimal(property) {\n  var layout = u128(property);\n\n  var _encodeDecode = encodeDecode(layout),\n      encode = _encodeDecode.encode,\n      decode = _encodeDecode.decode;\n\n  var decimalLayout = layout;\n\n  decimalLayout.decode = function (buffer, offset) {\n    var src = decode(buffer, offset).toString();\n    return new BigNumber(src).div(WAD);\n  };\n\n  decimalLayout.encode = function (decimal, buffer, offset) {\n    var src = BigInt(decimal.times(WAD).integerValue().toString());\n    return encode(src, buffer, offset);\n  };\n\n  return decimalLayout;\n};","map":{"version":3,"sources":["../../src/decimal.ts"],"names":[],"mappings":"AACA,OAAO,SAAP,MAAsB,cAAtB;AACA,SAAS,YAAT,QAA6B,YAA7B;AACA,SAAS,IAAT,QAAqB,cAArB;AAEA,OAAO,IAAM,GAAG,GAAG,IAAI,SAAJ,CAAc,OAAd,CAAZ;AAEP,OAAO,IAAM,OAAO,GAAG,SAAV,OAAU,CAAC,QAAD,EAAyC;AAC5D,MAAM,MAAM,GAAG,IAAI,CAAC,QAAD,CAAnB;;AAD4D,sBAEjC,YAAY,CAAC,MAAD,CAFqB;AAAA,MAEpD,MAFoD,iBAEpD,MAFoD;AAAA,MAE5C,MAF4C,iBAE5C,MAF4C;;AAI5D,MAAM,aAAa,GAAG,MAAtB;;AAEA,EAAA,aAAa,CAAC,MAAd,GAAuB,UAAC,MAAD,EAAiB,MAAjB,EAAmC;AACtD,QAAM,GAAG,GAAG,MAAM,CAAC,MAAD,EAAS,MAAT,CAAN,CAAuB,QAAvB,EAAZ;AACA,WAAO,IAAI,SAAJ,CAAc,GAAd,EAAmB,GAAnB,CAAuB,GAAvB,CAAP;AACH,GAHD;;AAKA,EAAA,aAAa,CAAC,MAAd,GAAuB,UAAC,OAAD,EAAqB,MAArB,EAAqC,MAArC,EAAuD;AAC1E,QAAM,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,KAAR,CAAc,GAAd,EAAmB,YAAnB,GAAkC,QAAlC,EAAD,CAAlB;AACA,WAAO,MAAM,CAAC,GAAD,EAAM,MAAN,EAAc,MAAd,CAAb;AACH,GAHD;;AAKA,SAAO,aAAP;AACH,CAjBM","sourceRoot":"","sourcesContent":["import BigNumber from 'bignumber.js';\nimport { encodeDecode } from './base.mjs';\nimport { u128 } from './bigint.mjs';\nexport const WAD = new BigNumber('1e+18');\nexport const decimal = (property) => {\n    const layout = u128(property);\n    const { encode, decode } = encodeDecode(layout);\n    const decimalLayout = layout;\n    decimalLayout.decode = (buffer, offset) => {\n        const src = decode(buffer, offset).toString();\n        return new BigNumber(src).div(WAD);\n    };\n    decimalLayout.encode = (decimal, buffer, offset) => {\n        const src = BigInt(decimal.times(WAD).integerValue().toString());\n        return encode(src, buffer, offset);\n    };\n    return decimalLayout;\n};\n//# sourceMappingURL=decimal.js.map"]},"metadata":{},"sourceType":"module"}