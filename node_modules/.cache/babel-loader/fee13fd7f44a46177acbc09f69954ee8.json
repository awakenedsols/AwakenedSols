{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { SegmentData } from \"./SegmentData\";\nimport { PointData } from \"./PointData\";\nimport { markType } from \"./type\";\n/**\n * @hidden\n */\n\nvar LineSegmentData =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(LineSegmentData, _super);\n\n  function LineSegmentData(a) {\n    var _rest = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      _rest[_i - 1] = arguments[_i];\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._point = null;\n    a = a == void 0 ? 0 : a;\n\n    switch (a) {\n      case 0:\n        {\n          _this.point = new PointData(NaN, NaN);\n        }\n        break;\n\n      case 1:\n        {\n          var c = _rest[0];\n          _this.point = PointData.b(c.c);\n        }\n        break;\n    }\n\n    return _this;\n  }\n\n  LineSegmentData.prototype.get_type = function () {\n    return \"Line\";\n  };\n\n  Object.defineProperty(LineSegmentData.prototype, \"type\", {\n    get: function () {\n      return this.get_type();\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LineSegmentData.prototype, \"point\", {\n    get: function () {\n      return this._point;\n    },\n    set: function (a) {\n      this._point = a;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LineSegmentData.prototype.a = function () {\n    return \"point: { x: \" + this.point.x + \", y: \" + this.point.y + \"}\";\n  };\n\n  LineSegmentData.prototype.scaleByViewport = function (a) {\n    this.point = new PointData((this.point.x - a.left) / a.width, (this.point.y - a.top) / a.height);\n  };\n\n  LineSegmentData.prototype.getPointsOverride = function (a, b) {\n    a.add(new PointData(this.point.x, this.point.y));\n  };\n\n  LineSegmentData.$t = markType(LineSegmentData, 'LineSegmentData', SegmentData.$);\n  return LineSegmentData;\n}(SegmentData);\n\nexport { LineSegmentData };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-core/esm5/lib/LineSegmentData.js"],"names":["__extends","SegmentData","PointData","markType","LineSegmentData","_super","a","_rest","_i","arguments","length","_this","call","_point","point","NaN","c","b","prototype","get_type","Object","defineProperty","get","enumerable","configurable","set","x","y","scaleByViewport","left","width","top","height","getPointsOverride","add","$t","$"],"mappings":"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","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { SegmentData } from \"./SegmentData\";\nimport { PointData } from \"./PointData\";\nimport { markType } from \"./type\";\n/**\n * @hidden\n */\nvar LineSegmentData = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(LineSegmentData, _super);\n    function LineSegmentData(a) {\n        var _rest = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            _rest[_i - 1] = arguments[_i];\n        }\n        var _this = _super.call(this) || this;\n        _this._point = null;\n        a = (a == void 0) ? 0 : a;\n        switch (a) {\n            case 0:\n                {\n                    _this.point = new PointData(NaN, NaN);\n                }\n                break;\n            case 1:\n                {\n                    var c = _rest[0];\n                    _this.point = PointData.b(c.c);\n                }\n                break;\n        }\n        return _this;\n    }\n    LineSegmentData.prototype.get_type = function () {\n        return \"Line\";\n    };\n    Object.defineProperty(LineSegmentData.prototype, \"type\", {\n        get: function () {\n            return this.get_type();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(LineSegmentData.prototype, \"point\", {\n        get: function () {\n            return this._point;\n        },\n        set: function (a) {\n            this._point = a;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    LineSegmentData.prototype.a = function () {\n        return \"point: { x: \" + this.point.x + \", y: \" + this.point.y + \"}\";\n    };\n    LineSegmentData.prototype.scaleByViewport = function (a) {\n        this.point = new PointData((this.point.x - a.left) / a.width, (this.point.y - a.top) / a.height);\n    };\n    LineSegmentData.prototype.getPointsOverride = function (a, b) {\n        a.add(new PointData(this.point.x, this.point.y));\n    };\n    LineSegmentData.$t = markType(LineSegmentData, 'LineSegmentData', SegmentData.$);\n    return LineSegmentData;\n}(SegmentData));\nexport { LineSegmentData };\n"]},"metadata":{},"sourceType":"module"}