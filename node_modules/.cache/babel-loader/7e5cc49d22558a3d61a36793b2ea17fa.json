{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrColorScale } from \"./igr-color-scale\";\nimport { IgrScatterTriangulationSeries } from \"./igr-scatter-triangulation-series\";\nimport { ScatterAreaSeries } from \"./ScatterAreaSeries\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Series class which draws a colored 2D surface based on a triangulation of XY data with numeric values assigned to each point.\n*/\n\nvar IgrScatterAreaSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrScatterAreaSeries, _super);\n\n  function IgrScatterAreaSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrScatterAreaSeries.prototype.createImplementation = function () {\n    return new ScatterAreaSeries();\n  };\n\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"isArea\", {\n    /**\n     * Gets whether the current series shows an area shape.\n    */\n    get: function () {\n      return this.i.dd;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorScale\", {\n    /**\n     * Gets or sets ColorScale used to resolve the color values of points in the series.\n    */\n    get: function () {\n      if (this.i.r1 == null) {\n        return null;\n      }\n\n      if (!this.i.r1.externalObject) {\n        var e = IgrColorScale._createFromInternal(this.i.r1);\n\n        if (e) {\n          e._implementation = this.i.r1;\n        }\n\n        this.i.r1.externalObject = e;\n      }\n\n      return this.i.r1.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.r1 = null : this.i.r1 = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorMemberPath\", {\n    /**\n     * Gets or sets the name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.\n    */\n    get: function () {\n      return this.i.sd;\n    },\n    set: function (v) {\n      this.i.sd = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"actualColorScale\", {\n    /**\n     * Gets actual color scale that is set on ColorScale property or default ColorScale\n    */\n    get: function () {\n      if (this.i.r0 == null) {\n        return null;\n      }\n\n      if (!this.i.r0.externalObject) {\n        var e = IgrColorScale._createFromInternal(this.i.r0);\n\n        if (e) {\n          e._implementation = this.i.r0;\n        }\n\n        this.i.r0.externalObject = e;\n      }\n\n      return this.i.r0.externalObject;\n    },\n    set: function (v) {\n      if (v != null && this._stylingContainer && v._styling) v._styling(this._stylingContainer, this, this);\n      v == null ? this.i.r0 = null : this.i.r0 = v.i;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorMemberAsLegendLabel\", {\n    /**\n     * Gets or sets the label displayed before series color value in the Data Legend.\n    */\n    get: function () {\n      return this.i.r9;\n    },\n    set: function (v) {\n      this.i.r9 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorMemberAsLegendUnit\", {\n    /**\n     * Gets or sets the unit displayed after series color value in the Data Legend.\n    */\n    get: function () {\n      return this.i.sb;\n    },\n    set: function (v) {\n      this.i.sb = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrScatterAreaSeries.prototype.findByName = function (name) {\n    var baseResult = _super.prototype.findByName.call(this, name);\n\n    if (baseResult) {\n      return baseResult;\n    }\n\n    if (this.colorScale && this.colorScale.name && this.colorScale.name == name) {\n      return this.colorScale;\n    }\n\n    if (this.actualColorScale && this.actualColorScale.name && this.actualColorScale.name == name) {\n      return this.actualColorScale;\n    }\n\n    return null;\n  };\n\n  IgrScatterAreaSeries.prototype._styling = function (container, component, parent) {\n    _super.prototype._styling.call(this, container, component, parent);\n\n    this._inStyling = true;\n\n    if (this.colorScale && this.colorScale._styling) {\n      this.colorScale._styling(container, component, this);\n    }\n\n    if (this.actualColorScale && this.actualColorScale._styling) {\n      this.actualColorScale._styling(container, component, this);\n    }\n\n    this._inStyling = false;\n  };\n\n  IgrScatterAreaSeries.prototype.getItemValue = function (item, memberPathName) {\n    var iv = this.i.hw(item, memberPathName);\n    return iv;\n  };\n  /**\n   * Gets the item that is the best match for the specified world coordinates.\n  \r\n  * @param world  * The world coordinates to use.\n  */\n\n\n  IgrScatterAreaSeries.prototype.getItem = function (world) {\n    var iv = this.i.ht(toPoint(world));\n    return iv;\n  };\n  /**\n   * Updates ActualColorScale properties when the ColorScale property has changed\n  \r\n  */\n\n\n  IgrScatterAreaSeries.prototype.updateActualColorScale = function () {\n    this.i.sk();\n  };\n  /**\n   * Attaches an image to the view of this series\n  \r\n  */\n\n\n  IgrScatterAreaSeries.prototype.attachImage = function (image) {\n    this.i.sh(image);\n  };\n\n  return IgrScatterAreaSeries;\n}(IgrScatterTriangulationSeries);\n\nexport { IgrScatterAreaSeries };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-scatter-area-series.js"],"names":["__extends","IgrColorScale","IgrScatterTriangulationSeries","ScatterAreaSeries","toPoint","IgrScatterAreaSeries","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","dd","r1","externalObject","e","_createFromInternal","set","v","_stylingContainer","_styling","sd","r0","r9","sb","findByName","name","baseResult","colorScale","actualColorScale","container","component","parent","_inStyling","getItemValue","item","memberPathName","iv","hw","getItem","world","ht","updateActualColorScale","sk","attachImage","image","sh"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrColorScale } from \"./igr-color-scale\";\nimport { IgrScatterTriangulationSeries } from \"./igr-scatter-triangulation-series\";\nimport { ScatterAreaSeries } from \"./ScatterAreaSeries\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Series class which draws a colored 2D surface based on a triangulation of XY data with numeric values assigned to each point.\n*/\nvar IgrScatterAreaSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrScatterAreaSeries, _super);\n    function IgrScatterAreaSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrScatterAreaSeries.prototype.createImplementation = function () {\n        return new ScatterAreaSeries();\n    };\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"isArea\", {\n        /**\n         * Gets whether the current series shows an area shape.\n        */\n        get: function () {\n            return this.i.dd;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorScale\", {\n        /**\n         * Gets or sets ColorScale used to resolve the color values of points in the series.\n        */\n        get: function () {\n            if (this.i.r1 == null) {\n                return null;\n            }\n            if (!this.i.r1.externalObject) {\n                var e = IgrColorScale._createFromInternal(this.i.r1);\n                if (e) {\n                    e._implementation = this.i.r1;\n                }\n                this.i.r1.externalObject = e;\n            }\n            return this.i.r1.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.r1 = null : this.i.r1 = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorMemberPath\", {\n        /**\n         * Gets or sets the name of the property on each data item containing a numeric value which can be converted to a color by the ColorScale.\n        */\n        get: function () {\n            return this.i.sd;\n        },\n        set: function (v) {\n            this.i.sd = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"actualColorScale\", {\n        /**\n         * Gets actual color scale that is set on ColorScale property or default ColorScale\n        */\n        get: function () {\n            if (this.i.r0 == null) {\n                return null;\n            }\n            if (!this.i.r0.externalObject) {\n                var e = IgrColorScale._createFromInternal(this.i.r0);\n                if (e) {\n                    e._implementation = this.i.r0;\n                }\n                this.i.r0.externalObject = e;\n            }\n            return this.i.r0.externalObject;\n        },\n        set: function (v) {\n            if (v != null && this._stylingContainer && v._styling)\n                v._styling(this._stylingContainer, this, this);\n            v == null ? this.i.r0 = null : this.i.r0 = v.i;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorMemberAsLegendLabel\", {\n        /**\n         * Gets or sets the label displayed before series color value in the Data Legend.\n        */\n        get: function () {\n            return this.i.r9;\n        },\n        set: function (v) {\n            this.i.r9 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrScatterAreaSeries.prototype, \"colorMemberAsLegendUnit\", {\n        /**\n         * Gets or sets the unit displayed after series color value in the Data Legend.\n        */\n        get: function () {\n            return this.i.sb;\n        },\n        set: function (v) {\n            this.i.sb = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrScatterAreaSeries.prototype.findByName = function (name) {\n        var baseResult = _super.prototype.findByName.call(this, name);\n        if (baseResult) {\n            return baseResult;\n        }\n        if (this.colorScale && this.colorScale.name && this.colorScale.name == name) {\n            return this.colorScale;\n        }\n        if (this.actualColorScale && this.actualColorScale.name && this.actualColorScale.name == name) {\n            return this.actualColorScale;\n        }\n        return null;\n    };\n    IgrScatterAreaSeries.prototype._styling = function (container, component, parent) {\n        _super.prototype._styling.call(this, container, component, parent);\n        this._inStyling = true;\n        if (this.colorScale && this.colorScale._styling) {\n            this.colorScale._styling(container, component, this);\n        }\n        if (this.actualColorScale && this.actualColorScale._styling) {\n            this.actualColorScale._styling(container, component, this);\n        }\n        this._inStyling = false;\n    };\n    IgrScatterAreaSeries.prototype.getItemValue = function (item, memberPathName) {\n        var iv = this.i.hw(item, memberPathName);\n        return (iv);\n    };\n    /**\n     * Gets the item that is the best match for the specified world coordinates.\n    \r\n    * @param world  * The world coordinates to use.\n    */\n    IgrScatterAreaSeries.prototype.getItem = function (world) {\n        var iv = this.i.ht(toPoint(world));\n        return (iv);\n    };\n    /**\n     * Updates ActualColorScale properties when the ColorScale property has changed\n    \r\n    */\n    IgrScatterAreaSeries.prototype.updateActualColorScale = function () {\n        this.i.sk();\n    };\n    /**\n     * Attaches an image to the view of this series\n    \r\n    */\n    IgrScatterAreaSeries.prototype.attachImage = function (image) {\n        this.i.sh(image);\n    };\n    return IgrScatterAreaSeries;\n}(IgrScatterTriangulationSeries));\nexport { IgrScatterAreaSeries };\n"]},"metadata":{},"sourceType":"module"}