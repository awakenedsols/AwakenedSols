{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { VerticalAlignment_$type } from \"igniteui-react-core\";\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { YAxisLabelLocation_$type } from \"./YAxisLabelLocation\";\nimport { XAxisLabelLocation_$type } from \"./XAxisLabelLocation\";\nimport { IgrDomainChart } from \"./igr-domain-chart\";\nimport { brushToString, stringToBrush, ensureBool, ensureEnum, arrayFindByName } from \"igniteui-react-core\";\n/**\n * Represents a base class for domain charts with X/Y axes\n*/\n\nvar IgrXYChart =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrXYChart, _super);\n\n  function IgrXYChart(props) {\n    return _super.call(this, props) || this;\n  }\n\n  Object.defineProperty(IgrXYChart.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisFormatLabel\", {\n    /**\n     * Gets or sets function which takes an context object and returns a formatted label for the X-axis.\n    *\n    * To customize the text of the x-axis label, set `xAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be your data item.\n    *\n    * ```ts\n    * formatX(item: any): string {\n    *     return \"[ \" + item.label + \"! ]\";\n    * }\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisFormatLabel=\"formatX\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.t0;\n    },\n    set: function (v) {\n      this.i.t0 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisFormatLabel\", {\n    /**\n     * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.\n    *\n    * To customize the text of the y-axis label, set `yAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be the numeric value corresponding to a position on the y-axis.\n    *\n    * ```ts\n    * formatY(value: any): string {\n    *     return \"[ \" + value+ \"! ]\";\n    * }\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisFormatLabel=\"formatY\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.t1;\n    },\n    set: function (v) {\n      this.i.t1 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelLeftMargin\", {\n    /**\n     * Gets or sets the left margin of labels on the X-axis\n    *\n    * Use the `xAxisLabelLeftMargin` property to apply a margin left of the x-axis labels.\n    *\n    * ```ts\n    * this.chart.xAxisLabelLeftMargin =\"100\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisLabelLeftMargin={100}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vh;\n    },\n    set: function (v) {\n      this.i.vh = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTopMargin\", {\n    /**\n     * Gets or sets the top margin of labels on the X-axis\n    *\n    * Use the `xAxisLabelTopMargin` property to apply a margin above the x-axis labels.\n    *\n    * ```ts\n    * this.chart.xAxisTitleTopMargin=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleTopMargin\t={250}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vj;\n    },\n    set: function (v) {\n      this.i.vj = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelRightMargin\", {\n    /**\n     * Gets or sets the right margin of labels on the X-axis\n    *\n    * Use the `xAxisLabelRightMargin` property to apply a margin right of the x-axis labels.\n    *\n    * ```ts\n    * this.chart.xAxisLabelRightMargin=\"100\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisLabelRightMargin={250}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vi;\n    },\n    set: function (v) {\n      this.i.vi = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin of labels on the X-axis\n    *\n    * Use the `xAxisLabelBottomMargin` property to apply a margin below the x-axis labels.\n    *\n    * ```ts\n    * this.chart.xAxisLabelBottomMargin =\"100\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisLabelBottomMargin={100}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vg;\n    },\n    set: function (v) {\n      this.i.vg = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelLeftMargin\", {\n    /**\n     * Gets or sets the left margin of labels on the Y-axis\n    *\n    * Use the `yAxisLabelLeftMargin` property to apply a margin left of the y-axis labels.\n    *\n    * ```ts\n    * this.chart. yAxisLabelLeftMargin=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t yAxisLabelLeftMargin={250}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vy;\n    },\n    set: function (v) {\n      this.i.vy = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTopMargin\", {\n    /**\n     * Gets or sets the top margin of labels on the Y-axis\n    *\n    * Use the `yAxisLabelTopMargin` property to apply a margin above the y-axis labels.\n    *\n    * ```ts\n    * this.chart.yAxisLabelTopMargin=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelTopMargin\t={250}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.v0;\n    },\n    set: function (v) {\n      this.i.v0 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelRightMargin\", {\n    /**\n     * Gets or sets the right margin of labels on the Y-axis\n    *\n    * Use the `yAxisLabelRightMargin` property to apply a margin right of the y-axis labels.\n    *\n    * ```ts\n    * this.chart.yAxisLabelRightMargin=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelRightMargin={250}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vz;\n    },\n    set: function (v) {\n      this.i.vz = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin of labels on the Y-axis\n    *\n    * Use the `yAxisLabelBottomMargin` property to apply a margin below the y-axis labels.\n    *\n    * ```ts\n    * this.chart.yAxisLabelBottomMargin=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelBottomMargin={250}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vx;\n    },\n    set: function (v) {\n      this.i.vx = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTextColor\", {\n    /**\n     * Gets or sets color of labels on the X-axis\n    *\n    * To change the color of x-axis labels, set the `xAxisLabelTextColor` property to a color string.\n    *\n    * ```ts\n    * this.chart.xAxisLabelTextColor=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisLabelTextColor=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.z5);\n    },\n    set: function (v) {\n      this.i.z5 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTextColor\", {\n    /**\n     * Gets or sets color of labels on the Y-axis\n    *\n    * To change the color of y-axis labels, set the `yAxisLabelTextColor` property to a color string.\n    *\n    * ```ts\n    * this.chart.yAxisLabelTextColor=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelTextColor=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.aac);\n    },\n    set: function (v) {\n      this.i.aac = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"actualXAxisLabelTextColor\", {\n    /**\n     * Gets the actual color of labels on the X-axis\n    */\n    get: function () {\n      return brushToString(this.i.z3);\n    },\n    set: function (v) {\n      this.i.z3 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"actualYAxisLabelTextColor\", {\n    /**\n     * Gets the actual color of labels on the Y-axis\n    */\n    get: function () {\n      return brushToString(this.i.z4);\n    },\n    set: function (v) {\n      this.i.z4 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleMargin\", {\n    /**\n     * Gets or sets the margin around a title on the X-axis\n    *\n    * Use the `xAxisTitleMargin` property to set a margin around the y-axis title.\n    */\n    get: function () {\n      return this.i.vs;\n    },\n    set: function (v) {\n      this.i.vs = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleMargin\", {\n    /**\n     * Gets or sets the margin around a title on the Y-axis\n    *\n    * Use the `yAxisTitleMargin` property to set a margin around the y-axis title.\n    */\n    get: function () {\n      return this.i.v9;\n    },\n    set: function (v) {\n      this.i.v9 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleLeftMargin\", {\n    /**\n     * Gets or sets the left margin of a title on the X-axis\n    *\n    * Use the `xAxisTitleLeftMargin` property to apply a margin left of the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleLeftMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleLeftMargin={150}\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vr;\n    },\n    set: function (v) {\n      this.i.vr = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleLeftMargin\", {\n    /**\n     * Gets or sets the left margin of a title on the Y-axis\n    *\n    * Use the `yAxisTitleLeftMargin` property to apply a margin left of the y-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleLeftMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleLeftMargin={150}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.v8;\n    },\n    set: function (v) {\n      this.i.v8 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTopMargin\", {\n    /**\n     * Gets or sets the top margin of a title on the X-axis\n    *\n    * Use the `xAxisTitleTopMargin` property to apply a margin above the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleTopMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleTopMargin\t={150}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vu;\n    },\n    set: function (v) {\n      this.i.vu = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTopMargin\", {\n    /**\n     * Gets or sets the top margin of a title on the Y-axis\n    *\n    * Use the `yAxisTitleTopMargin` property to apply a margin above the y-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleTopMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleTopMargin\t={150}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.wb;\n    },\n    set: function (v) {\n      this.i.wb = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleRightMargin\", {\n    /**\n     * Gets or sets the right margin of a title on the X-axis\n    *\n    * Use the `xAxisTitleRightMargin` property to apply a margin right of the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleRightMargin=\"100\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleRightMargin=\"100\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vt;\n    },\n    set: function (v) {\n      this.i.vt = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleRightMargin\", {\n    /**\n     * Gets or sets the right margin of a title on the Y-axis\n    *\n    * Use the `yAxisTitleRightMargin` property to apply a margin right of the y-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleRightMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleRightMargin={150}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.wa;\n    },\n    set: function (v) {\n      this.i.wa = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin of a title on the X-axis\n    *\n    * Use the `xAxisTitleBottomMargin` property to apply a margin below the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleBottomMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleBottomMargin={250}\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vq;\n    },\n    set: function (v) {\n      this.i.vq = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleBottomMargin\", {\n    /**\n     * Gets or sets the bottom margin of a title on the Y-axis\n    *\n    * Use the `yAxisTitleBottomMargin` property to apply a margin below the y-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleBottomMargin=\"150\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleBottomMargin\t={150}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.v7;\n    },\n    set: function (v) {\n      this.i.v7 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTextColor\", {\n    /**\n     * Gets or sets color of title on the X-axis\n    *\n    * To change the color of the x-axis title, set the `xAxisTitleTextColor` property to a color string.\n    *\n    * ```ts\n    * this.chart.xAxisTitleTextColor=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisTitleTextColor=\"green\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.aab);\n    },\n    set: function (v) {\n      this.i.aab = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTextColor\", {\n    /**\n     * Gets or sets color of title on the Y-axis\n    *\n    * To change the color of the y-axis title, set the `yAxisTitleTextColor` property to a color string.\n    *\n    * ```ts\n    * this.chart.yAxisTitleTextColor=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleTextColor=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.aai);\n    },\n    set: function (v) {\n      this.i.aai = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTextStyle\", {\n    /**\n     * Gets or sets CSS font property for labels on X-axis\n    *\n    * To change the font of x-axis labels, set the `xAxisLabelTextStyle` property.\n    *\n    * ```ts\n    * this.chart.xAxisLabelTextStyle=\"italic 15px arial, sans-serif\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisLabelTextStyle=\"italic 15px arial, sans-serif\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.w5;\n    },\n    set: function (v) {\n      this.i.w5 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTextStyle\", {\n    /**\n     * Gets or sets CSS font property for labels on Y-axis\n    *\n    * To change the font of x-axis labels, set the `yAxisLabelTextStyle` property.\n    *\n    * ```ts\n    * this.chart. yAxisLabelTextStyle=\"italic 15px arial, sans-serif\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t yAxisLabelTextStyle=\"italic 15px arial, sans-serif\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ya;\n    },\n    set: function (v) {\n      this.i.ya = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTextStyle\", {\n    /**\n     * Gets or sets CSS font property for title on X-axis\n    *\n    * To change the font of the x-axis title, set the `xAxisTitleTextStyle` property.\n    *\n    * ```ts\n    * this.chart.xAxisTitleTextStyle=\"italic 15px arial, sans-serif\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleTextStyle=\"italic 15px arial, sans-serif\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.xt;\n    },\n    set: function (v) {\n      this.i.xt = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTextStyle\", {\n    /**\n     * Gets or sets CSS font property for title on Y-axis\n    *\n    * To change the font of the x-axis title, set the `yAxisTitleTextStyle` property.\n    *\n    * ```ts\n    * this.chart.yAxisTitleTextStyle=\"italic 15px arial, sans-serif\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleTextStyle=\"italic 15px arial, sans-serif\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.yy;\n    },\n    set: function (v) {\n      this.i.yy = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabel\", {\n    /**\n     * Gets or sets the format for labels along the X-axis.\n    */\n    get: function () {\n      return this.i.we;\n    },\n    set: function (v) {\n      this.i.we = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabel\", {\n    /**\n     * Gets or sets the property or string from which the labels are derived.\n    */\n    get: function () {\n      return this.i.wf;\n    },\n    set: function (v) {\n      this.i.wf = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisMajorStroke\", {\n    /**\n     * Gets or sets the color to apply to major gridlines along the X-axis.\n    *\n    * Set `xAxisMajorStroke` to control the color of major gridlines extending vertically from the x-axis.\n    *\n    * ```ts\n    * this.chart.xAxisMajorStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisMajorStroke=\"green\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.z6);\n    },\n    set: function (v) {\n      this.i.z6 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisMajorStroke\", {\n    /**\n     * Gets or sets the color to apply to major gridlines along the Y-axis.\n    *\n    * Set `yAxisMajorStroke` to control the color of major gridlines extending horizontally from the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisMajorStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    *     yAxisMajorStroke=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.aad);\n    },\n    set: function (v) {\n      this.i.aad = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisMajorStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to major gridlines along the X-axis.\n    *\n    * Set `xAxisMajorStrokeThickness` to control the thickness of major gridlines extending vertically from the x-axis.\n    *\n    * ```ts\n    * this.chart.xAxisMajorStrokeThickness=\"3\" ;\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisMajorStrokeThickness=\"3\"\n    * \txAxisExtent\t={250}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vk;\n    },\n    set: function (v) {\n      this.i.vk = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisMajorStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to major gridlines along the Y-axis.\n    *\n    * Set `yAxisMajorStrokeThickness` to control the thickness of major gridlines extending horizontally from the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisMajorStrokeThickness=\"2\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisMajorStrokeThickness={2}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.v1;\n    },\n    set: function (v) {\n      this.i.v1 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisMinorStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to minor gridlines along the X-axis.\n    *\n    * Set `xAxisMinorStrokeThickness` to control the thickness of minor gridlines extending vertically from the x-axis.\n    *\n    * ```ts\n    * this.chart.xAxisMinorStrokeThickness=\"3\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisMinorStrokeThickness=\"3\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vl;\n    },\n    set: function (v) {\n      this.i.vl = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisMinorStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to minor gridlines along the Y-axis.\n    *\n    * Set `yAxisMinorStrokeThickness` to control the thickness of minor gridlines extending horizontally from the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisMinorStrokeThickness=\"3\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisMinorStrokeThickness={3}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.v2;\n    },\n    set: function (v) {\n      this.i.v2 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisStrip\", {\n    /**\n     * Gets or sets the color to apply to stripes along the X-axis.\n    *\n    * Set `xAxisStrip` to control the alternating color of stripes extending vertically from the x-axis.\n    *\n    * ```ts\n    * this.chart.xAxisStrip=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisStrip=\"green\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.z8);\n    },\n    set: function (v) {\n      this.i.z8 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisStrip\", {\n    /**\n     * Gets or sets the color to apply to stripes along the Y-axis.\n    *\n    * Set `yAxisStrip` to control the alternating color of stripes extending horizontally from the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisStrip=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisStrip=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.aaf);\n    },\n    set: function (v) {\n      this.i.aaf = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisStroke\", {\n    /**\n     * Gets or sets the color to apply to the X-axis line.\n    *\n    * Set `xAxisStroke` to control the color of the x-axis line.\n    *\n    * ```ts\n    * this.chart.xAxisStroke=\"green\"\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisStroke=\"green\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.z9);\n    },\n    set: function (v) {\n      this.i.z9 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisStroke\", {\n    /**\n     * Gets or sets the color to apply to the Y-axis line.\n    *\n    * Set `yAxisStroke` to control the color of the y-axis line.\n    *\n    * ```ts\n    * this.chart.yAxisStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisStroke=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.aag);\n    },\n    set: function (v) {\n      this.i.aag = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to the X-axis line.\n    *\n    * Set `xAxisStrokeThickness` to control the thickness of the x-axis line.\n    *\n    * ```ts\n    * this.chart.xAxisStrokeThickness=\"2\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisStrokeThickness={2}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vm;\n    },\n    set: function (v) {\n      this.i.vm = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to the Y-axis line.\n    *\n    * Set `yAxisStrokeThickness` to control the thickness of the y-axis line.\n    *\n    * ```ts\n    * this.chart. yAxisStrokeThickness=\"2\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t yAxisStrokeThickness={2}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.v3;\n    },\n    set: function (v) {\n      this.i.v3 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTickLength\", {\n    /**\n     * Gets or sets the length of tickmarks along the X-axis.\n    *\n    * Set `xAxisTickLength` to control the length of tickmarks extending vertically from the x-axis line.\n    *\n    * ```ts\n    * this.chart.xAxisTickLength=\"25\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTickLength\t={25}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vn;\n    },\n    set: function (v) {\n      this.i.vn = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTickLength\", {\n    /**\n     * Gets or sets the length of tickmarks along the Y-axis.\n    *\n    * Set `yAxisTickLength` to control the length of tickmarks extending horizontally from the y-axis line.\n    *\n    * ```ts\n    * this.chart.yAxisTickLength=\"25\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTickLength\t={25}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.v4;\n    },\n    set: function (v) {\n      this.i.v4 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTickStroke\", {\n    /**\n     * Gets or sets the color to apply to tickmarks along the X-axis.\n    *\n    * Set `xAxisTickStroke` to control the color of tickmarks extending vertically from the x-axis line.\n    *\n    * ```ts\n    * this.chart. xAxisTickStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisTickStroke=\"green\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.aaa);\n    },\n    set: function (v) {\n      this.i.aaa = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTickStroke\", {\n    /**\n     * Gets or sets the color to apply to tickmarks along the Y-axis.\n    *\n    * Set `yAxisTickStroke` to control the color of tickmarks extending horizontally from the y-axis line.\n    *\n    * ```ts\n    * this.chart.yAxisTickStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTickStroke=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.aah);\n    },\n    set: function (v) {\n      this.i.aah = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTickStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to tickmarks along the X-axis.\n    *\n    * Set `xAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the x-axis line.\n    *\n    * ```ts\n    * this.chart.xAxisTickStrokeThickness=\"20\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTickStrokeThickness={20}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vo;\n    },\n    set: function (v) {\n      this.i.vo = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTickStrokeThickness\", {\n    /**\n     * Gets or sets the thickness to apply to tickmarks along the Y-axis.\n    *\n    * Set `yAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the y-axis line.\n    *\n    * ```ts\n    * this.chart.yAxisTickStrokeThickness=\"25\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTickStrokeThickness\t={25}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.v5;\n    },\n    set: function (v) {\n      this.i.v5 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitle\", {\n    /**\n     * Gets or sets the Text to display below the X-axis.\n    *\n    * Set `xAxisTitle` to display a label adjacent to the x-axis.\n    *\n    * ```ts\n    * this.chart. xAxisTitle=\"x axis\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitle=\"x axis\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.xk;\n    },\n    set: function (v) {\n      this.i.xk = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitle\", {\n    /**\n     * Gets or sets the Text to display to the left of the Y-axis.\n    *\n    * Set `yAxisTitle` to display a label adjacent to the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisTitle=\"y axis\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitle=\"y axis\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.yp;\n    },\n    set: function (v) {\n      this.i.yp = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisMinorStroke\", {\n    /**\n     * Gets or sets the color to apply to minor gridlines along the X-axis.\n    *\n    * Set `xAxisMinorStroke` to control the color of minor gridlines extending vertically from the x-axis.\n    *\n    * ```ts\n    * this.chart.xAxisExtent=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisMinorStroke=\"green\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.z7);\n    },\n    set: function (v) {\n      this.i.z7 = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisMinorStroke\", {\n    /**\n     * Gets or sets the color to apply to minor gridlines along the Y-axis.\n    *\n    * Set `yAxisMinorStroke` to control the color of minor gridlines extending horizontally from the y-axis.\n    *\n    * ```ts\n    * this.chart.yAxisMinorStroke=\"green\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisMinorStroke=\"green\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return brushToString(this.i.aae);\n    },\n    set: function (v) {\n      this.i.aae = stringToBrush(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelAngle\", {\n    /**\n     * Gets or sets the angle of rotation for labels along the X-axis.\n    *\n    * To control the rotation of labels on the x-axis, set the `xAxisLabelAngle` property to a number of rotational degrees.\n    *\n    * ```ts\n    * this.chart.xAxisLabelAngle=\"45\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisLabelAngle={45}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vf;\n    },\n    set: function (v) {\n      this.i.vf = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelAngle\", {\n    /**\n     * Gets or sets the angle of rotation for labels along the Y-axis.\n    *\n    * To control the rotation of labels on the y-axis, set the `yAxisLabelAngle` property to a number of rotational degrees.\n    *\n    * ```ts\n    * this.chart.yAxisLabelAngle=\"25\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelAngle\t={25}\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vw;\n    },\n    set: function (v) {\n      this.i.vw = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisExtent\", {\n    /**\n     * Gets or sets the distance between the X-axis and the bottom of the chart.\n    *\n    * To allocate space between the x-axis and the edge of the chart, set the `xAxisExtent` property.\n    *\n    * ```ts\n    * this.chart.xAxisExtent=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisExtent\t={250}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ve;\n    },\n    set: function (v) {\n      this.i.ve = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisExtent\", {\n    /**\n     * Gets or sets the distance between the Y-axis and the left edge of the chart.\n    *\n    * To allocate space between the x-axis and the edge of the chart, set the `xAxisExtent` property.\n    *\n    * ```ts\n    * this.chart.xAxisExtent=\"250\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisExtent\t={250}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vv;\n    },\n    set: function (v) {\n      this.i.vv = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleAngle\", {\n    /**\n     * Gets or sets the angle of rotation for the X-axis title.\n    *\n    * Set `xAxisTitleAngle` to control the rotation of the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleAngle=\"50\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisTitleAngle\t={50}\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.vp;\n    },\n    set: function (v) {\n      this.i.vp = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleAngle\", {\n    /**\n     * Gets or sets the angle of rotation for the Y-axis title.\n    *\n    * Set `yAxisTitleAngle` to control the rotation of the y-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleAngle=\"25\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleAngle\t={24}\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.v6;\n    },\n    set: function (v) {\n      this.i.v6 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisInverted\", {\n    /**\n     * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.\n    *\n    * To reverse the direction of items along the x-axis, set the `xAxisInverted` property to true.\n    *\n    * ```ts\n    * this.chart.XAxisInverted=\"True\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tXAxisInverted=\"True\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.ua;\n    },\n    set: function (v) {\n      this.i.ua = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisInverted\", {\n    /**\n     * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.\n    *\n    * You can use `yAxisInverted` to invert the scale of the y axis like this:\n    *\n    * ```ts\n    * this.chart.yAxisInverted=\"true\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t yAxisInverted=\"true\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    *\n    * The default value of `yAxisInverted` is false.\n    */\n    get: function () {\n      return this.i.ub;\n    },\n    set: function (v) {\n      this.i.ub = ensureBool(v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleAlignment\", {\n    /**\n     * Gets or sets Horizontal alignment of the X-axis title.\n    *\n    * Set `xAxisTitleAlignment` to control the horizontal alignment of the x-axis title.\n    *\n    * ```ts\n    * this.chart.xAxisTitleAlignment=\"right\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisTitleAlignment=\"right\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.zl;\n    },\n    set: function (v) {\n      this.i.zl = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleAlignment\", {\n    /**\n     * Gets or sets Vertical alignment of the Y-axis title.\n    *\n    * Set `yAxisTitleAlignment` to control the vertical alignment of the x-axis title.\n    *\n    * ```ts\n    * this.chart.yAxisTitleAlignment=\"bottom\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisTitleAlignment=\"bottom\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.aao;\n    },\n    set: function (v) {\n      this.i.aao = ensureEnum(VerticalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelHorizontalAlignment\", {\n    /**\n     * Gets or sets Horizontal alignment of X-axis labels.\n    */\n    get: function () {\n      return this.i.zk;\n    },\n    set: function (v) {\n      this.i.zk = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelHorizontalAlignment\", {\n    /**\n     * Gets or sets Horizontal alignment of Y-axis labels.\n    *\n    * Set the `yAxisLabelHorizontalAlignment` property to change the horizontal alignment of y-axis labels.\n    */\n    get: function () {\n      return this.i.zm;\n    },\n    set: function (v) {\n      this.i.zm = ensureEnum(HorizontalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelVerticalAlignment\", {\n    /**\n     * Gets or sets Vertical alignment of X-axis labels.\n    *\n    * Use the `xAxisLabelVerticalAlignment` property to change the vertical position of x-axis labels.\n    *\n    * ```ts\n    * this.chart.xAxisLabelVerticalAlignment=\"bottom\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \txAxisLabelVerticalAlignment=\"bottom\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.aam;\n    },\n    set: function (v) {\n      this.i.aam = ensureEnum(VerticalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelVerticalAlignment\", {\n    /**\n     * Gets or sets Vertical alignment of Y-axis labels.\n    */\n    get: function () {\n      return this.i.aan;\n    },\n    set: function (v) {\n      this.i.aan = ensureEnum(VerticalAlignment_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelVisibility\", {\n    /**\n     * Gets or sets Visibility of X-axis labels.\n    *\n    * To hide the x-axis labels, set `xAxisLabelVisibility` to collapsed.\n    *\n    * ```ts\n    * this.chart.xAxisLabelVisibility=\"collapsed\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \t xAxisLabelVisibility=\"collapsed\"\n    * \tdataSource={this.state.data}>\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.aar;\n    },\n    set: function (v) {\n      this.i.aar = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelVisibility\", {\n    /**\n     * Gets or sets Visibility of Y-axis labels.\n    *\n    * To hide the y-axis labels, set `yAxisLabelVisibility` to collapsed.\n    *\n    * ```ts\n    * this.chart.yAxisLabelVisibility=\"collapsed\"\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelVisibility=\"collapsed\"\n    * \tdataSource={this.state.data}\n    * \tchartType=\"stepArea\" >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.aas;\n    },\n    set: function (v) {\n      this.i.aas = ensureEnum(Visibility_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelLocation\", {\n    /**\n     * Gets or sets location of Y-axis labels, relative to the plot area.\n    *\n    * Set the `yAxisLabelLocation` property to change the location of the y-axis and its labels.\n    *\n    * ```ts\n    * this.chart.yAxisLabelLocation=\"outsideRight\";\n    * ```\n    *\n    * ```ts\n    * <IgrCategoryChart\n    * \tyAxisLabelLocation=\"outsideRight\"\n    * \tdataSource={this.state.data} >\n    * </IgrCategoryChart>\n    * ```\n    */\n    get: function () {\n      return this.i.t7;\n    },\n    set: function (v) {\n      this.i.t7 = ensureEnum(YAxisLabelLocation_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelLocation\", {\n    /**\n     * Gets or sets location of X-axis labels, relative to the plot area.\n    */\n    get: function () {\n      return this.i.t5;\n    },\n    set: function (v) {\n      this.i.t5 = ensureEnum(XAxisLabelLocation_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelFormat\", {\n    /**\n     * Gets or sets the format string for the X axis label.\n    */\n    get: function () {\n      return this.i.ww;\n    },\n    set: function (v) {\n      this.i.ww = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelFormatSpecifiers\", {\n    /**\n     * Gets or sets the format specifiers to use with the XAxisLabelFormat string.\n    */\n    get: function () {\n      return this.i.tu;\n    },\n    set: function (v) {\n      if (v && !Array.isArray(v) && typeof v == \"string\") {\n        var re = /\\s*(?:,|\\s|$)\\s*/gm;\n        v = v.split(re);\n      }\n\n      this.i.tu = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelFormat\", {\n    /**\n     * Gets or sets the format string for the Y axis label.\n    */\n    get: function () {\n      return this.i.x1;\n    },\n    set: function (v) {\n      this.i.x1 = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelFormatSpecifiers\", {\n    /**\n     * Gets or sets the format specifiers to use with the YAxisLabelFormat string.\n    */\n    get: function () {\n      return this.i.tv;\n    },\n    set: function (v) {\n      if (v && !Array.isArray(v) && typeof v == \"string\") {\n        var re = /\\s*(?:,|\\s|$)\\s*/gm;\n        v = v.split(re);\n      }\n\n      this.i.tv = v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrXYChart.prototype.findByName = function (name) {\n    var baseResult = _super.prototype.findByName.call(this, name);\n\n    if (baseResult) {\n      return baseResult;\n    }\n\n    if (this.xAxisLabelFormatSpecifiers != null && arrayFindByName(this.xAxisLabelFormatSpecifiers, name)) {\n      return arrayFindByName(this.xAxisLabelFormatSpecifiers, name);\n    }\n\n    if (this.yAxisLabelFormatSpecifiers != null && arrayFindByName(this.yAxisLabelFormatSpecifiers, name)) {\n      return arrayFindByName(this.yAxisLabelFormatSpecifiers, name);\n    }\n\n    return null;\n  };\n  /**\n   * Called by the UI framework to provide a UI container for rendering this control.\n  \r\n  * @param container  * The UI container element.\n  */\n\n\n  IgrXYChart.prototype.provideContainer = function (container) {\n    this.i.provideContainer(container);\n  };\n  /**\n   * Converts the given visual location to a data value.\n  \r\n  * @param unscaledValue  * The x-coordinate of the location to scale.\n  */\n\n\n  IgrXYChart.prototype.getScaledValueX = function (unscaledValue) {\n    var iv = this.i.va(unscaledValue);\n    return iv;\n  };\n  /**\n   * Converts the given data value to a visual location.\n  \r\n  * @param scaledValue  * The data value to un-scale.\n  */\n\n\n  IgrXYChart.prototype.getUnscaledValueX = function (scaledValue) {\n    var iv = this.i.vc(scaledValue);\n    return iv;\n  };\n  /**\n   * Converts the given visual location to a data value.\n  \r\n  * @param unscaledValue  * The y-coordinate of the location to scale.\n  */\n\n\n  IgrXYChart.prototype.getScaledValueY = function (unscaledValue) {\n    var iv = this.i.vb(unscaledValue);\n    return iv;\n  };\n  /**\n   * Converts the given data value to a visual location.\n  \r\n  * @param scaledValue  * The data value to un-scale.\n  */\n\n\n  IgrXYChart.prototype.getUnscaledValueY = function (scaledValue) {\n    var iv = this.i.vd(scaledValue);\n    return iv;\n  };\n\n  return IgrXYChart;\n}(IgrDomainChart);\n\nexport { IgrXYChart };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-xy-chart.js"],"names":["__extends","HorizontalAlignment_$type","VerticalAlignment_$type","Visibility_$type","YAxisLabelLocation_$type","XAxisLabelLocation_$type","IgrDomainChart","brushToString","stringToBrush","ensureBool","ensureEnum","arrayFindByName","IgrXYChart","_super","props","call","Object","defineProperty","prototype","get","_implementation","enumerable","configurable","i","t0","set","v","t1","vh","vj","vi","vg","vy","v0","vz","vx","z5","aac","z3","z4","vs","v9","vr","v8","vu","wb","vt","wa","vq","v7","aab","aai","w5","ya","xt","yy","we","wf","z6","aad","vk","v1","vl","v2","z8","aaf","z9","aag","vm","v3","vn","v4","aaa","aah","vo","v5","xk","yp","z7","aae","vf","vw","ve","vv","vp","v6","ua","ub","zl","aao","zk","zm","aam","aan","aar","aas","t7","t5","ww","tu","Array","isArray","re","split","x1","tv","findByName","name","baseResult","xAxisLabelFormatSpecifiers","yAxisLabelFormatSpecifiers","provideContainer","container","getScaledValueX","unscaledValue","iv","va","getUnscaledValueX","scaledValue","vc","getScaledValueY","vb","getUnscaledValueY","vd"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,yBAAT,QAA0C,qBAA1C;AACA,SAASC,uBAAT,QAAwC,qBAAxC;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,aAAT,EAAwBC,aAAxB,EAAuCC,UAAvC,EAAmDC,UAAnD,EAA+DC,eAA/D,QAAsF,qBAAtF;AACA;AACA;AACA;;AACA,IAAIC,UAAU;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;AAC5Db,EAAAA,SAAS,CAACY,UAAD,EAAaC,MAAb,CAAT;;AACA,WAASD,UAAT,CAAoBE,KAApB,EAA2B;AACvB,WAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;AACH;;AACDE,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,GAA5C,EAAiD;AAC7C;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKC,eAAZ;AACH,KAN4C;AAO7CC,IAAAA,UAAU,EAAE,KAPiC;AAQ7CC,IAAAA,YAAY,EAAE;AAR+B,GAAjD;AAUAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,kBAA5C,EAAgE;AAC5D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOC,EAAd;AACH,KAtB2D;AAuB5DC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOC,EAAP,GAAYE,CAAZ;AACH,KAzB2D;AA0B5DL,IAAAA,UAAU,EAAE,KA1BgD;AA2B5DC,IAAAA,YAAY,EAAE;AA3B8C,GAAhE;AA6BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,kBAA5C,EAAgE;AAC5D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOI,EAAd;AACH,KAtB2D;AAuB5DF,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOI,EAAP,GAAYD,CAAZ;AACH,KAzB2D;AA0B5DL,IAAAA,UAAU,EAAE,KA1BgD;AA2B5DC,IAAAA,YAAY,EAAE;AA3B8C,GAAhE;AA6BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,sBAA5C,EAAoE;AAChE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOK,EAAd;AACH,KApB+D;AAqBhEH,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOK,EAAP,GAAY,CAACF,CAAb;AACH,KAvB+D;AAwBhEL,IAAAA,UAAU,EAAE,KAxBoD;AAyBhEC,IAAAA,YAAY,EAAE;AAzBkD,GAApE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOM,EAAd;AACH,KApB8D;AAqB/DJ,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOM,EAAP,GAAY,CAACH,CAAb;AACH,KAvB8D;AAwB/DL,IAAAA,UAAU,EAAE,KAxBmD;AAyB/DC,IAAAA,YAAY,EAAE;AAzBiD,GAAnE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,uBAA5C,EAAqE;AACjE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOO,EAAd;AACH,KApBgE;AAqBjEL,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOO,EAAP,GAAY,CAACJ,CAAb;AACH,KAvBgE;AAwBjEL,IAAAA,UAAU,EAAE,KAxBqD;AAyBjEC,IAAAA,YAAY,EAAE;AAzBmD,GAArE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,wBAA5C,EAAsE;AAClE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOQ,EAAd;AACH,KApBiE;AAqBlEN,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOQ,EAAP,GAAY,CAACL,CAAb;AACH,KAvBiE;AAwBlEL,IAAAA,UAAU,EAAE,KAxBsD;AAyBlEC,IAAAA,YAAY,EAAE;AAzBoD,GAAtE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,sBAA5C,EAAoE;AAChE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOS,EAAd;AACH,KAnB+D;AAoBhEP,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOS,EAAP,GAAY,CAACN,CAAb;AACH,KAtB+D;AAuBhEL,IAAAA,UAAU,EAAE,KAvBoD;AAwBhEC,IAAAA,YAAY,EAAE;AAxBkD,GAApE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOU,EAAd;AACH,KAnB8D;AAoB/DR,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOU,EAAP,GAAY,CAACP,CAAb;AACH,KAtB8D;AAuB/DL,IAAAA,UAAU,EAAE,KAvBmD;AAwB/DC,IAAAA,YAAY,EAAE;AAxBiD,GAAnE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,uBAA5C,EAAqE;AACjE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOW,EAAd;AACH,KAnBgE;AAoBjET,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOW,EAAP,GAAY,CAACR,CAAb;AACH,KAtBgE;AAuBjEL,IAAAA,UAAU,EAAE,KAvBqD;AAwBjEC,IAAAA,YAAY,EAAE;AAxBmD,GAArE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,wBAA5C,EAAsE;AAClE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOY,EAAd;AACH,KAnBiE;AAoBlEV,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOY,EAAP,GAAY,CAACT,CAAb;AACH,KAtBiE;AAuBlEL,IAAAA,UAAU,EAAE,KAvBsD;AAwBlEC,IAAAA,YAAY,EAAE;AAxBoD,GAAtE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOa,EAAR,CAApB;AACH,KApB8D;AAqB/DX,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOa,EAAP,GAAY5B,aAAa,CAACkB,CAAD,CAAzB;AACH,KAvB8D;AAwB/DL,IAAAA,UAAU,EAAE,KAxBmD;AAyB/DC,IAAAA,YAAY,EAAE;AAzBiD,GAAnE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOc,GAAR,CAApB;AACH,KApB8D;AAqB/DZ,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOc,GAAP,GAAa7B,aAAa,CAACkB,CAAD,CAA1B;AACH,KAvB8D;AAwB/DL,IAAAA,UAAU,EAAE,KAxBmD;AAyB/DC,IAAAA,YAAY,EAAE;AAzBiD,GAAnE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,2BAA5C,EAAyE;AACrE;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOe,EAAR,CAApB;AACH,KANoE;AAOrEb,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOe,EAAP,GAAY9B,aAAa,CAACkB,CAAD,CAAzB;AACH,KAToE;AAUrEL,IAAAA,UAAU,EAAE,KAVyD;AAWrEC,IAAAA,YAAY,EAAE;AAXuD,GAAzE;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,2BAA5C,EAAyE;AACrE;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOgB,EAAR,CAApB;AACH,KANoE;AAOrEd,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOgB,EAAP,GAAY/B,aAAa,CAACkB,CAAD,CAAzB;AACH,KAToE;AAUrEL,IAAAA,UAAU,EAAE,KAVyD;AAWrEC,IAAAA,YAAY,EAAE;AAXuD,GAAzE;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,kBAA5C,EAAgE;AAC5D;AACR;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOiB,EAAd;AACH,KAR2D;AAS5Df,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOiB,EAAP,GAAY,CAACd,CAAb;AACH,KAX2D;AAY5DL,IAAAA,UAAU,EAAE,KAZgD;AAa5DC,IAAAA,YAAY,EAAE;AAb8C,GAAhE;AAeAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,kBAA5C,EAAgE;AAC5D;AACR;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOkB,EAAd;AACH,KAR2D;AAS5DhB,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOkB,EAAP,GAAY,CAACf,CAAb;AACH,KAX2D;AAY5DL,IAAAA,UAAU,EAAE,KAZgD;AAa5DC,IAAAA,YAAY,EAAE;AAb8C,GAAhE;AAeAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,sBAA5C,EAAoE;AAChE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOmB,EAAd;AACH,KAnB+D;AAoBhEjB,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOmB,EAAP,GAAY,CAAChB,CAAb;AACH,KAtB+D;AAuBhEL,IAAAA,UAAU,EAAE,KAvBoD;AAwBhEC,IAAAA,YAAY,EAAE;AAxBkD,GAApE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,sBAA5C,EAAoE;AAChE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOoB,EAAd;AACH,KApB+D;AAqBhElB,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOoB,EAAP,GAAY,CAACjB,CAAb;AACH,KAvB+D;AAwBhEL,IAAAA,UAAU,EAAE,KAxBoD;AAyBhEC,IAAAA,YAAY,EAAE;AAzBkD,GAApE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOqB,EAAd;AACH,KAnB8D;AAoB/DnB,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOqB,EAAP,GAAY,CAAClB,CAAb;AACH,KAtB8D;AAuB/DL,IAAAA,UAAU,EAAE,KAvBmD;AAwB/DC,IAAAA,YAAY,EAAE;AAxBiD,GAAnE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOsB,EAAd;AACH,KApB8D;AAqB/DpB,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOsB,EAAP,GAAY,CAACnB,CAAb;AACH,KAvB8D;AAwB/DL,IAAAA,UAAU,EAAE,KAxBmD;AAyB/DC,IAAAA,YAAY,EAAE;AAzBiD,GAAnE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,uBAA5C,EAAqE;AACjE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOuB,EAAd;AACH,KApBgE;AAqBjErB,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOuB,EAAP,GAAY,CAACpB,CAAb;AACH,KAvBgE;AAwBjEL,IAAAA,UAAU,EAAE,KAxBqD;AAyBjEC,IAAAA,YAAY,EAAE;AAzBmD,GAArE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,uBAA5C,EAAqE;AACjE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOwB,EAAd;AACH,KApBgE;AAqBjEtB,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOwB,EAAP,GAAY,CAACrB,CAAb;AACH,KAvBgE;AAwBjEL,IAAAA,UAAU,EAAE,KAxBqD;AAyBjEC,IAAAA,YAAY,EAAE;AAzBmD,GAArE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,wBAA5C,EAAsE;AAClE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOyB,EAAd;AACH,KAnBiE;AAoBlEvB,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOyB,EAAP,GAAY,CAACtB,CAAb;AACH,KAtBiE;AAuBlEL,IAAAA,UAAU,EAAE,KAvBsD;AAwBlEC,IAAAA,YAAY,EAAE;AAxBoD,GAAtE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,wBAA5C,EAAsE;AAClE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO0B,EAAd;AACH,KApBiE;AAqBlExB,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO0B,EAAP,GAAY,CAACvB,CAAb;AACH,KAvBiE;AAwBlEL,IAAAA,UAAU,EAAE,KAxBsD;AAyBlEC,IAAAA,YAAY,EAAE;AAzBoD,GAAtE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAO2B,GAAR,CAApB;AACH,KAnB8D;AAoB/DzB,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO2B,GAAP,GAAa1C,aAAa,CAACkB,CAAD,CAA1B;AACH,KAtB8D;AAuB/DL,IAAAA,UAAU,EAAE,KAvBmD;AAwB/DC,IAAAA,YAAY,EAAE;AAxBiD,GAAnE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAO4B,GAAR,CAApB;AACH,KApB8D;AAqB/D1B,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO4B,GAAP,GAAa3C,aAAa,CAACkB,CAAD,CAA1B;AACH,KAvB8D;AAwB/DL,IAAAA,UAAU,EAAE,KAxBmD;AAyB/DC,IAAAA,YAAY,EAAE;AAzBiD,GAAnE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO6B,EAAd;AACH,KApB8D;AAqB/D3B,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO6B,EAAP,GAAY1B,CAAZ;AACH,KAvB8D;AAwB/DL,IAAAA,UAAU,EAAE,KAxBmD;AAyB/DC,IAAAA,YAAY,EAAE;AAzBiD,GAAnE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO8B,EAAd;AACH,KAnB8D;AAoB/D5B,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO8B,EAAP,GAAY3B,CAAZ;AACH,KAtB8D;AAuB/DL,IAAAA,UAAU,EAAE,KAvBmD;AAwB/DC,IAAAA,YAAY,EAAE;AAxBiD,GAAnE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO+B,EAAd;AACH,KAnB8D;AAoB/D7B,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO+B,EAAP,GAAY5B,CAAZ;AACH,KAtB8D;AAuB/DL,IAAAA,UAAU,EAAE,KAvBmD;AAwB/DC,IAAAA,YAAY,EAAE;AAxBiD,GAAnE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOgC,EAAd;AACH,KApB8D;AAqB/D9B,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOgC,EAAP,GAAY7B,CAAZ;AACH,KAvB8D;AAwB/DL,IAAAA,UAAU,EAAE,KAxBmD;AAyB/DC,IAAAA,YAAY,EAAE;AAzBiD,GAAnE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,YAA5C,EAA0D;AACtD;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOiC,EAAd;AACH,KANqD;AAOtD/B,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOiC,EAAP,GAAY9B,CAAZ;AACH,KATqD;AAUtDL,IAAAA,UAAU,EAAE,KAV0C;AAWtDC,IAAAA,YAAY,EAAE;AAXwC,GAA1D;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,YAA5C,EAA0D;AACtD;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOkC,EAAd;AACH,KANqD;AAOtDhC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOkC,EAAP,GAAY/B,CAAZ;AACH,KATqD;AAUtDL,IAAAA,UAAU,EAAE,KAV0C;AAWtDC,IAAAA,YAAY,EAAE;AAXwC,GAA1D;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,kBAA5C,EAAgE;AAC5D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOmC,EAAR,CAApB;AACH,KAnB2D;AAoB5DjC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOmC,EAAP,GAAYlD,aAAa,CAACkB,CAAD,CAAzB;AACH,KAtB2D;AAuB5DL,IAAAA,UAAU,EAAE,KAvBgD;AAwB5DC,IAAAA,YAAY,EAAE;AAxB8C,GAAhE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,kBAA5C,EAAgE;AAC5D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOoC,GAAR,CAApB;AACH,KApB2D;AAqB5DlC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOoC,GAAP,GAAanD,aAAa,CAACkB,CAAD,CAA1B;AACH,KAvB2D;AAwB5DL,IAAAA,UAAU,EAAE,KAxBgD;AAyB5DC,IAAAA,YAAY,EAAE;AAzB8C,GAAhE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,2BAA5C,EAAyE;AACrE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOqC,EAAd;AACH,KArBoE;AAsBrEnC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOqC,EAAP,GAAY,CAAClC,CAAb;AACH,KAxBoE;AAyBrEL,IAAAA,UAAU,EAAE,KAzByD;AA0BrEC,IAAAA,YAAY,EAAE;AA1BuD,GAAzE;AA4BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,2BAA5C,EAAyE;AACrE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOsC,EAAd;AACH,KApBoE;AAqBrEpC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOsC,EAAP,GAAY,CAACnC,CAAb;AACH,KAvBoE;AAwBrEL,IAAAA,UAAU,EAAE,KAxByD;AAyBrEC,IAAAA,YAAY,EAAE;AAzBuD,GAAzE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,2BAA5C,EAAyE;AACrE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOuC,EAAd;AACH,KAnBoE;AAoBrErC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOuC,EAAP,GAAY,CAACpC,CAAb;AACH,KAtBoE;AAuBrEL,IAAAA,UAAU,EAAE,KAvByD;AAwBrEC,IAAAA,YAAY,EAAE;AAxBuD,GAAzE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,2BAA5C,EAAyE;AACrE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOwC,EAAd;AACH,KApBoE;AAqBrEtC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOwC,EAAP,GAAY,CAACrC,CAAb;AACH,KAvBoE;AAwBrEL,IAAAA,UAAU,EAAE,KAxByD;AAyBrEC,IAAAA,YAAY,EAAE;AAzBuD,GAAzE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,YAA5C,EAA0D;AACtD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOyC,EAAR,CAApB;AACH,KAnBqD;AAoBtDvC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOyC,EAAP,GAAYxD,aAAa,CAACkB,CAAD,CAAzB;AACH,KAtBqD;AAuBtDL,IAAAA,UAAU,EAAE,KAvB0C;AAwBtDC,IAAAA,YAAY,EAAE;AAxBwC,GAA1D;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,YAA5C,EAA0D;AACtD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAO0C,GAAR,CAApB;AACH,KApBqD;AAqBtDxC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO0C,GAAP,GAAazD,aAAa,CAACkB,CAAD,CAA1B;AACH,KAvBqD;AAwBtDL,IAAAA,UAAU,EAAE,KAxB0C;AAyBtDC,IAAAA,YAAY,EAAE;AAzBwC,GAA1D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,aAA5C,EAA2D;AACvD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAO2C,EAAR,CAApB;AACH,KAnBsD;AAoBvDzC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO2C,EAAP,GAAY1D,aAAa,CAACkB,CAAD,CAAzB;AACH,KAtBsD;AAuBvDL,IAAAA,UAAU,EAAE,KAvB2C;AAwBvDC,IAAAA,YAAY,EAAE;AAxByC,GAA3D;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,aAA5C,EAA2D;AACvD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAO4C,GAAR,CAApB;AACH,KApBsD;AAqBvD1C,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO4C,GAAP,GAAa3D,aAAa,CAACkB,CAAD,CAA1B;AACH,KAvBsD;AAwBvDL,IAAAA,UAAU,EAAE,KAxB2C;AAyBvDC,IAAAA,YAAY,EAAE;AAzByC,GAA3D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,sBAA5C,EAAoE;AAChE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO6C,EAAd;AACH,KApB+D;AAqBhE3C,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO6C,EAAP,GAAY,CAAC1C,CAAb;AACH,KAvB+D;AAwBhEL,IAAAA,UAAU,EAAE,KAxBoD;AAyBhEC,IAAAA,YAAY,EAAE;AAzBkD,GAApE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,sBAA5C,EAAoE;AAChE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO8C,EAAd;AACH,KApB+D;AAqBhE5C,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO8C,EAAP,GAAY,CAAC3C,CAAb;AACH,KAvB+D;AAwBhEL,IAAAA,UAAU,EAAE,KAxBoD;AAyBhEC,IAAAA,YAAY,EAAE;AAzBkD,GAApE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,iBAA5C,EAA+D;AAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO+C,EAAd;AACH,KApB0D;AAqB3D7C,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO+C,EAAP,GAAY,CAAC5C,CAAb;AACH,KAvB0D;AAwB3DL,IAAAA,UAAU,EAAE,KAxB+C;AAyB3DC,IAAAA,YAAY,EAAE;AAzB6C,GAA/D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,iBAA5C,EAA+D;AAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOgD,EAAd;AACH,KApB0D;AAqB3D9C,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOgD,EAAP,GAAY,CAAC7C,CAAb;AACH,KAvB0D;AAwB3DL,IAAAA,UAAU,EAAE,KAxB+C;AAyB3DC,IAAAA,YAAY,EAAE;AAzB6C,GAA/D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,iBAA5C,EAA+D;AAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOiD,GAAR,CAApB;AACH,KAnB0D;AAoB3D/C,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOiD,GAAP,GAAahE,aAAa,CAACkB,CAAD,CAA1B;AACH,KAtB0D;AAuB3DL,IAAAA,UAAU,EAAE,KAvB+C;AAwB3DC,IAAAA,YAAY,EAAE;AAxB6C,GAA/D;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,iBAA5C,EAA+D;AAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOkD,GAAR,CAApB;AACH,KApB0D;AAqB3DhD,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOkD,GAAP,GAAajE,aAAa,CAACkB,CAAD,CAA1B;AACH,KAvB0D;AAwB3DL,IAAAA,UAAU,EAAE,KAxB+C;AAyB3DC,IAAAA,YAAY,EAAE;AAzB6C,GAA/D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,0BAA5C,EAAwE;AACpE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOmD,EAAd;AACH,KApBmE;AAqBpEjD,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOmD,EAAP,GAAY,CAAChD,CAAb;AACH,KAvBmE;AAwBpEL,IAAAA,UAAU,EAAE,KAxBwD;AAyBpEC,IAAAA,YAAY,EAAE;AAzBsD,GAAxE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,0BAA5C,EAAwE;AACpE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOoD,EAAd;AACH,KApBmE;AAqBpElD,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOoD,EAAP,GAAY,CAACjD,CAAb;AACH,KAvBmE;AAwBpEL,IAAAA,UAAU,EAAE,KAxBwD;AAyBpEC,IAAAA,YAAY,EAAE;AAzBsD,GAAxE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,YAA5C,EAA0D;AACtD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOqD,EAAd;AACH,KAnBqD;AAoBtDnD,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOqD,EAAP,GAAYlD,CAAZ;AACH,KAtBqD;AAuBtDL,IAAAA,UAAU,EAAE,KAvB0C;AAwBtDC,IAAAA,YAAY,EAAE;AAxBwC,GAA1D;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,YAA5C,EAA0D;AACtD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOsD,EAAd;AACH,KApBqD;AAqBtDpD,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOsD,EAAP,GAAYnD,CAAZ;AACH,KAvBqD;AAwBtDL,IAAAA,UAAU,EAAE,KAxB0C;AAyBtDC,IAAAA,YAAY,EAAE;AAzBwC,GAA1D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,kBAA5C,EAAgE;AAC5D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOuD,EAAR,CAApB;AACH,KAnB2D;AAoB5DrD,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOuD,EAAP,GAAYtE,aAAa,CAACkB,CAAD,CAAzB;AACH,KAtB2D;AAuB5DL,IAAAA,UAAU,EAAE,KAvBgD;AAwB5DC,IAAAA,YAAY,EAAE;AAxB8C,GAAhE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,kBAA5C,EAAgE;AAC5D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAOZ,aAAa,CAAC,KAAKgB,CAAL,CAAOwD,GAAR,CAApB;AACH,KApB2D;AAqB5DtD,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOwD,GAAP,GAAavE,aAAa,CAACkB,CAAD,CAA1B;AACH,KAvB2D;AAwB5DL,IAAAA,UAAU,EAAE,KAxBgD;AAyB5DC,IAAAA,YAAY,EAAE;AAzB8C,GAAhE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,iBAA5C,EAA+D;AAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOyD,EAAd;AACH,KApB0D;AAqB3DvD,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOyD,EAAP,GAAY,CAACtD,CAAb;AACH,KAvB0D;AAwB3DL,IAAAA,UAAU,EAAE,KAxB+C;AAyB3DC,IAAAA,YAAY,EAAE;AAzB6C,GAA/D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,iBAA5C,EAA+D;AAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO0D,EAAd;AACH,KAnB0D;AAoB3DxD,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO0D,EAAP,GAAY,CAACvD,CAAb;AACH,KAtB0D;AAuB3DL,IAAAA,UAAU,EAAE,KAvB+C;AAwB3DC,IAAAA,YAAY,EAAE;AAxB6C,GAA/D;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,aAA5C,EAA2D;AACvD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO2D,EAAd;AACH,KApBsD;AAqBvDzD,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO2D,EAAP,GAAY,CAACxD,CAAb;AACH,KAvBsD;AAwBvDL,IAAAA,UAAU,EAAE,KAxB2C;AAyBvDC,IAAAA,YAAY,EAAE;AAzByC,GAA3D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,aAA5C,EAA2D;AACvD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO4D,EAAd;AACH,KApBsD;AAqBvD1D,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO4D,EAAP,GAAY,CAACzD,CAAb;AACH,KAvBsD;AAwBvDL,IAAAA,UAAU,EAAE,KAxB2C;AAyBvDC,IAAAA,YAAY,EAAE;AAzByC,GAA3D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,iBAA5C,EAA+D;AAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO6D,EAAd;AACH,KAnB0D;AAoB3D3D,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO6D,EAAP,GAAY,CAAC1D,CAAb;AACH,KAtB0D;AAuB3DL,IAAAA,UAAU,EAAE,KAvB+C;AAwB3DC,IAAAA,YAAY,EAAE;AAxB6C,GAA/D;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,iBAA5C,EAA+D;AAC3D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO8D,EAAd;AACH,KApB0D;AAqB3D5D,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO8D,EAAP,GAAY,CAAC3D,CAAb;AACH,KAvB0D;AAwB3DL,IAAAA,UAAU,EAAE,KAxB+C;AAyB3DC,IAAAA,YAAY,EAAE;AAzB6C,GAA/D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,eAA5C,EAA6D;AACzD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO+D,EAAd;AACH,KApBwD;AAqBzD7D,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO+D,EAAP,GAAY7E,UAAU,CAACiB,CAAD,CAAtB;AACH,KAvBwD;AAwBzDL,IAAAA,UAAU,EAAE,KAxB6C;AAyBzDC,IAAAA,YAAY,EAAE;AAzB2C,GAA7D;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,eAA5C,EAA6D;AACzD;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOgE,EAAd;AACH,KArBwD;AAsBzD9D,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOgE,EAAP,GAAY9E,UAAU,CAACiB,CAAD,CAAtB;AACH,KAxBwD;AAyBzDL,IAAAA,UAAU,EAAE,KAzB6C;AA0BzDC,IAAAA,YAAY,EAAE;AA1B2C,GAA7D;AA4BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOiE,EAAd;AACH,KAnB8D;AAoB/D/D,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOiE,EAAP,GAAY9E,UAAU,CAACT,yBAAD,EAA4ByB,CAA5B,CAAtB;AACH,KAtB8D;AAuB/DL,IAAAA,UAAU,EAAE,KAvBmD;AAwB/DC,IAAAA,YAAY,EAAE;AAxBiD,GAAnE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,qBAA5C,EAAmE;AAC/D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOkE,GAAd;AACH,KApB8D;AAqB/DhE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOkE,GAAP,GAAa/E,UAAU,CAACR,uBAAD,EAA0BwB,CAA1B,CAAvB;AACH,KAvB8D;AAwB/DL,IAAAA,UAAU,EAAE,KAxBmD;AAyB/DC,IAAAA,YAAY,EAAE;AAzBiD,GAAnE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,+BAA5C,EAA6E;AACzE;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOmE,EAAd;AACH,KANwE;AAOzEjE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOmE,EAAP,GAAYhF,UAAU,CAACT,yBAAD,EAA4ByB,CAA5B,CAAtB;AACH,KATwE;AAUzEL,IAAAA,UAAU,EAAE,KAV6D;AAWzEC,IAAAA,YAAY,EAAE;AAX2D,GAA7E;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,+BAA5C,EAA6E;AACzE;AACR;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOoE,EAAd;AACH,KARwE;AASzElE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOoE,EAAP,GAAYjF,UAAU,CAACT,yBAAD,EAA4ByB,CAA5B,CAAtB;AACH,KAXwE;AAYzEL,IAAAA,UAAU,EAAE,KAZ6D;AAazEC,IAAAA,YAAY,EAAE;AAb2D,GAA7E;AAeAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,6BAA5C,EAA2E;AACvE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOqE,GAAd;AACH,KApBsE;AAqBvEnE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOqE,GAAP,GAAalF,UAAU,CAACR,uBAAD,EAA0BwB,CAA1B,CAAvB;AACH,KAvBsE;AAwBvEL,IAAAA,UAAU,EAAE,KAxB2D;AAyBvEC,IAAAA,YAAY,EAAE;AAzByD,GAA3E;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,6BAA5C,EAA2E;AACvE;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOsE,GAAd;AACH,KANsE;AAOvEpE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOsE,GAAP,GAAanF,UAAU,CAACR,uBAAD,EAA0BwB,CAA1B,CAAvB;AACH,KATsE;AAUvEL,IAAAA,UAAU,EAAE,KAV2D;AAWvEC,IAAAA,YAAY,EAAE;AAXyD,GAA3E;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,sBAA5C,EAAoE;AAChE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOuE,GAAd;AACH,KAnB+D;AAoBhErE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOuE,GAAP,GAAapF,UAAU,CAACP,gBAAD,EAAmBuB,CAAnB,CAAvB;AACH,KAtB+D;AAuBhEL,IAAAA,UAAU,EAAE,KAvBoD;AAwBhEC,IAAAA,YAAY,EAAE;AAxBkD,GAApE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,sBAA5C,EAAoE;AAChE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOwE,GAAd;AACH,KApB+D;AAqBhEtE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOwE,GAAP,GAAarF,UAAU,CAACP,gBAAD,EAAmBuB,CAAnB,CAAvB;AACH,KAvB+D;AAwBhEL,IAAAA,UAAU,EAAE,KAxBoD;AAyBhEC,IAAAA,YAAY,EAAE;AAzBkD,GAApE;AA2BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,oBAA5C,EAAkE;AAC9D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOyE,EAAd;AACH,KAnB6D;AAoB9DvE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOyE,EAAP,GAAYtF,UAAU,CAACN,wBAAD,EAA2BsB,CAA3B,CAAtB;AACH,KAtB6D;AAuB9DL,IAAAA,UAAU,EAAE,KAvBkD;AAwB9DC,IAAAA,YAAY,EAAE;AAxBgD,GAAlE;AA0BAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,oBAA5C,EAAkE;AAC9D;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO0E,EAAd;AACH,KAN6D;AAO9DxE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO0E,EAAP,GAAYvF,UAAU,CAACL,wBAAD,EAA2BqB,CAA3B,CAAtB;AACH,KAT6D;AAU9DL,IAAAA,UAAU,EAAE,KAVkD;AAW9DC,IAAAA,YAAY,EAAE;AAXgD,GAAlE;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,kBAA5C,EAAgE;AAC5D;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO2E,EAAd;AACH,KAN2D;AAO5DzE,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAO2E,EAAP,GAAYxE,CAAZ;AACH,KAT2D;AAU5DL,IAAAA,UAAU,EAAE,KAVgD;AAW5DC,IAAAA,YAAY,EAAE;AAX8C,GAAhE;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,4BAA5C,EAA0E;AACtE;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAO4E,EAAd;AACH,KANqE;AAOtE1E,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,UAAIA,CAAC,IAAI,CAAC0E,KAAK,CAACC,OAAN,CAAc3E,CAAd,CAAN,IAA0B,OAAQA,CAAR,IAAc,QAA5C,EAAsD;AAClD,YAAI4E,EAAE,GAAG,oBAAT;AACA5E,QAAAA,CAAC,GAAGA,CAAC,CAAC6E,KAAF,CAAQD,EAAR,CAAJ;AACH;;AACD,WAAK/E,CAAL,CAAO4E,EAAP,GAAYzE,CAAZ;AACH,KAbqE;AActEL,IAAAA,UAAU,EAAE,KAd0D;AAetEC,IAAAA,YAAY,EAAE;AAfwD,GAA1E;AAiBAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,kBAA5C,EAAgE;AAC5D;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOiF,EAAd;AACH,KAN2D;AAO5D/E,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOiF,EAAP,GAAY9E,CAAZ;AACH,KAT2D;AAU5DL,IAAAA,UAAU,EAAE,KAVgD;AAW5DC,IAAAA,YAAY,EAAE;AAX8C,GAAhE;AAaAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,UAAU,CAACM,SAAjC,EAA4C,4BAA5C,EAA0E;AACtE;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOkF,EAAd;AACH,KANqE;AAOtEhF,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,UAAIA,CAAC,IAAI,CAAC0E,KAAK,CAACC,OAAN,CAAc3E,CAAd,CAAN,IAA0B,OAAQA,CAAR,IAAc,QAA5C,EAAsD;AAClD,YAAI4E,EAAE,GAAG,oBAAT;AACA5E,QAAAA,CAAC,GAAGA,CAAC,CAAC6E,KAAF,CAAQD,EAAR,CAAJ;AACH;;AACD,WAAK/E,CAAL,CAAOkF,EAAP,GAAY/E,CAAZ;AACH,KAbqE;AActEL,IAAAA,UAAU,EAAE,KAd0D;AAetEC,IAAAA,YAAY,EAAE;AAfwD,GAA1E;;AAiBAV,EAAAA,UAAU,CAACM,SAAX,CAAqBwF,UAArB,GAAkC,UAAUC,IAAV,EAAgB;AAC9C,QAAIC,UAAU,GAAG/F,MAAM,CAACK,SAAP,CAAiBwF,UAAjB,CAA4B3F,IAA5B,CAAiC,IAAjC,EAAuC4F,IAAvC,CAAjB;;AACA,QAAIC,UAAJ,EAAgB;AACZ,aAAOA,UAAP;AACH;;AACD,QAAI,KAAKC,0BAAL,IAAmC,IAAnC,IAA2ClG,eAAe,CAAC,KAAKkG,0BAAN,EAAkCF,IAAlC,CAA9D,EAAuG;AACnG,aAAOhG,eAAe,CAAC,KAAKkG,0BAAN,EAAkCF,IAAlC,CAAtB;AACH;;AACD,QAAI,KAAKG,0BAAL,IAAmC,IAAnC,IAA2CnG,eAAe,CAAC,KAAKmG,0BAAN,EAAkCH,IAAlC,CAA9D,EAAuG;AACnG,aAAOhG,eAAe,CAAC,KAAKmG,0BAAN,EAAkCH,IAAlC,CAAtB;AACH;;AACD,WAAO,IAAP;AACH,GAZD;AAaA;AACJ;AACA;AACA;AACA;;;AACI/F,EAAAA,UAAU,CAACM,SAAX,CAAqB6F,gBAArB,GAAwC,UAAUC,SAAV,EAAqB;AACzD,SAAKzF,CAAL,CAAOwF,gBAAP,CAAwBC,SAAxB;AACH,GAFD;AAGA;AACJ;AACA;AACA;AACA;;;AACIpG,EAAAA,UAAU,CAACM,SAAX,CAAqB+F,eAArB,GAAuC,UAAUC,aAAV,EAAyB;AAC5D,QAAIC,EAAE,GAAG,KAAK5F,CAAL,CAAO6F,EAAP,CAAUF,aAAV,CAAT;AACA,WAAQC,EAAR;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;;;AACIvG,EAAAA,UAAU,CAACM,SAAX,CAAqBmG,iBAArB,GAAyC,UAAUC,WAAV,EAAuB;AAC5D,QAAIH,EAAE,GAAG,KAAK5F,CAAL,CAAOgG,EAAP,CAAUD,WAAV,CAAT;AACA,WAAQH,EAAR;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;;;AACIvG,EAAAA,UAAU,CAACM,SAAX,CAAqBsG,eAArB,GAAuC,UAAUN,aAAV,EAAyB;AAC5D,QAAIC,EAAE,GAAG,KAAK5F,CAAL,CAAOkG,EAAP,CAAUP,aAAV,CAAT;AACA,WAAQC,EAAR;AACH,GAHD;AAIA;AACJ;AACA;AACA;AACA;;;AACIvG,EAAAA,UAAU,CAACM,SAAX,CAAqBwG,iBAArB,GAAyC,UAAUJ,WAAV,EAAuB;AAC5D,QAAIH,EAAE,GAAG,KAAK5F,CAAL,CAAOoG,EAAP,CAAUL,WAAV,CAAT;AACA,WAAQH,EAAR;AACH,GAHD;;AAIA,SAAOvG,UAAP;AACH,CAv4D6C,CAu4D5CN,cAv4D4C,CAA9C;;AAw4DA,SAASM,UAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { HorizontalAlignment_$type } from \"igniteui-react-core\";\nimport { VerticalAlignment_$type } from \"igniteui-react-core\";\nimport { Visibility_$type } from \"igniteui-react-core\";\nimport { YAxisLabelLocation_$type } from \"./YAxisLabelLocation\";\nimport { XAxisLabelLocation_$type } from \"./XAxisLabelLocation\";\nimport { IgrDomainChart } from \"./igr-domain-chart\";\nimport { brushToString, stringToBrush, ensureBool, ensureEnum, arrayFindByName } from \"igniteui-react-core\";\n/**\n * Represents a base class for domain charts with X/Y axes\n*/\nvar IgrXYChart = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrXYChart, _super);\n    function IgrXYChart(props) {\n        return _super.call(this, props) || this;\n    }\n    Object.defineProperty(IgrXYChart.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisFormatLabel\", {\n        /**\n         * Gets or sets function which takes an context object and returns a formatted label for the X-axis.\n        *\n        * To customize the text of the x-axis label, set `xAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be your data item.\n        *\n        * ```ts\n        * formatX(item: any): string {\n        *     return \"[ \" + item.label + \"! ]\";\n        * }\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisFormatLabel=\"formatX\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.t0;\n        },\n        set: function (v) {\n            this.i.t0 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisFormatLabel\", {\n        /**\n         * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.\n        *\n        * To customize the text of the y-axis label, set `yAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be the numeric value corresponding to a position on the y-axis.\n        *\n        * ```ts\n        * formatY(value: any): string {\n        *     return \"[ \" + value+ \"! ]\";\n        * }\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisFormatLabel=\"formatY\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.t1;\n        },\n        set: function (v) {\n            this.i.t1 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelLeftMargin\", {\n        /**\n         * Gets or sets the left margin of labels on the X-axis\n        *\n        * Use the `xAxisLabelLeftMargin` property to apply a margin left of the x-axis labels.\n        *\n        * ```ts\n        * this.chart.xAxisLabelLeftMargin =\"100\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisLabelLeftMargin={100}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vh;\n        },\n        set: function (v) {\n            this.i.vh = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTopMargin\", {\n        /**\n         * Gets or sets the top margin of labels on the X-axis\n        *\n        * Use the `xAxisLabelTopMargin` property to apply a margin above the x-axis labels.\n        *\n        * ```ts\n        * this.chart.xAxisTitleTopMargin=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleTopMargin\t={250}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vj;\n        },\n        set: function (v) {\n            this.i.vj = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelRightMargin\", {\n        /**\n         * Gets or sets the right margin of labels on the X-axis\n        *\n        * Use the `xAxisLabelRightMargin` property to apply a margin right of the x-axis labels.\n        *\n        * ```ts\n        * this.chart.xAxisLabelRightMargin=\"100\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisLabelRightMargin={250}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vi;\n        },\n        set: function (v) {\n            this.i.vi = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin of labels on the X-axis\n        *\n        * Use the `xAxisLabelBottomMargin` property to apply a margin below the x-axis labels.\n        *\n        * ```ts\n        * this.chart.xAxisLabelBottomMargin =\"100\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisLabelBottomMargin={100}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vg;\n        },\n        set: function (v) {\n            this.i.vg = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelLeftMargin\", {\n        /**\n         * Gets or sets the left margin of labels on the Y-axis\n        *\n        * Use the `yAxisLabelLeftMargin` property to apply a margin left of the y-axis labels.\n        *\n        * ```ts\n        * this.chart. yAxisLabelLeftMargin=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t yAxisLabelLeftMargin={250}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vy;\n        },\n        set: function (v) {\n            this.i.vy = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTopMargin\", {\n        /**\n         * Gets or sets the top margin of labels on the Y-axis\n        *\n        * Use the `yAxisLabelTopMargin` property to apply a margin above the y-axis labels.\n        *\n        * ```ts\n        * this.chart.yAxisLabelTopMargin=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelTopMargin\t={250}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.v0;\n        },\n        set: function (v) {\n            this.i.v0 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelRightMargin\", {\n        /**\n         * Gets or sets the right margin of labels on the Y-axis\n        *\n        * Use the `yAxisLabelRightMargin` property to apply a margin right of the y-axis labels.\n        *\n        * ```ts\n        * this.chart.yAxisLabelRightMargin=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelRightMargin={250}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vz;\n        },\n        set: function (v) {\n            this.i.vz = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin of labels on the Y-axis\n        *\n        * Use the `yAxisLabelBottomMargin` property to apply a margin below the y-axis labels.\n        *\n        * ```ts\n        * this.chart.yAxisLabelBottomMargin=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelBottomMargin={250}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vx;\n        },\n        set: function (v) {\n            this.i.vx = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTextColor\", {\n        /**\n         * Gets or sets color of labels on the X-axis\n        *\n        * To change the color of x-axis labels, set the `xAxisLabelTextColor` property to a color string.\n        *\n        * ```ts\n        * this.chart.xAxisLabelTextColor=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisLabelTextColor=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.z5);\n        },\n        set: function (v) {\n            this.i.z5 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTextColor\", {\n        /**\n         * Gets or sets color of labels on the Y-axis\n        *\n        * To change the color of y-axis labels, set the `yAxisLabelTextColor` property to a color string.\n        *\n        * ```ts\n        * this.chart.yAxisLabelTextColor=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelTextColor=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.aac);\n        },\n        set: function (v) {\n            this.i.aac = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"actualXAxisLabelTextColor\", {\n        /**\n         * Gets the actual color of labels on the X-axis\n        */\n        get: function () {\n            return brushToString(this.i.z3);\n        },\n        set: function (v) {\n            this.i.z3 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"actualYAxisLabelTextColor\", {\n        /**\n         * Gets the actual color of labels on the Y-axis\n        */\n        get: function () {\n            return brushToString(this.i.z4);\n        },\n        set: function (v) {\n            this.i.z4 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleMargin\", {\n        /**\n         * Gets or sets the margin around a title on the X-axis\n        *\n        * Use the `xAxisTitleMargin` property to set a margin around the y-axis title.\n        */\n        get: function () {\n            return this.i.vs;\n        },\n        set: function (v) {\n            this.i.vs = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleMargin\", {\n        /**\n         * Gets or sets the margin around a title on the Y-axis\n        *\n        * Use the `yAxisTitleMargin` property to set a margin around the y-axis title.\n        */\n        get: function () {\n            return this.i.v9;\n        },\n        set: function (v) {\n            this.i.v9 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleLeftMargin\", {\n        /**\n         * Gets or sets the left margin of a title on the X-axis\n        *\n        * Use the `xAxisTitleLeftMargin` property to apply a margin left of the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleLeftMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleLeftMargin={150}\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vr;\n        },\n        set: function (v) {\n            this.i.vr = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleLeftMargin\", {\n        /**\n         * Gets or sets the left margin of a title on the Y-axis\n        *\n        * Use the `yAxisTitleLeftMargin` property to apply a margin left of the y-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleLeftMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleLeftMargin={150}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.v8;\n        },\n        set: function (v) {\n            this.i.v8 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTopMargin\", {\n        /**\n         * Gets or sets the top margin of a title on the X-axis\n        *\n        * Use the `xAxisTitleTopMargin` property to apply a margin above the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleTopMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleTopMargin\t={150}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vu;\n        },\n        set: function (v) {\n            this.i.vu = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTopMargin\", {\n        /**\n         * Gets or sets the top margin of a title on the Y-axis\n        *\n        * Use the `yAxisTitleTopMargin` property to apply a margin above the y-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleTopMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleTopMargin\t={150}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.wb;\n        },\n        set: function (v) {\n            this.i.wb = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleRightMargin\", {\n        /**\n         * Gets or sets the right margin of a title on the X-axis\n        *\n        * Use the `xAxisTitleRightMargin` property to apply a margin right of the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleRightMargin=\"100\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleRightMargin=\"100\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vt;\n        },\n        set: function (v) {\n            this.i.vt = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleRightMargin\", {\n        /**\n         * Gets or sets the right margin of a title on the Y-axis\n        *\n        * Use the `yAxisTitleRightMargin` property to apply a margin right of the y-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleRightMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleRightMargin={150}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.wa;\n        },\n        set: function (v) {\n            this.i.wa = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin of a title on the X-axis\n        *\n        * Use the `xAxisTitleBottomMargin` property to apply a margin below the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleBottomMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleBottomMargin={250}\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vq;\n        },\n        set: function (v) {\n            this.i.vq = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleBottomMargin\", {\n        /**\n         * Gets or sets the bottom margin of a title on the Y-axis\n        *\n        * Use the `yAxisTitleBottomMargin` property to apply a margin below the y-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleBottomMargin=\"150\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleBottomMargin\t={150}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.v7;\n        },\n        set: function (v) {\n            this.i.v7 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTextColor\", {\n        /**\n         * Gets or sets color of title on the X-axis\n        *\n        * To change the color of the x-axis title, set the `xAxisTitleTextColor` property to a color string.\n        *\n        * ```ts\n        * this.chart.xAxisTitleTextColor=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisTitleTextColor=\"green\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.aab);\n        },\n        set: function (v) {\n            this.i.aab = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTextColor\", {\n        /**\n         * Gets or sets color of title on the Y-axis\n        *\n        * To change the color of the y-axis title, set the `yAxisTitleTextColor` property to a color string.\n        *\n        * ```ts\n        * this.chart.yAxisTitleTextColor=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleTextColor=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.aai);\n        },\n        set: function (v) {\n            this.i.aai = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelTextStyle\", {\n        /**\n         * Gets or sets CSS font property for labels on X-axis\n        *\n        * To change the font of x-axis labels, set the `xAxisLabelTextStyle` property.\n        *\n        * ```ts\n        * this.chart.xAxisLabelTextStyle=\"italic 15px arial, sans-serif\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisLabelTextStyle=\"italic 15px arial, sans-serif\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.w5;\n        },\n        set: function (v) {\n            this.i.w5 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelTextStyle\", {\n        /**\n         * Gets or sets CSS font property for labels on Y-axis\n        *\n        * To change the font of x-axis labels, set the `yAxisLabelTextStyle` property.\n        *\n        * ```ts\n        * this.chart. yAxisLabelTextStyle=\"italic 15px arial, sans-serif\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t yAxisLabelTextStyle=\"italic 15px arial, sans-serif\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ya;\n        },\n        set: function (v) {\n            this.i.ya = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleTextStyle\", {\n        /**\n         * Gets or sets CSS font property for title on X-axis\n        *\n        * To change the font of the x-axis title, set the `xAxisTitleTextStyle` property.\n        *\n        * ```ts\n        * this.chart.xAxisTitleTextStyle=\"italic 15px arial, sans-serif\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleTextStyle=\"italic 15px arial, sans-serif\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.xt;\n        },\n        set: function (v) {\n            this.i.xt = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleTextStyle\", {\n        /**\n         * Gets or sets CSS font property for title on Y-axis\n        *\n        * To change the font of the x-axis title, set the `yAxisTitleTextStyle` property.\n        *\n        * ```ts\n        * this.chart.yAxisTitleTextStyle=\"italic 15px arial, sans-serif\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleTextStyle=\"italic 15px arial, sans-serif\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.yy;\n        },\n        set: function (v) {\n            this.i.yy = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabel\", {\n        /**\n         * Gets or sets the format for labels along the X-axis.\n        */\n        get: function () {\n            return this.i.we;\n        },\n        set: function (v) {\n            this.i.we = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabel\", {\n        /**\n         * Gets or sets the property or string from which the labels are derived.\n        */\n        get: function () {\n            return this.i.wf;\n        },\n        set: function (v) {\n            this.i.wf = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisMajorStroke\", {\n        /**\n         * Gets or sets the color to apply to major gridlines along the X-axis.\n        *\n        * Set `xAxisMajorStroke` to control the color of major gridlines extending vertically from the x-axis.\n        *\n        * ```ts\n        * this.chart.xAxisMajorStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisMajorStroke=\"green\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.z6);\n        },\n        set: function (v) {\n            this.i.z6 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisMajorStroke\", {\n        /**\n         * Gets or sets the color to apply to major gridlines along the Y-axis.\n        *\n        * Set `yAxisMajorStroke` to control the color of major gridlines extending horizontally from the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisMajorStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        *     yAxisMajorStroke=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.aad);\n        },\n        set: function (v) {\n            this.i.aad = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisMajorStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to major gridlines along the X-axis.\n        *\n        * Set `xAxisMajorStrokeThickness` to control the thickness of major gridlines extending vertically from the x-axis.\n        *\n        * ```ts\n        * this.chart.xAxisMajorStrokeThickness=\"3\" ;\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisMajorStrokeThickness=\"3\"\n        * \txAxisExtent\t={250}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vk;\n        },\n        set: function (v) {\n            this.i.vk = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisMajorStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to major gridlines along the Y-axis.\n        *\n        * Set `yAxisMajorStrokeThickness` to control the thickness of major gridlines extending horizontally from the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisMajorStrokeThickness=\"2\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisMajorStrokeThickness={2}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.v1;\n        },\n        set: function (v) {\n            this.i.v1 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisMinorStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to minor gridlines along the X-axis.\n        *\n        * Set `xAxisMinorStrokeThickness` to control the thickness of minor gridlines extending vertically from the x-axis.\n        *\n        * ```ts\n        * this.chart.xAxisMinorStrokeThickness=\"3\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisMinorStrokeThickness=\"3\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vl;\n        },\n        set: function (v) {\n            this.i.vl = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisMinorStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to minor gridlines along the Y-axis.\n        *\n        * Set `yAxisMinorStrokeThickness` to control the thickness of minor gridlines extending horizontally from the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisMinorStrokeThickness=\"3\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisMinorStrokeThickness={3}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.v2;\n        },\n        set: function (v) {\n            this.i.v2 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisStrip\", {\n        /**\n         * Gets or sets the color to apply to stripes along the X-axis.\n        *\n        * Set `xAxisStrip` to control the alternating color of stripes extending vertically from the x-axis.\n        *\n        * ```ts\n        * this.chart.xAxisStrip=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisStrip=\"green\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.z8);\n        },\n        set: function (v) {\n            this.i.z8 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisStrip\", {\n        /**\n         * Gets or sets the color to apply to stripes along the Y-axis.\n        *\n        * Set `yAxisStrip` to control the alternating color of stripes extending horizontally from the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisStrip=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisStrip=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.aaf);\n        },\n        set: function (v) {\n            this.i.aaf = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisStroke\", {\n        /**\n         * Gets or sets the color to apply to the X-axis line.\n        *\n        * Set `xAxisStroke` to control the color of the x-axis line.\n        *\n        * ```ts\n        * this.chart.xAxisStroke=\"green\"\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisStroke=\"green\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.z9);\n        },\n        set: function (v) {\n            this.i.z9 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisStroke\", {\n        /**\n         * Gets or sets the color to apply to the Y-axis line.\n        *\n        * Set `yAxisStroke` to control the color of the y-axis line.\n        *\n        * ```ts\n        * this.chart.yAxisStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisStroke=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.aag);\n        },\n        set: function (v) {\n            this.i.aag = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to the X-axis line.\n        *\n        * Set `xAxisStrokeThickness` to control the thickness of the x-axis line.\n        *\n        * ```ts\n        * this.chart.xAxisStrokeThickness=\"2\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisStrokeThickness={2}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vm;\n        },\n        set: function (v) {\n            this.i.vm = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to the Y-axis line.\n        *\n        * Set `yAxisStrokeThickness` to control the thickness of the y-axis line.\n        *\n        * ```ts\n        * this.chart. yAxisStrokeThickness=\"2\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t yAxisStrokeThickness={2}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.v3;\n        },\n        set: function (v) {\n            this.i.v3 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTickLength\", {\n        /**\n         * Gets or sets the length of tickmarks along the X-axis.\n        *\n        * Set `xAxisTickLength` to control the length of tickmarks extending vertically from the x-axis line.\n        *\n        * ```ts\n        * this.chart.xAxisTickLength=\"25\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTickLength\t={25}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vn;\n        },\n        set: function (v) {\n            this.i.vn = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTickLength\", {\n        /**\n         * Gets or sets the length of tickmarks along the Y-axis.\n        *\n        * Set `yAxisTickLength` to control the length of tickmarks extending horizontally from the y-axis line.\n        *\n        * ```ts\n        * this.chart.yAxisTickLength=\"25\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTickLength\t={25}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.v4;\n        },\n        set: function (v) {\n            this.i.v4 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTickStroke\", {\n        /**\n         * Gets or sets the color to apply to tickmarks along the X-axis.\n        *\n        * Set `xAxisTickStroke` to control the color of tickmarks extending vertically from the x-axis line.\n        *\n        * ```ts\n        * this.chart. xAxisTickStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisTickStroke=\"green\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.aaa);\n        },\n        set: function (v) {\n            this.i.aaa = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTickStroke\", {\n        /**\n         * Gets or sets the color to apply to tickmarks along the Y-axis.\n        *\n        * Set `yAxisTickStroke` to control the color of tickmarks extending horizontally from the y-axis line.\n        *\n        * ```ts\n        * this.chart.yAxisTickStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTickStroke=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.aah);\n        },\n        set: function (v) {\n            this.i.aah = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTickStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to tickmarks along the X-axis.\n        *\n        * Set `xAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the x-axis line.\n        *\n        * ```ts\n        * this.chart.xAxisTickStrokeThickness=\"20\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTickStrokeThickness={20}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vo;\n        },\n        set: function (v) {\n            this.i.vo = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTickStrokeThickness\", {\n        /**\n         * Gets or sets the thickness to apply to tickmarks along the Y-axis.\n        *\n        * Set `yAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the y-axis line.\n        *\n        * ```ts\n        * this.chart.yAxisTickStrokeThickness=\"25\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTickStrokeThickness\t={25}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.v5;\n        },\n        set: function (v) {\n            this.i.v5 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitle\", {\n        /**\n         * Gets or sets the Text to display below the X-axis.\n        *\n        * Set `xAxisTitle` to display a label adjacent to the x-axis.\n        *\n        * ```ts\n        * this.chart. xAxisTitle=\"x axis\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitle=\"x axis\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.xk;\n        },\n        set: function (v) {\n            this.i.xk = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitle\", {\n        /**\n         * Gets or sets the Text to display to the left of the Y-axis.\n        *\n        * Set `yAxisTitle` to display a label adjacent to the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisTitle=\"y axis\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitle=\"y axis\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.yp;\n        },\n        set: function (v) {\n            this.i.yp = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisMinorStroke\", {\n        /**\n         * Gets or sets the color to apply to minor gridlines along the X-axis.\n        *\n        * Set `xAxisMinorStroke` to control the color of minor gridlines extending vertically from the x-axis.\n        *\n        * ```ts\n        * this.chart.xAxisExtent=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisMinorStroke=\"green\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.z7);\n        },\n        set: function (v) {\n            this.i.z7 = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisMinorStroke\", {\n        /**\n         * Gets or sets the color to apply to minor gridlines along the Y-axis.\n        *\n        * Set `yAxisMinorStroke` to control the color of minor gridlines extending horizontally from the y-axis.\n        *\n        * ```ts\n        * this.chart.yAxisMinorStroke=\"green\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisMinorStroke=\"green\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return brushToString(this.i.aae);\n        },\n        set: function (v) {\n            this.i.aae = stringToBrush(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelAngle\", {\n        /**\n         * Gets or sets the angle of rotation for labels along the X-axis.\n        *\n        * To control the rotation of labels on the x-axis, set the `xAxisLabelAngle` property to a number of rotational degrees.\n        *\n        * ```ts\n        * this.chart.xAxisLabelAngle=\"45\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisLabelAngle={45}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vf;\n        },\n        set: function (v) {\n            this.i.vf = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelAngle\", {\n        /**\n         * Gets or sets the angle of rotation for labels along the Y-axis.\n        *\n        * To control the rotation of labels on the y-axis, set the `yAxisLabelAngle` property to a number of rotational degrees.\n        *\n        * ```ts\n        * this.chart.yAxisLabelAngle=\"25\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelAngle\t={25}\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vw;\n        },\n        set: function (v) {\n            this.i.vw = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisExtent\", {\n        /**\n         * Gets or sets the distance between the X-axis and the bottom of the chart.\n        *\n        * To allocate space between the x-axis and the edge of the chart, set the `xAxisExtent` property.\n        *\n        * ```ts\n        * this.chart.xAxisExtent=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisExtent\t={250}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ve;\n        },\n        set: function (v) {\n            this.i.ve = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisExtent\", {\n        /**\n         * Gets or sets the distance between the Y-axis and the left edge of the chart.\n        *\n        * To allocate space between the x-axis and the edge of the chart, set the `xAxisExtent` property.\n        *\n        * ```ts\n        * this.chart.xAxisExtent=\"250\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisExtent\t={250}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vv;\n        },\n        set: function (v) {\n            this.i.vv = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleAngle\", {\n        /**\n         * Gets or sets the angle of rotation for the X-axis title.\n        *\n        * Set `xAxisTitleAngle` to control the rotation of the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleAngle=\"50\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisTitleAngle\t={50}\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.vp;\n        },\n        set: function (v) {\n            this.i.vp = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleAngle\", {\n        /**\n         * Gets or sets the angle of rotation for the Y-axis title.\n        *\n        * Set `yAxisTitleAngle` to control the rotation of the y-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleAngle=\"25\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleAngle\t={24}\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.v6;\n        },\n        set: function (v) {\n            this.i.v6 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisInverted\", {\n        /**\n         * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.\n        *\n        * To reverse the direction of items along the x-axis, set the `xAxisInverted` property to true.\n        *\n        * ```ts\n        * this.chart.XAxisInverted=\"True\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tXAxisInverted=\"True\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.ua;\n        },\n        set: function (v) {\n            this.i.ua = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisInverted\", {\n        /**\n         * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.\n        *\n        * You can use `yAxisInverted` to invert the scale of the y axis like this:\n        *\n        * ```ts\n        * this.chart.yAxisInverted=\"true\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t yAxisInverted=\"true\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        *\n        * The default value of `yAxisInverted` is false.\n        */\n        get: function () {\n            return this.i.ub;\n        },\n        set: function (v) {\n            this.i.ub = ensureBool(v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisTitleAlignment\", {\n        /**\n         * Gets or sets Horizontal alignment of the X-axis title.\n        *\n        * Set `xAxisTitleAlignment` to control the horizontal alignment of the x-axis title.\n        *\n        * ```ts\n        * this.chart.xAxisTitleAlignment=\"right\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisTitleAlignment=\"right\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.zl;\n        },\n        set: function (v) {\n            this.i.zl = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisTitleAlignment\", {\n        /**\n         * Gets or sets Vertical alignment of the Y-axis title.\n        *\n        * Set `yAxisTitleAlignment` to control the vertical alignment of the x-axis title.\n        *\n        * ```ts\n        * this.chart.yAxisTitleAlignment=\"bottom\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisTitleAlignment=\"bottom\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.aao;\n        },\n        set: function (v) {\n            this.i.aao = ensureEnum(VerticalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelHorizontalAlignment\", {\n        /**\n         * Gets or sets Horizontal alignment of X-axis labels.\n        */\n        get: function () {\n            return this.i.zk;\n        },\n        set: function (v) {\n            this.i.zk = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelHorizontalAlignment\", {\n        /**\n         * Gets or sets Horizontal alignment of Y-axis labels.\n        *\n        * Set the `yAxisLabelHorizontalAlignment` property to change the horizontal alignment of y-axis labels.\n        */\n        get: function () {\n            return this.i.zm;\n        },\n        set: function (v) {\n            this.i.zm = ensureEnum(HorizontalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelVerticalAlignment\", {\n        /**\n         * Gets or sets Vertical alignment of X-axis labels.\n        *\n        * Use the `xAxisLabelVerticalAlignment` property to change the vertical position of x-axis labels.\n        *\n        * ```ts\n        * this.chart.xAxisLabelVerticalAlignment=\"bottom\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \txAxisLabelVerticalAlignment=\"bottom\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.aam;\n        },\n        set: function (v) {\n            this.i.aam = ensureEnum(VerticalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelVerticalAlignment\", {\n        /**\n         * Gets or sets Vertical alignment of Y-axis labels.\n        */\n        get: function () {\n            return this.i.aan;\n        },\n        set: function (v) {\n            this.i.aan = ensureEnum(VerticalAlignment_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelVisibility\", {\n        /**\n         * Gets or sets Visibility of X-axis labels.\n        *\n        * To hide the x-axis labels, set `xAxisLabelVisibility` to collapsed.\n        *\n        * ```ts\n        * this.chart.xAxisLabelVisibility=\"collapsed\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \t xAxisLabelVisibility=\"collapsed\"\n        * \tdataSource={this.state.data}>\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.aar;\n        },\n        set: function (v) {\n            this.i.aar = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelVisibility\", {\n        /**\n         * Gets or sets Visibility of Y-axis labels.\n        *\n        * To hide the y-axis labels, set `yAxisLabelVisibility` to collapsed.\n        *\n        * ```ts\n        * this.chart.yAxisLabelVisibility=\"collapsed\"\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelVisibility=\"collapsed\"\n        * \tdataSource={this.state.data}\n        * \tchartType=\"stepArea\" >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.aas;\n        },\n        set: function (v) {\n            this.i.aas = ensureEnum(Visibility_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelLocation\", {\n        /**\n         * Gets or sets location of Y-axis labels, relative to the plot area.\n        *\n        * Set the `yAxisLabelLocation` property to change the location of the y-axis and its labels.\n        *\n        * ```ts\n        * this.chart.yAxisLabelLocation=\"outsideRight\";\n        * ```\n        *\n        * ```ts\n        * <IgrCategoryChart\n        * \tyAxisLabelLocation=\"outsideRight\"\n        * \tdataSource={this.state.data} >\n        * </IgrCategoryChart>\n        * ```\n        */\n        get: function () {\n            return this.i.t7;\n        },\n        set: function (v) {\n            this.i.t7 = ensureEnum(YAxisLabelLocation_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelLocation\", {\n        /**\n         * Gets or sets location of X-axis labels, relative to the plot area.\n        */\n        get: function () {\n            return this.i.t5;\n        },\n        set: function (v) {\n            this.i.t5 = ensureEnum(XAxisLabelLocation_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelFormat\", {\n        /**\n         * Gets or sets the format string for the X axis label.\n        */\n        get: function () {\n            return this.i.ww;\n        },\n        set: function (v) {\n            this.i.ww = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"xAxisLabelFormatSpecifiers\", {\n        /**\n         * Gets or sets the format specifiers to use with the XAxisLabelFormat string.\n        */\n        get: function () {\n            return this.i.tu;\n        },\n        set: function (v) {\n            if (v && !Array.isArray(v) && typeof (v) == \"string\") {\n                var re = /\\s*(?:,|\\s|$)\\s*/gm;\n                v = v.split(re);\n            }\n            this.i.tu = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelFormat\", {\n        /**\n         * Gets or sets the format string for the Y axis label.\n        */\n        get: function () {\n            return this.i.x1;\n        },\n        set: function (v) {\n            this.i.x1 = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrXYChart.prototype, \"yAxisLabelFormatSpecifiers\", {\n        /**\n         * Gets or sets the format specifiers to use with the YAxisLabelFormat string.\n        */\n        get: function () {\n            return this.i.tv;\n        },\n        set: function (v) {\n            if (v && !Array.isArray(v) && typeof (v) == \"string\") {\n                var re = /\\s*(?:,|\\s|$)\\s*/gm;\n                v = v.split(re);\n            }\n            this.i.tv = v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrXYChart.prototype.findByName = function (name) {\n        var baseResult = _super.prototype.findByName.call(this, name);\n        if (baseResult) {\n            return baseResult;\n        }\n        if (this.xAxisLabelFormatSpecifiers != null && arrayFindByName(this.xAxisLabelFormatSpecifiers, name)) {\n            return arrayFindByName(this.xAxisLabelFormatSpecifiers, name);\n        }\n        if (this.yAxisLabelFormatSpecifiers != null && arrayFindByName(this.yAxisLabelFormatSpecifiers, name)) {\n            return arrayFindByName(this.yAxisLabelFormatSpecifiers, name);\n        }\n        return null;\n    };\n    /**\n     * Called by the UI framework to provide a UI container for rendering this control.\n    \r\n    * @param container  * The UI container element.\n    */\n    IgrXYChart.prototype.provideContainer = function (container) {\n        this.i.provideContainer(container);\n    };\n    /**\n     * Converts the given visual location to a data value.\n    \r\n    * @param unscaledValue  * The x-coordinate of the location to scale.\n    */\n    IgrXYChart.prototype.getScaledValueX = function (unscaledValue) {\n        var iv = this.i.va(unscaledValue);\n        return (iv);\n    };\n    /**\n     * Converts the given data value to a visual location.\n    \r\n    * @param scaledValue  * The data value to un-scale.\n    */\n    IgrXYChart.prototype.getUnscaledValueX = function (scaledValue) {\n        var iv = this.i.vc(scaledValue);\n        return (iv);\n    };\n    /**\n     * Converts the given visual location to a data value.\n    \r\n    * @param unscaledValue  * The y-coordinate of the location to scale.\n    */\n    IgrXYChart.prototype.getScaledValueY = function (unscaledValue) {\n        var iv = this.i.vb(unscaledValue);\n        return (iv);\n    };\n    /**\n     * Converts the given data value to a visual location.\n    \r\n    * @param scaledValue  * The data value to un-scale.\n    */\n    IgrXYChart.prototype.getUnscaledValueY = function (scaledValue) {\n        var iv = this.i.vd(scaledValue);\n        return (iv);\n    };\n    return IgrXYChart;\n}(IgrDomainChart));\nexport { IgrXYChart };\n"]},"metadata":{},"sourceType":"module"}