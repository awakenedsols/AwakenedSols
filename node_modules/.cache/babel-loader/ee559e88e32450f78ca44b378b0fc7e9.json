{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrAnchoredRadialSeries } from \"./igr-anchored-radial-series\";\nimport { RadialColumnSeries } from \"./RadialColumnSeries\";\n/**\n * Represents a IgxDataChartComponent radial column series.\n * Compare values across categories by using radial rectangles.\n*/\n\nvar IgrRadialColumnSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrRadialColumnSeries, _super);\n\n  function IgrRadialColumnSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrRadialColumnSeries.prototype.createImplementation = function () {\n    return new RadialColumnSeries();\n  };\n\n  Object.defineProperty(IgrRadialColumnSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialColumnSeries.prototype, \"isColumn\", {\n    /**\n     * Gets whether the current series shows a column shape.\n    */\n    get: function () {\n      return this.i.dh;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialColumnSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n    /**\n     * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n    */\n    get: function () {\n      return this.i.d2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialColumnSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function () {\n      return this.i.t8;\n    },\n    set: function (v) {\n      this.i.t8 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrRadialColumnSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function () {\n      return this.i.t9;\n    },\n    set: function (v) {\n      this.i.t9 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * When overridden in a derived class, is invoked whenever application code or internal processes\n   * call ApplyTemplate.\n  \r\n  */\n\n  IgrRadialColumnSeries.prototype.onApplyTemplate = function () {\n    this.i.ac();\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n\n  IgrRadialColumnSeries.prototype.getItemSpan = function () {\n    var iv = this.i.ga();\n    return iv;\n  };\n\n  return IgrRadialColumnSeries;\n}(IgrAnchoredRadialSeries);\n\nexport { IgrRadialColumnSeries };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-radial-column-series.js"],"names":["__extends","IgrAnchoredRadialSeries","RadialColumnSeries","IgrRadialColumnSeries","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","dh","d2","t8","set","v","t9","onApplyTemplate","ac","getItemSpan","iv","ga"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrAnchoredRadialSeries } from \"./igr-anchored-radial-series\";\nimport { RadialColumnSeries } from \"./RadialColumnSeries\";\n/**\n * Represents a IgxDataChartComponent radial column series.\n * Compare values across categories by using radial rectangles.\n*/\nvar IgrRadialColumnSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrRadialColumnSeries, _super);\n    function IgrRadialColumnSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrRadialColumnSeries.prototype.createImplementation = function () {\n        return new RadialColumnSeries();\n    };\n    Object.defineProperty(IgrRadialColumnSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialColumnSeries.prototype, \"isColumn\", {\n        /**\n         * Gets whether the current series shows a column shape.\n        */\n        get: function () {\n            return this.i.dh;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialColumnSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n        /**\n         * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n        */\n        get: function () {\n            return this.i.d2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialColumnSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.t8;\n        },\n        set: function (v) {\n            this.i.t8 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrRadialColumnSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.t9;\n        },\n        set: function (v) {\n            this.i.t9 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * When overridden in a derived class, is invoked whenever application code or internal processes\n     * call ApplyTemplate.\n    \r\n    */\n    IgrRadialColumnSeries.prototype.onApplyTemplate = function () {\n        this.i.ac();\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrRadialColumnSeries.prototype.getItemSpan = function () {\n        var iv = this.i.ga();\n        return (iv);\n    };\n    return IgrRadialColumnSeries;\n}(IgrAnchoredRadialSeries));\nexport { IgrRadialColumnSeries };\n"]},"metadata":{},"sourceType":"module"}