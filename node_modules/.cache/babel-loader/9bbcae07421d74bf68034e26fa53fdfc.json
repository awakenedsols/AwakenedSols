{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrFinancialSeries } from \"./igr-financial-series\";\n/**\n * Represents the base functionality for a IgxDataChartComponent financial overlay series.\n * The difference between a FinancialIndicator and a FinancialOverlay is small.\n * Overlays are usually drawn against the same axes as the price, but they don't\n * have to be. Overlays mostly display multiple values, but not all of them, and so\n * so some indicators.\n*\n* The `IgrFinancialOverlay` class represents the base functionality for a IgxDataChartComponent financial overlay series.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n* \tref={this.onChartRef}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*\n*     <IgrFinancialPriceSeries\n*     name=\"series2\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Candlestick\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.financialSeries = new IgrFinancialPriceSeries({name: \"financialSeries\"});\n* this.financialSeries.dataSource = this.financialData;\n* this.financialSeries.xAxis = this.timeXAxis;\n* this.financialSeries.yAxis = this.numericYAxis;\n* this.financialSeries.xAxisName = \"timeXAxis\";\n* this.financialSeries.yAxisName = \"numericYAxis\";\n* this.financialSeries.highMemberPath=\"High\" ;\n* this.financialSeries.lowMemberPath=\"Low\";\n* this.financialSeries.closeMemberPath=\"Close\";\n* this.financialSeries.openMemberPath=\"Open\";\n* this.financialSeries.volumeMemberPath=\"Volume\";\n* ```\n*/\n\nvar IgrFinancialOverlay =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrFinancialOverlay, _super);\n\n  function IgrFinancialOverlay(props) {\n    return _super.call(this, props) || this;\n  }\n\n  Object.defineProperty(IgrFinancialOverlay.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialOverlay.prototype, \"isFinancialOverlay\", {\n    /**\n     * Gets whether the series is financial overlay\n    */\n    get: function () {\n      return this.i.dr;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrFinancialOverlay.prototype, \"ignoreFirst\", {\n    /**\n     * Gets or sets the number of values to hide at the beginning of the indicator.\n    *\n    * Use the `ignoreFirst` property to sets the number of values to hide at the beginning of the indicator.\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *\n    *\n    *     <IgrFinancialPriceSeries\n    *     name=\"series2\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     displayType=\"Candlestick\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\" />\n    *\n    *     <IgrBollingerBandsOverlay\n    *     name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \tIgnoreFirst={2} />\n    *  </IgrDataChart>\n    * ```\n    *\n    * ```ts\n    *  series.ignoreFirst=2;\n    * ```\n    */\n    get: function () {\n      return this.i.to;\n    },\n    set: function (v) {\n      this.i.to = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Scrolls the series to display the item for the specified data item.\n   * The series is scrolled by the minimum amount required to place the specified data item within\n   * the central 80% of the visible axis.\n  \r\n  * @param item  * The data item (item) to scroll to.\n  *\n  * Use the `scrollIntoView` method to scrolls the series to display the item for the specified data item.\n  */\n\n  IgrFinancialOverlay.prototype.scrollIntoView = function (item) {\n    var iv = this.i.en(item);\n    return iv;\n  };\n\n  return IgrFinancialOverlay;\n}(IgrFinancialSeries);\n\nexport { IgrFinancialOverlay };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-financial-overlay.js"],"names":["__extends","IgrFinancialSeries","IgrFinancialOverlay","_super","props","call","Object","defineProperty","prototype","get","_implementation","enumerable","configurable","i","dr","to","set","v","scrollIntoView","item","iv","en"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,kBAAT,QAAmC,wBAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,mBAAmB;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;AACrEH,EAAAA,SAAS,CAACE,mBAAD,EAAsBC,MAAtB,CAAT;;AACA,WAASD,mBAAT,CAA6BE,KAA7B,EAAoC;AAChC,WAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;AACH;;AACDE,EAAAA,MAAM,CAACC,cAAP,CAAsBL,mBAAmB,CAACM,SAA1C,EAAqD,GAArD,EAA0D;AACtD;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKC,eAAZ;AACH,KANqD;AAOtDC,IAAAA,UAAU,EAAE,KAP0C;AAQtDC,IAAAA,YAAY,EAAE;AARwC,GAA1D;AAUAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,mBAAmB,CAACM,SAA1C,EAAqD,oBAArD,EAA2E;AACvE;AACR;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOC,EAAd;AACH,KANsE;AAOvEH,IAAAA,UAAU,EAAE,KAP2D;AAQvEC,IAAAA,YAAY,EAAE;AARyD,GAA3E;AAUAN,EAAAA,MAAM,CAACC,cAAP,CAAsBL,mBAAmB,CAACM,SAA1C,EAAqD,aAArD,EAAoE;AAChE;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQC,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOE,EAAd;AACH,KA/C+D;AAgDhEC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKJ,CAAL,CAAOE,EAAP,GAAY,CAACE,CAAb;AACH,KAlD+D;AAmDhEN,IAAAA,UAAU,EAAE,KAnDoD;AAoDhEC,IAAAA,YAAY,EAAE;AApDkD,GAApE;AAsDA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACIV,EAAAA,mBAAmB,CAACM,SAApB,CAA8BU,cAA9B,GAA+C,UAAUC,IAAV,EAAgB;AAC3D,QAAIC,EAAE,GAAG,KAAKP,CAAL,CAAOQ,EAAP,CAAUF,IAAV,CAAT;AACA,WAAQC,EAAR;AACH,GAHD;;AAIA,SAAOlB,mBAAP;AACH,CA7FsD,CA6FrDD,kBA7FqD,CAAvD;;AA8FA,SAASC,mBAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrFinancialSeries } from \"./igr-financial-series\";\n/**\n * Represents the base functionality for a IgxDataChartComponent financial overlay series.\n * The difference between a FinancialIndicator and a FinancialOverlay is small.\n * Overlays are usually drawn against the same axes as the price, but they don't\n * have to be. Overlays mostly display multiple values, but not all of them, and so\n * so some indicators.\n*\n* The `IgrFinancialOverlay` class represents the base functionality for a IgxDataChartComponent financial overlay series.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n* \tref={this.onChartRef}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*\n*     <IgrFinancialPriceSeries\n*     name=\"series2\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     displayType=\"Candlestick\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.financialSeries = new IgrFinancialPriceSeries({name: \"financialSeries\"});\n* this.financialSeries.dataSource = this.financialData;\n* this.financialSeries.xAxis = this.timeXAxis;\n* this.financialSeries.yAxis = this.numericYAxis;\n* this.financialSeries.xAxisName = \"timeXAxis\";\n* this.financialSeries.yAxisName = \"numericYAxis\";\n* this.financialSeries.highMemberPath=\"High\" ;\n* this.financialSeries.lowMemberPath=\"Low\";\n* this.financialSeries.closeMemberPath=\"Close\";\n* this.financialSeries.openMemberPath=\"Open\";\n* this.financialSeries.volumeMemberPath=\"Volume\";\n* ```\n*/\nvar IgrFinancialOverlay = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrFinancialOverlay, _super);\n    function IgrFinancialOverlay(props) {\n        return _super.call(this, props) || this;\n    }\n    Object.defineProperty(IgrFinancialOverlay.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialOverlay.prototype, \"isFinancialOverlay\", {\n        /**\n         * Gets whether the series is financial overlay\n        */\n        get: function () {\n            return this.i.dr;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrFinancialOverlay.prototype, \"ignoreFirst\", {\n        /**\n         * Gets or sets the number of values to hide at the beginning of the indicator.\n        *\n        * Use the `ignoreFirst` property to sets the number of values to hide at the beginning of the indicator.\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *\n        *\n        *     <IgrFinancialPriceSeries\n        *     name=\"series2\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     displayType=\"Candlestick\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\" />\n        *\n        *     <IgrBollingerBandsOverlay\n        *     name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \tIgnoreFirst={2} />\n        *  </IgrDataChart>\n        * ```\n        *\n        * ```ts\n        *  series.ignoreFirst=2;\n        * ```\n        */\n        get: function () {\n            return this.i.to;\n        },\n        set: function (v) {\n            this.i.to = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Scrolls the series to display the item for the specified data item.\n     * The series is scrolled by the minimum amount required to place the specified data item within\n     * the central 80% of the visible axis.\n    \r\n    * @param item  * The data item (item) to scroll to.\n    *\n    * Use the `scrollIntoView` method to scrolls the series to display the item for the specified data item.\n    */\n    IgrFinancialOverlay.prototype.scrollIntoView = function (item) {\n        var iv = this.i.en(item);\n        return (iv);\n    };\n    return IgrFinancialOverlay;\n}(IgrFinancialSeries));\nexport { IgrFinancialOverlay };\n"]},"metadata":{},"sourceType":"module"}