{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrVerticalAnchoredCategorySeries } from \"./igr-vertical-anchored-category-series\";\nimport { BarSeries } from \"./BarSeries\";\nimport { toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent bar series.\n*/\n\nvar IgrBarSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrBarSeries, _super);\n\n  function IgrBarSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrBarSeries.prototype.createImplementation = function () {\n    return new BarSeries();\n  };\n\n  Object.defineProperty(IgrBarSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrBarSeries.prototype, \"isBar\", {\n    /**\n     * Gets whether the current series shows a bar shape.\n    */\n    get: function () {\n      return this.i.df;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrBarSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n    /**\n     * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n    */\n    get: function () {\n      return this.i.d2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrBarSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.\n    */\n    get: function () {\n      return this.i.u0;\n    },\n    set: function (v) {\n      this.i.u0 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrBarSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.\n    */\n    get: function () {\n      return this.i.u1;\n    },\n    set: function (v) {\n      this.i.u1 = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinate for which to get a value bounding box for\n  */\n\n  IgrBarSeries.prototype.getSeriesValueBoundingBox = function (world) {\n    var iv = this.i.pv(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * Scrolls the series to display the item for the specified data item.\n   * The series is scrolled by the minimum amount required to place the specified data item within\n   * the central 80% of the visible axis.\n  \r\n  * @param item  * The data item (item) to scroll to.\n  */\n\n\n  IgrBarSeries.prototype.scrollIntoView = function (item) {\n    var iv = this.i.en(item);\n    return iv;\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n\n  IgrBarSeries.prototype.getItemSpan = function () {\n    var iv = this.i.ga();\n    return iv;\n  };\n\n  return IgrBarSeries;\n}(IgrVerticalAnchoredCategorySeries);\n\nexport { IgrBarSeries };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-bar-series.js"],"names":["__extends","IgrVerticalAnchoredCategorySeries","BarSeries","toPoint","fromRect","IgrBarSeries","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","df","d2","u0","set","v","u1","getSeriesValueBoundingBox","world","iv","pv","scrollIntoView","item","en","getItemSpan","ga"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrVerticalAnchoredCategorySeries } from \"./igr-vertical-anchored-category-series\";\nimport { BarSeries } from \"./BarSeries\";\nimport { toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent bar series.\n*/\nvar IgrBarSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrBarSeries, _super);\n    function IgrBarSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrBarSeries.prototype.createImplementation = function () {\n        return new BarSeries();\n    };\n    Object.defineProperty(IgrBarSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrBarSeries.prototype, \"isBar\", {\n        /**\n         * Gets whether the current series shows a bar shape.\n        */\n        get: function () {\n            return this.i.df;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrBarSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n        /**\n         * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n        */\n        get: function () {\n            return this.i.d2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrBarSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.\n        */\n        get: function () {\n            return this.i.u0;\n        },\n        set: function (v) {\n            this.i.u0 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrBarSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.\n        */\n        get: function () {\n            return this.i.u1;\n        },\n        set: function (v) {\n            this.i.u1 = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\n    */\n    IgrBarSeries.prototype.getSeriesValueBoundingBox = function (world) {\n        var iv = this.i.pv(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * Scrolls the series to display the item for the specified data item.\n     * The series is scrolled by the minimum amount required to place the specified data item within\n     * the central 80% of the visible axis.\n    \r\n    * @param item  * The data item (item) to scroll to.\n    */\n    IgrBarSeries.prototype.scrollIntoView = function (item) {\n        var iv = this.i.en(item);\n        return (iv);\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrBarSeries.prototype.getItemSpan = function () {\n        var iv = this.i.ga();\n        return (iv);\n    };\n    return IgrBarSeries;\n}(IgrVerticalAnchoredCategorySeries));\nexport { IgrBarSeries };\n"]},"metadata":{},"sourceType":"module"}