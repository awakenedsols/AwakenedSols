{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, EnumUtil, markType } from \"./type\";\nimport { IDataSeriesAdapterRule_$type } from \"./IDataSeriesAdapterRule\";\nimport { List$1 } from \"./List$1\";\nimport { DataSeriesIntent_$type } from \"./DataSeriesIntent\";\nimport { DataSeries } from \"./DataSeries\";\nimport { DataSeriesMemberPathHint } from \"./DataSeriesMemberPathHint\";\n/**\n * @hidden\n */\n\nvar SimpleScatterSeriesRule =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(SimpleScatterSeriesRule, _super);\n\n  function SimpleScatterSeriesRule() {\n    var _this = _super.call(this) || this;\n\n    _this._priority = 0;\n    _this._monotonicCheckAmount = 0;\n    _this.priority = 9;\n    _this.monotonicCheckAmount = 10000;\n    return _this;\n  }\n\n  Object.defineProperty(SimpleScatterSeriesRule.prototype, \"priority\", {\n    get: function () {\n      return this._priority;\n    },\n    set: function (a) {\n      this._priority = a;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(SimpleScatterSeriesRule.prototype, \"monotonicCheckAmount\", {\n    get: function () {\n      return this._monotonicCheckAmount;\n    },\n    set: function (a) {\n      this._monotonicCheckAmount = a;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  SimpleScatterSeriesRule.prototype.evaluate = function (a) {\n    var b = a.analyzer.getAllNumericProperties();\n\n    if (b.length == 0) {\n      return;\n    }\n\n    var c = a.getCurrentDataSource().actualCount;\n    var d = new List$1(String_$type, 0);\n\n    for (var e = 0; e < b.length; e++) {\n      d.add(b[e]);\n    }\n\n    var f = this.c(d);\n    var g = this.d(d);\n    var h = a.analyzer.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, 1));\n    var i = a.analyzer.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, 2));\n\n    if (h.length > 0 && i.length > 0 && h.length == i.length) {\n      f.clear();\n      g.clear();\n      d.clear();\n\n      for (var j = 0; j < h.length; j++) {\n        f.add(h[j]);\n        g.add(i[j]);\n      }\n    }\n\n    var k = 0;\n\n    for (k = 0; k < Math.min(f.count, g.count); k++) {\n      var l = new Array(2);\n      l[0] = f._inner[k];\n      l[1] = g._inner[k];\n      var m = a.analyzer.getTitleString(null, l);\n      this.f(a, f._inner[k], g._inner[k], m);\n    }\n\n    for (; k < f.count; k++) {\n      d.add(f._inner[k]);\n    }\n\n    for (; k < g.count; k++) {\n      d.add(g._inner[k]);\n    }\n\n    for (var n = 0; n < d.count; n += 2) {\n      if (n + 1 >= d.count) {\n        continue;\n      }\n\n      var o = new Array(2);\n      o[0] = d._inner[n];\n      o[1] = d._inner[n + 1];\n      var p = a.analyzer.getTitleString(null, o);\n      this.f(a, d._inner[n], d._inner[n + 1], p);\n    }\n  };\n\n  SimpleScatterSeriesRule.prototype.d = function (a) {\n    var b = new List$1(String_$type, 0);\n\n    for (var c = 0; c < a.count; c++) {\n      if (this.b(a._inner[c])) {\n        b.add(a._inner[c]);\n        a.removeAt(c);\n        c--;\n      }\n    }\n\n    return b;\n  };\n\n  SimpleScatterSeriesRule.prototype.b = function (a) {\n    if (Base.equalsStatic(a.toLowerCase(), \"y\") || Base.equalsStatic(a.toLowerCase(), \"yvalue\")) {\n      return true;\n    }\n\n    return false;\n  };\n\n  SimpleScatterSeriesRule.prototype.c = function (a) {\n    var b = new List$1(String_$type, 0);\n\n    for (var c = 0; c < a.count; c++) {\n      if (this.a(a._inner[c])) {\n        b.add(a._inner[c]);\n        a.removeAt(c);\n        c--;\n      }\n    }\n\n    return b;\n  };\n\n  SimpleScatterSeriesRule.prototype.a = function (a) {\n    if (Base.equalsStatic(a.toLowerCase(), \"x\") || Base.equalsStatic(a.toLowerCase(), \"xvalue\")) {\n      return true;\n    }\n\n    return false;\n  };\n\n  SimpleScatterSeriesRule.prototype.f = function (a, b, c, d) {\n    var e = new DataSeries();\n    e.name = b + \"_\" + c;\n\n    if (d != null) {\n      e.title = d;\n    } else {\n      e.title = b + \" - \" + c;\n      e.title = a.analyzer.expandCamelCasedWords(e.title);\n    }\n\n    var f = new DataSeriesMemberPathHint();\n    f.intent = 1;\n    f.path = b;\n    var g = new DataSeriesMemberPathHint();\n    g.intent = 2;\n    g.path = c;\n    e.addMemberPathHint(f);\n    e.addMemberPathHint(g);\n    var h = a.getCurrentDataSource();\n    var i = h.actualCount;\n\n    if (i > this.monotonicCheckAmount) {\n      e.suggestedSeries = 11;\n    } else {\n      if (a.analyzer.isMonotonic(h, b, this.monotonicCheckAmount)) {\n        e.suggestedSeries = 12;\n      } else {\n        e.suggestedSeries = 11;\n      }\n    }\n\n    e.suggestedPrimaryAxis = 1;\n    e.suggestedSecondaryAxis = 1;\n    a.addDataSeries(e, this);\n  };\n\n  SimpleScatterSeriesRule.$t = markType(SimpleScatterSeriesRule, 'SimpleScatterSeriesRule', Base.$, [IDataSeriesAdapterRule_$type]);\n  return SimpleScatterSeriesRule;\n}(Base);\n\nexport { SimpleScatterSeriesRule };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-core/esm5/lib/SimpleScatterSeriesRule.js"],"names":["__extends","Base","String_$type","EnumUtil","markType","IDataSeriesAdapterRule_$type","List$1","DataSeriesIntent_$type","DataSeries","DataSeriesMemberPathHint","SimpleScatterSeriesRule","_super","_this","call","_priority","_monotonicCheckAmount","priority","monotonicCheckAmount","Object","defineProperty","prototype","get","set","a","enumerable","configurable","evaluate","b","analyzer","getAllNumericProperties","length","c","getCurrentDataSource","actualCount","d","e","add","f","g","h","getAllPropertiesWithIntent","getName","i","clear","j","k","Math","min","count","l","Array","_inner","m","getTitleString","n","o","p","removeAt","equalsStatic","toLowerCase","name","title","expandCamelCasedWords","intent","path","addMemberPathHint","suggestedSeries","isMonotonic","suggestedPrimaryAxis","suggestedSecondaryAxis","addDataSeries","$t","$"],"mappings":"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","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, String_$type, EnumUtil, markType } from \"./type\";\nimport { IDataSeriesAdapterRule_$type } from \"./IDataSeriesAdapterRule\";\nimport { List$1 } from \"./List$1\";\nimport { DataSeriesIntent_$type } from \"./DataSeriesIntent\";\nimport { DataSeries } from \"./DataSeries\";\nimport { DataSeriesMemberPathHint } from \"./DataSeriesMemberPathHint\";\n/**\n * @hidden\n */\nvar SimpleScatterSeriesRule = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(SimpleScatterSeriesRule, _super);\n    function SimpleScatterSeriesRule() {\n        var _this = _super.call(this) || this;\n        _this._priority = 0;\n        _this._monotonicCheckAmount = 0;\n        _this.priority = 9;\n        _this.monotonicCheckAmount = 10000;\n        return _this;\n    }\n    Object.defineProperty(SimpleScatterSeriesRule.prototype, \"priority\", {\n        get: function () {\n            return this._priority;\n        },\n        set: function (a) {\n            this._priority = a;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(SimpleScatterSeriesRule.prototype, \"monotonicCheckAmount\", {\n        get: function () {\n            return this._monotonicCheckAmount;\n        },\n        set: function (a) {\n            this._monotonicCheckAmount = a;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    SimpleScatterSeriesRule.prototype.evaluate = function (a) {\n        var b = a.analyzer.getAllNumericProperties();\n        if (b.length == 0) {\n            return;\n        }\n        var c = a.getCurrentDataSource().actualCount;\n        var d = new List$1(String_$type, 0);\n        for (var e = 0; e < b.length; e++) {\n            d.add(b[e]);\n        }\n        var f = this.c(d);\n        var g = this.d(d);\n        var h = a.analyzer.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, (1)));\n        var i = a.analyzer.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, (2)));\n        if (h.length > 0 && i.length > 0 && h.length == i.length) {\n            f.clear();\n            g.clear();\n            d.clear();\n            for (var j = 0; j < h.length; j++) {\n                f.add(h[j]);\n                g.add(i[j]);\n            }\n        }\n        var k = 0;\n        for (k = 0; k < Math.min(f.count, g.count); k++) {\n            var l = new Array(2);\n            l[0] = f._inner[k];\n            l[1] = g._inner[k];\n            var m = a.analyzer.getTitleString(null, l);\n            this.f(a, f._inner[k], g._inner[k], m);\n        }\n        for (; k < f.count; k++) {\n            d.add(f._inner[k]);\n        }\n        for (; k < g.count; k++) {\n            d.add(g._inner[k]);\n        }\n        for (var n = 0; n < d.count; n += 2) {\n            if (n + 1 >= d.count) {\n                continue;\n            }\n            var o = new Array(2);\n            o[0] = d._inner[n];\n            o[1] = d._inner[n + 1];\n            var p = a.analyzer.getTitleString(null, o);\n            this.f(a, d._inner[n], d._inner[n + 1], p);\n        }\n    };\n    SimpleScatterSeriesRule.prototype.d = function (a) {\n        var b = new List$1(String_$type, 0);\n        for (var c = 0; c < a.count; c++) {\n            if (this.b(a._inner[c])) {\n                b.add(a._inner[c]);\n                a.removeAt(c);\n                c--;\n            }\n        }\n        return b;\n    };\n    SimpleScatterSeriesRule.prototype.b = function (a) {\n        if (Base.equalsStatic(a.toLowerCase(), \"y\") || Base.equalsStatic(a.toLowerCase(), \"yvalue\")) {\n            return true;\n        }\n        return false;\n    };\n    SimpleScatterSeriesRule.prototype.c = function (a) {\n        var b = new List$1(String_$type, 0);\n        for (var c = 0; c < a.count; c++) {\n            if (this.a(a._inner[c])) {\n                b.add(a._inner[c]);\n                a.removeAt(c);\n                c--;\n            }\n        }\n        return b;\n    };\n    SimpleScatterSeriesRule.prototype.a = function (a) {\n        if (Base.equalsStatic(a.toLowerCase(), \"x\") || Base.equalsStatic(a.toLowerCase(), \"xvalue\")) {\n            return true;\n        }\n        return false;\n    };\n    SimpleScatterSeriesRule.prototype.f = function (a, b, c, d) {\n        var e = new DataSeries();\n        e.name = b + \"_\" + c;\n        if (d != null) {\n            e.title = d;\n        }\n        else {\n            e.title = b + \" - \" + c;\n            e.title = a.analyzer.expandCamelCasedWords(e.title);\n        }\n        var f = new DataSeriesMemberPathHint();\n        f.intent = 1;\n        f.path = b;\n        var g = new DataSeriesMemberPathHint();\n        g.intent = 2;\n        g.path = c;\n        e.addMemberPathHint(f);\n        e.addMemberPathHint(g);\n        var h = a.getCurrentDataSource();\n        var i = h.actualCount;\n        if (i > this.monotonicCheckAmount) {\n            e.suggestedSeries = 11;\n        }\n        else {\n            if (a.analyzer.isMonotonic(h, b, this.monotonicCheckAmount)) {\n                e.suggestedSeries = 12;\n            }\n            else {\n                e.suggestedSeries = 11;\n            }\n        }\n        e.suggestedPrimaryAxis = 1;\n        e.suggestedSecondaryAxis = 1;\n        a.addDataSeries(e, this);\n    };\n    SimpleScatterSeriesRule.$t = markType(SimpleScatterSeriesRule, 'SimpleScatterSeriesRule', Base.$, [IDataSeriesAdapterRule_$type]);\n    return SimpleScatterSeriesRule;\n}(Base));\nexport { SimpleScatterSeriesRule };\n"]},"metadata":{},"sourceType":"module"}