{"ast":null,"code":"var _jsxFileName = \"/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/src/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport { awaitTransactionSignatureConfirmation, CANDY_MACHINE_PROGRAM, createAccountsForMint, getCandyMachineState, getCollectionPDA, mintOneToken } from './candy-machine';\nimport { formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport './home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n_c = ConnectButton;\nconst MintContainer = styled.div``; // add your owns styles here\n\n_c2 = MintContainer;\n\nconst Home = props => {\n  _s();\n\n  var _anchorWallet$publicK, _candyMachine$state, _candyMachine$state$g;\n\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState();\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: '',\n    severity: undefined\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [itemsRemaining, setItemsRemaining] = useState();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState();\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const anchorWallet = useMemo(() => {\n    if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction\n    };\n  }, [wallet]);\n  const refreshCandyMachineState = useCallback(async function () {\n    let commitment = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'confirmed';\n\n    if (!anchorWallet) {\n      return;\n    }\n\n    const connection = new Connection(props.rpcHost, commitment);\n\n    if (props.candyMachineId) {\n      console.log(props === null || props === void 0 ? void 0 : props.candyMachineId);\n\n      try {\n        var _cndy$state$goLiveDat, _cndy$state$whitelist, _cndy$state$whitelist2, _cndy$state$gatekeepe;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, connection);\n        let active = (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$goLiveDat = cndy.state.goLiveDate) === null || _cndy$state$goLiveDat === void 0 ? void 0 : _cndy$state$goLiveDat.toNumber()) < new Date().getTime() / 1000;\n        let presale = false; // duplication of state to make sure we have the right values!\n\n        let isWLUser = false;\n        let userPrice = cndy.state.price;\n        userPrice = isWLUser ? userPrice : cndy.state.price;\n\n        if (cndy === null || cndy === void 0 ? void 0 : cndy.state.tokenMint) {\n          // retrieves the SPL token\n          const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await connection.getTokenAccountBalance(token);\n            const valid = new anchor.BN(balance.value.amount).gte(userPrice); // only allow user to mint if token balance >  the user if the balance > 0\n\n            setIsValidBalance(valid);\n            active = active && valid;\n          } catch (e) {\n            setIsValidBalance(false);\n            active = false; // no whitelist user, no mint\n\n            console.log('There was a problem fetching SPL token balance');\n            console.log(e);\n          }\n        } else {\n          const balance = new anchor.BN(await connection.getBalance(anchorWallet.publicKey));\n          const valid = balance.gte(userPrice);\n          setIsValidBalance(valid);\n          active = active && valid;\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount = await connection.getAccountInfo(collectionPDA);\n        setIsActive(cndy.state.isActive = active);\n        setIsPresale(cndy.state.isPresale = presale);\n        setCandyMachine(cndy);\n        const txnEstimate = 892 + (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) + (cndy.state.tokenMint ? 177 : 0) + (cndy.state.whitelistMintSettings ? 33 : 0) + (((_cndy$state$whitelist = cndy.state.whitelistMintSettings) === null || _cndy$state$whitelist === void 0 ? void 0 : (_cndy$state$whitelist2 = _cndy$state$whitelist.mode) === null || _cndy$state$whitelist2 === void 0 ? void 0 : _cndy$state$whitelist2.burnEveryTime) ? 145 : 0) + (cndy.state.gatekeeper ? 33 : 0) + (((_cndy$state$gatekeepe = cndy.state.gatekeeper) === null || _cndy$state$gatekeepe === void 0 ? void 0 : _cndy$state$gatekeepe.expireOnUse) ? 66 : 0);\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n              severity: 'error',\n              hideDuration: null\n            });\n          } else if (e.message.startsWith('failed to get info about account')) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: 'error',\n              hideDuration: null\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: 'error',\n            hideDuration: null\n          });\n        }\n\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: 'error',\n        hideDuration: null\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.rpcHost]);\n\n  const onMint = async function () {\n    let beforeTransactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let afterTransactions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    try {\n      var _document$getElementB;\n\n      setIsUserMinting(true);\n      (_document$getElementB = document.getElementById('#identity')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n\n      if (wallet.connected && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.program) && wallet.publicKey) {\n        var _setupMint;\n\n        let setupMint;\n\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info'\n          });\n          setupMint = await createAccountsForMint(candyMachine, wallet.publicKey);\n          let status = {\n            err: true\n          };\n\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(setupMint.transaction, props.txTimeout, props.connection, true);\n          }\n\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message: 'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info'\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error'\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info'\n          });\n        }\n\n        let mintResult = await mintOneToken(candyMachine, wallet.publicKey, beforeTransactions, afterTransactions, (_setupMint = setupMint) !== null && _setupMint !== void 0 ? _setupMint : setupTxn);\n        let status = {\n          err: true\n        };\n        let metadataStatus = null;\n\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(mintResult.mintTxId, props.txTimeout, props.connection, true);\n          metadataStatus = await candyMachine.program.provider.connection.getAccountInfo(mintResult.metadataKey, 'processed');\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          console.log('status');\n          let remaining = itemsRemaining - 1;\n          console.log(remaining);\n          setItemsRemaining(remaining);\n          setIsActive(candyMachine.state.isActive = remaining > 0);\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message: 'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error'\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error'\n      }); // updates the candy machine state to reflect the latest\n      // information on chain\n\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n    console.log('use efect');\n\n    if (candyMachine) {\n      console.log('candyMachine');\n      console.log(candyMachine.state);\n      setItemsRemaining(candyMachine.state.itemsRemaining);\n      console.log(itemsRemaining);\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection, refreshCandyMachineState]);\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mintContainer\",\n        children: [anchorWallet && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          children: [\"Wallet: \", (anchorWallet === null || anchorWallet === void 0 ? void 0 : (_anchorWallet$publicK = anchorWallet.publicKey) === null || _anchorWallet$publicK === void 0 ? void 0 : _anchorWallet$publicK.toBase58()) || \"\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Container, {\n          style: {\n            marginTop: 20\n          },\n          children: [/*#__PURE__*/_jsxDEV(Container, {\n            maxWidth: \"xs\",\n            style: {\n              position: 'relative'\n            },\n            children: /*#__PURE__*/_jsxDEV(Paper, {\n              style: {\n                padding: 24,\n                paddingBottom: 24,\n                backgroundColor: '#151A1F',\n                borderRadius: 6\n              },\n              children: !wallet.connected ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n                children: \"Connect Wallet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 415,\n                columnNumber: 13\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [candyMachine && /*#__PURE__*/_jsxDEV(Grid, {\n                  container: true,\n                  direction: \"row\",\n                  justifyContent: \"center\",\n                  wrap: \"nowrap\",\n                  children: [/*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 3,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      color: \"textSecondary\",\n                      children: \"Remaining\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 426,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"h6\",\n                      color: \"textPrimary\",\n                      style: {\n                        fontWeight: 'bold'\n                      },\n                      children: `${itemsRemaining}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 429,\n                      columnNumber: 21\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 425,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 4,\n                    children: [/*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"body2\",\n                      color: \"textSecondary\",\n                      children: isWhitelistUser && discountPrice ? 'Discount Price' : 'Price'\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 440,\n                      columnNumber: 21\n                    }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"h6\",\n                      color: \"textPrimary\",\n                      style: {\n                        fontWeight: 'bold'\n                      },\n                      children: isWhitelistUser && discountPrice ? `◎ ${formatNumber.asNumber(discountPrice)}` : `◎ ${formatNumber.asNumber(candyMachine.state.price)}`\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 445,\n                      columnNumber: 21\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 439,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(Grid, {\n                    item: true,\n                    xs: 5,\n                    children: /*#__PURE__*/_jsxDEV(Typography, {\n                      variant: \"caption\",\n                      align: \"center\",\n                      display: \"block\",\n                      style: {\n                        fontWeight: 'bold'\n                      },\n                      children: \"MINT TBA\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 458,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 457,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n                  children: (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.isActive) && (candyMachine === null || candyMachine === void 0 ? void 0 : candyMachine.state.gatekeeper) && wallet.publicKey && wallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n                    wallet: {\n                      publicKey: wallet.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction\n                    },\n                    gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state = candyMachine.state) === null || _candyMachine$state === void 0 ? void 0 : (_candyMachine$state$g = _candyMachine$state.gatekeeper) === null || _candyMachine$state$g === void 0 ? void 0 : _candyMachine$state$g.gatekeeperNetwork,\n                    clusterUrl: props.network === WalletAdapterNetwork.Devnet ? 'https://api.devnet.solana.com' : rpcUrl,\n                    handleTransaction: async transaction => {\n                      setIsUserMinting(true);\n                      const userMustSign = transaction.signatures.find(sig => sig.publicKey.equals(wallet.publicKey));\n\n                      if (userMustSign) {\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign one-time Civic Pass issuance',\n                          severity: 'info'\n                        });\n\n                        try {\n                          transaction = await wallet.signTransaction(transaction);\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message: 'User cancelled signing',\n                            severity: 'error'\n                          }); // setTimeout(() => window.location.reload(), 2000);\n\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                      } else {\n                        setAlertState({\n                          open: true,\n                          message: 'Refreshing Civic Pass',\n                          severity: 'info'\n                        });\n                      }\n\n                      try {\n                        await sendTransaction(props.connection, wallet, transaction, [], true, 'confirmed');\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign minting',\n                          severity: 'info'\n                        });\n                      } catch (e) {\n                        setAlertState({\n                          open: true,\n                          message: 'Solana dropped the transaction, please try again',\n                          severity: 'warning'\n                        });\n                        console.error(e); // setTimeout(() => window.location.reload(), 2000);\n\n                        setIsUserMinting(false);\n                        throw e;\n                      }\n\n                      await onMint();\n                    },\n                    broadcastTransaction: false,\n                    options: {\n                      autoShowModal: false\n                    },\n                    children: /*#__PURE__*/_jsxDEV(MintButton, {\n                      candyMachine: candyMachine,\n                      isMinting: isUserMinting,\n                      setIsMinting: val => setIsUserMinting(val),\n                      onMint: onMint,\n                      isActive: isActive || isPresale && isWhitelistUser && isValidBalance\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 553,\n                      columnNumber: 21\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 474,\n                    columnNumber: 19\n                  }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n                    candyMachine: candyMachine,\n                    isMinting: isUserMinting,\n                    setIsMinting: val => setIsUserMinting(val),\n                    onMint: onMint,\n                    isActive: isActive || isPresale && isWhitelistUser && isValidBalance\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 565,\n                    columnNumber: 19\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 469,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 405,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n            open: alertState.open,\n            autoHideDuration: alertState.hideDuration === undefined ? 6000 : alertState.hideDuration,\n            onClose: () => setAlertState({ ...alertState,\n              open: false\n            }),\n            children: /*#__PURE__*/_jsxDEV(Alert, {\n              onClose: () => setAlertState({ ...alertState,\n                open: false\n              }),\n              severity: alertState.severity,\n              children: alertState.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 589,\n              columnNumber: 9\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 582,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"about\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aboutContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"h1\",\n          children: \"ABOUT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"For those beginning or continuing their awakening on NFTs...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"A collection of 2,222 uniquely generated Awakened Sols on the Solana blockchain.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"An alpha group and Sniping tool with unique features only available to holders.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"An open minded community.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 24\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"roadmap\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"roadMapContainer\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"h1\",\n          children: \"ROADMAP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Phase 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Artwork Development\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Sniping Tool Development\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"2,222 Awakened Sols Mint(0.169 SOL) - 333 WL(0.069 SOL)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 615,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Launch Sniping Tool with basic features.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Phase 2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Listing on Secondary Market\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 619,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"25% of profits go back to the holders(SOL Giveaways, NFT airdrops, WL spots)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 10\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Develop extra features based on feedback for Sniping Tool for NFT holders\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 618,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Phase 3\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 12\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Launch Sniping Tool v2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 10\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 8\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 28\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"3f1/oynoWJ5kikgXZgk43Rt6Kao=\", false, function () {\n  return [useWallet];\n});\n\n_c3 = Home;\n\nconst getCountdownDate = candyMachine => {\n  var _candyMachine$state$e;\n\n  if (candyMachine.state.isActive && ((_candyMachine$state$e = candyMachine.state.endSettings) === null || _candyMachine$state$e === void 0 ? void 0 : _candyMachine$state$e.endSettingType.date)) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(candyMachine.state.goLiveDate ? candyMachine.state.goLiveDate : candyMachine.state.isPresale ? new anchor.BN(new Date().getTime() / 1000) : undefined);\n};\n\nexport default Home;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"MintContainer\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/src/Home.tsx"],"names":["useCallback","useEffect","useMemo","useState","anchor","styled","Container","Snackbar","Paper","Alert","Grid","Typography","Connection","PublicKey","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","CANDY_MACHINE_PROGRAM","createAccountsForMint","getCandyMachineState","getCollectionPDA","mintOneToken","formatNumber","getAtaForMint","toDate","MintButton","GatewayProvider","sendTransaction","WalletAdapterNetwork","ConnectButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","candyMachine","setCandyMachine","alertState","setAlertState","open","message","severity","undefined","isActive","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","isPresale","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","wallet","anchorWallet","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","commitment","connection","candyMachineId","console","log","cndy","active","state","goLiveDate","toNumber","Date","getTime","presale","isWLUser","userPrice","price","tokenMint","mint","web3","token","balance","getTokenAccountBalance","valid","BN","value","amount","gte","e","getBalance","isSoldOut","collectionPDA","collectionPDAAccount","getAccountInfo","txnEstimate","retainAuthority","whitelistMintSettings","mode","burnEveryTime","gatekeeper","expireOnUse","Error","hideDuration","startsWith","onMint","beforeTransactions","afterTransactions","document","getElementById","click","connected","program","setupMint","status","err","transaction","txTimeout","mintResult","metadataStatus","mintTxId","provider","metadataKey","remaining","error","msg","indexOf","code","window","location","reload","loop","setTimeout","toBase58","marginTop","position","padding","paddingBottom","backgroundColor","borderRadius","fontWeight","asNumber","gatekeeperNetwork","network","Devnet","userMustSign","signatures","find","sig","equals","autoShowModal","val","getCountdownDate","endSettings","endSettingType","date","number"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\n\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Typewriter from \"typewriter-effect\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from './candy-machine';\nimport { AlertState, formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport './home.css';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = 'confirmed') => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        console.log(props?.candyMachineId);\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection,\n          );\n          let active =\n            cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log('There was a problem fetching SPL token balance');\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey),\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA,\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 177 : 0) +\n            (cndy.state.whitelistMintSettings ? 33 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith('failed to get info about account')\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: 'error',\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: 'error',\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.rpcHost],\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              'processed',\n            );\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          console.log('status')\n          let remaining = itemsRemaining! - 1;\n          console.log(remaining);\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n    console.log('use efect');\n    if(candyMachine) {\n      console.log('candyMachine')\n      console.log(candyMachine.state);\n      setItemsRemaining(candyMachine.state.itemsRemaining);\n      console.log(itemsRemaining);\n  } \n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <main>\n      \n      {/* {wallet && <p>Balance: {(balance || 0).toLocaleString()} SOL</p>} */}\n      <div className=\"main\">\n\n      <div className=\"mintContainer\">\n        {anchorWallet && (\n          <Typography variant=\"body2\" color=\"textSecondary\">\n          Wallet: {(anchorWallet?.publicKey?.toBase58() || \"\")}\n        </Typography>\n        )} \n      \n      <Container style={{ marginTop: 20 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 24,\n            backgroundColor: '#151A1F',\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price,\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold' }}\n                            >\n                              MINT TBA\n                            </Typography>\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={\n                      props.network === WalletAdapterNetwork.Devnet\n                        ? 'https://api.devnet.solana.com'\n                        : rpcUrl\n                    }\n                    handleTransaction={async (transaction: Transaction) => {\n                      setIsUserMinting(true);\n                      const userMustSign = transaction.signatures.find(sig =>\n                        sig.publicKey.equals(wallet.publicKey!),\n                      );\n                      if (userMustSign) {\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign one-time Civic Pass issuance',\n                          severity: 'info',\n                        });\n                        try {\n                          transaction = await wallet.signTransaction!(\n                            transaction,\n                          );\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message: 'User cancelled signing',\n                            severity: 'error',\n                          });\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                      } else {\n                        setAlertState({\n                          open: true,\n                          message: 'Refreshing Civic Pass',\n                          severity: 'info',\n                        });\n                      }\n                      try {\n                        await sendTransaction(\n                          props.connection,\n                          wallet,\n                          transaction,\n                          [],\n                          true,\n                          'confirmed',\n                        );\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign minting',\n                          severity: 'info',\n                        });\n                      } catch (e) {\n                        setAlertState({\n                          open: true,\n                          message:\n                            'Solana dropped the transaction, please try again',\n                          severity: 'warning',\n                        });\n                        console.error(e);\n                        // setTimeout(() => window.location.reload(), 2000);\n                        setIsUserMinting(false);\n                        throw e;\n                      }\n                      await onMint();\n                    }}\n                    broadcastTransaction={false}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={val => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton \n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={val => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={\n                      isActive ||\n                      (isPresale && isWhitelistUser && isValidBalance)\n                    }\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={\n          alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n        }\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n        </div>\n\n      </div>\n\n      {<div id=\"about\"><div className=\"aboutContainer\">\n        <h1 className=\"h1\">ABOUT</h1>\n        <p>For those beginning or continuing their awakening on NFTs...\n        </p><p>A collection of 2,222 uniquely generated Awakened Sols on the Solana blockchain.  \n        </p><p>An alpha group and Sniping tool with unique features only available to holders.\n        </p><p>An open minded community.\n        </p>\n        </div></div>}\n\n        {<div id=\"roadmap\"><div className=\"roadMapContainer\">\n        <h1 className=\"h1\">ROADMAP</h1>\n       <ul><h3>Phase 1</h3>\n         <li>Artwork Development</li>\n         <li>Sniping Tool Development</li>\n         <li>2,222 Awakened Sols Mint(0.169 SOL) - 333 WL(0.069 SOL)</li>\n         <li>Launch Sniping Tool with basic features.</li>\n       </ul>\n       <ul><h3>Phase 2</h3>\n         <li>Listing on Secondary Market</li>\n         <li>25% of profits go back to the holders(SOL Giveaways, NFT airdrops, WL spots)</li>\n         <li>Develop extra features based on feedback for Sniping Tool for NFT holders</li>\n       </ul>\n       <ul><h3>Phase 3</h3>\n         <li>Launch Sniping Tool v2</li>\n       </ul>\n        </div></div>}\n\n    </main>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}