{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, IList$1_$type, Point_$type, markType, getEnumerator } from \"igniteui-react-core\";\nimport { List$1 } from \"igniteui-react-core\";\nimport { ReadOnlyCollection$1 } from \"igniteui-react-core\";\nimport { isNaN_, isInfinity } from \"igniteui-react-core\";\n/**\n * @hidden\n */\n\nvar NaNSegmenter =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(NaNSegmenter, _super);\n\n  function NaNSegmenter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NaNSegmenter.c = function (a, b) {\n    var c = new List$1(IList$1_$type.specialize(Point_$type), 0);\n    var d = getEnumerator(a);\n    var e = new List$1(Point_$type, 0);\n    var f = true;\n\n    while (d.moveNext()) {\n      if (NaNSegmenter.a(d.current)) {\n        if (!f && b == 1) {\n          f = true;\n          var g = e;\n          e = new List$1(Point_$type, 0);\n          c.add(new ReadOnlyCollection$1(Point_$type, 1, g));\n        }\n      } else {\n        f = false;\n        e.add(d.current);\n      }\n    }\n\n    c.add(new ReadOnlyCollection$1(Point_$type, 1, e));\n    return c;\n  };\n\n  NaNSegmenter.a = function (a) {\n    return isNaN_(a.x) || isNaN_(a.y) || isInfinity(a.x) || isInfinity(a.y);\n  };\n\n  NaNSegmenter.b = function (a) {\n    return !NaNSegmenter.a(a);\n  };\n\n  NaNSegmenter.$t = markType(NaNSegmenter, 'NaNSegmenter');\n  return NaNSegmenter;\n}(Base);\n\nexport { NaNSegmenter };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/NaNSegmenter.js"],"names":["__extends","Base","IList$1_$type","Point_$type","markType","getEnumerator","List$1","ReadOnlyCollection$1","isNaN_","isInfinity","NaNSegmenter","_super","apply","arguments","c","a","b","specialize","d","e","f","moveNext","current","g","add","x","y","$t"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,IAAT,EAAeC,aAAf,EAA8BC,WAA9B,EAA2CC,QAA3C,EAAqDC,aAArD,QAA0E,qBAA1E;AACA,SAASC,MAAT,QAAuB,qBAAvB;AACA,SAASC,oBAAT,QAAqC,qBAArC;AACA,SAASC,MAAT,EAAiBC,UAAjB,QAAmC,qBAAnC;AACA;AACA;AACA;;AACA,IAAIC,YAAY;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;AAC9DX,EAAAA,SAAS,CAACU,YAAD,EAAeC,MAAf,CAAT;;AACA,WAASD,YAAT,GAAwB;AACpB,WAAOC,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACC,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAA3D;AACH;;AACDH,EAAAA,YAAY,CAACI,CAAb,GAAiB,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AAC7B,QAAIF,CAAC,GAAG,IAAIR,MAAJ,CAAWJ,aAAa,CAACe,UAAd,CAAyBd,WAAzB,CAAX,EAAkD,CAAlD,CAAR;AACA,QAAIe,CAAC,GAAGb,aAAa,CAACU,CAAD,CAArB;AACA,QAAII,CAAC,GAAG,IAAIb,MAAJ,CAAWH,WAAX,EAAwB,CAAxB,CAAR;AACA,QAAIiB,CAAC,GAAG,IAAR;;AACA,WAAOF,CAAC,CAACG,QAAF,EAAP,EAAqB;AACjB,UAAIX,YAAY,CAACK,CAAb,CAAeG,CAAC,CAACI,OAAjB,CAAJ,EAA+B;AAC3B,YAAI,CAACF,CAAD,IAAMJ,CAAC,IAAI,CAAf,EAAkB;AACdI,UAAAA,CAAC,GAAG,IAAJ;AACA,cAAIG,CAAC,GAAGJ,CAAR;AACAA,UAAAA,CAAC,GAAG,IAAIb,MAAJ,CAAWH,WAAX,EAAwB,CAAxB,CAAJ;AACAW,UAAAA,CAAC,CAACU,GAAF,CAAM,IAAIjB,oBAAJ,CAAyBJ,WAAzB,EAAsC,CAAtC,EAAyCoB,CAAzC,CAAN;AACH;AACJ,OAPD,MAQK;AACDH,QAAAA,CAAC,GAAG,KAAJ;AACAD,QAAAA,CAAC,CAACK,GAAF,CAAMN,CAAC,CAACI,OAAR;AACH;AACJ;;AACDR,IAAAA,CAAC,CAACU,GAAF,CAAM,IAAIjB,oBAAJ,CAAyBJ,WAAzB,EAAsC,CAAtC,EAAyCgB,CAAzC,CAAN;AACA,WAAOL,CAAP;AACH,GArBD;;AAsBAJ,EAAAA,YAAY,CAACK,CAAb,GAAiB,UAAUA,CAAV,EAAa;AAC1B,WAAQP,MAAM,CAACO,CAAC,CAACU,CAAH,CAAN,IAAejB,MAAM,CAACO,CAAC,CAACW,CAAH,CAArB,IAA8BjB,UAAU,CAACM,CAAC,CAACU,CAAH,CAAxC,IAAiDhB,UAAU,CAACM,CAAC,CAACW,CAAH,CAAnE;AACH,GAFD;;AAGAhB,EAAAA,YAAY,CAACM,CAAb,GAAiB,UAAUD,CAAV,EAAa;AAC1B,WAAO,CAACL,YAAY,CAACK,CAAb,CAAeA,CAAf,CAAR;AACH,GAFD;;AAGAL,EAAAA,YAAY,CAACiB,EAAb,GAAkBvB,QAAQ,CAACM,YAAD,EAAe,cAAf,CAA1B;AACA,SAAOA,YAAP;AACH,CAnC+C,CAmC9CT,IAnC8C,CAAhD;;AAoCA,SAASS,YAAT","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Base, IList$1_$type, Point_$type, markType, getEnumerator } from \"igniteui-react-core\";\nimport { List$1 } from \"igniteui-react-core\";\nimport { ReadOnlyCollection$1 } from \"igniteui-react-core\";\nimport { isNaN_, isInfinity } from \"igniteui-react-core\";\n/**\n * @hidden\n */\nvar NaNSegmenter = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(NaNSegmenter, _super);\n    function NaNSegmenter() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    NaNSegmenter.c = function (a, b) {\n        var c = new List$1(IList$1_$type.specialize(Point_$type), 0);\n        var d = getEnumerator(a);\n        var e = new List$1(Point_$type, 0);\n        var f = true;\n        while (d.moveNext()) {\n            if (NaNSegmenter.a(d.current)) {\n                if (!f && b == 1) {\n                    f = true;\n                    var g = e;\n                    e = new List$1(Point_$type, 0);\n                    c.add(new ReadOnlyCollection$1(Point_$type, 1, g));\n                }\n            }\n            else {\n                f = false;\n                e.add(d.current);\n            }\n        }\n        c.add(new ReadOnlyCollection$1(Point_$type, 1, e));\n        return c;\n    };\n    NaNSegmenter.a = function (a) {\n        return (isNaN_(a.x) || isNaN_(a.y) || isInfinity(a.x) || isInfinity(a.y));\n    };\n    NaNSegmenter.b = function (a) {\n        return !NaNSegmenter.a(a);\n    };\n    NaNSegmenter.$t = markType(NaNSegmenter, 'NaNSegmenter');\n    return NaNSegmenter;\n}(Base));\nexport { NaNSegmenter };\n"]},"metadata":{},"sourceType":"module"}