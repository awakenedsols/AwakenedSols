{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Numeric } from \"./Numeric\";\nimport { Number_$type, markType } from \"./type\";\nimport { Random } from \"./Random\";\nimport { List$1 } from \"./List$1\";\nimport { isNaN_, isInfinity } from \"./number\";\n/**\n * @hidden\n */\n\nvar LeastSquaresFit =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(LeastSquaresFit, _super);\n\n  function LeastSquaresFit() {\n    return _super.call(this) || this;\n  }\n\n  LeastSquaresFit.aa = function () {\n    return LeastSquaresFit.t() && LeastSquaresFit.u() && LeastSquaresFit.s() && LeastSquaresFit.w() && LeastSquaresFit.x() && LeastSquaresFit.r() && LeastSquaresFit.y() && LeastSquaresFit.z();\n  };\n\n  LeastSquaresFit.k = function (a, b, c) {\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\n    for (var i = 0; i < a; ++i) {\n      var j = b(i);\n      var k = c(i);\n\n      if (!isNaN_(j) && !isNaN_(k)) {\n        d += k;\n        e += j * j;\n        f += j;\n        g += j * k;\n        ++h;\n      }\n    }\n\n    if (h < 2) {\n      return null;\n    }\n\n    var l = (d * e - f * g) / (h * e - f * f);\n    var m = (h * g - f * d) / (h * e - f * f);\n    return [l, m];\n  };\n\n  LeastSquaresFit.ad = function (a, b) {\n    if (a.length != 2) {\n      return NaN;\n    }\n\n    return a[0] + a[1] * b;\n  };\n\n  LeastSquaresFit.t = function () {\n    var a = new Random(0);\n    var b = new Array(2);\n\n    for (var c = 0; c < b.length; ++c) {\n      b[c] = 10 * a.nextDouble();\n    }\n\n    var d = new List$1(Number_$type, 0);\n    var e = new List$1(Number_$type, 0);\n\n    for (var f = -100; f < 100; ++f) {\n      var g = f;\n      var h = LeastSquaresFit.ad(b, g);\n\n      if (!isNaN_(h)) {\n        d.add(g);\n        e.add(h);\n      }\n    }\n\n    var i = LeastSquaresFit.k(d.count, function (j) {\n      return d._inner[j];\n    }, function (j) {\n      return e._inner[j];\n    });\n\n    for (var j = 0; j < b.length; ++j) {\n      if (Math.abs(b[j] - i[j]) > 0.0001) {}\n    }\n\n    return true;\n  };\n\n  LeastSquaresFit.l = function (a, b, c) {\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\n    for (var i = 0; i < a; ++i) {\n      var j = b(i);\n      var k = c(i);\n\n      if (!isNaN_(j) && !isNaN_(k) && j > 0) {\n        var l = Math.log(j);\n        d += k * l;\n        e += k;\n        f += l;\n        g += l * l;\n        ++h;\n      }\n    }\n\n    if (h < 2) {\n      return null;\n    }\n\n    var m = (h * d - e * f) / (h * g - f * f);\n    var n = (e - m * f) / h;\n    return [n, m];\n  };\n\n  LeastSquaresFit.ae = function (a, b) {\n    if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n      return NaN;\n    }\n\n    return a[0] + a[1] * Math.log(b);\n  };\n\n  LeastSquaresFit.u = function () {\n    var a = new Random(0);\n    var b = new Array(2);\n\n    for (var c = 0; c < b.length; ++c) {\n      b[c] = 10 * a.nextDouble();\n    }\n\n    var d = new List$1(Number_$type, 0);\n    var e = new List$1(Number_$type, 0);\n\n    for (var f = 1; f < 100; ++f) {\n      var g = f;\n      var h = LeastSquaresFit.ae(b, g);\n\n      if (!isNaN_(h)) {\n        d.add(g);\n        e.add(h);\n      }\n    }\n\n    var i = LeastSquaresFit.l(d.count, function (j) {\n      return d._inner[j];\n    }, function (j) {\n      return e._inner[j];\n    });\n\n    for (var j = 0; j < b.length; ++j) {\n      if (Math.abs(b[j] - i[j]) > 0.0001) {}\n    }\n\n    return true;\n  };\n\n  LeastSquaresFit.j = function (a, b, c) {\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n    var i = 0;\n\n    for (var j = 0; j < a; ++j) {\n      var k = b(j);\n      var l = c(j);\n\n      if (!isNaN_(k) && !isNaN_(l) && l > 0) {\n        var m = Math.log(l);\n        d += k * k * l;\n        e += l * m;\n        f += k * l;\n        g += k * l * m;\n        h += l;\n        ++i;\n      }\n    }\n\n    if (i < 2) {\n      return null;\n    }\n\n    var n = (d * e - f * g) / (h * d - f * f);\n    var o = (h * g - f * e) / (h * d - f * f);\n    return [Math.exp(n), o];\n  };\n\n  LeastSquaresFit.ac = function (a, b) {\n    if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n      return NaN;\n    }\n\n    return a[0] * Math.exp(a[1] * b);\n  };\n\n  LeastSquaresFit.s = function () {\n    var a = new Random(0);\n    var b = new Array(2);\n\n    for (var c = 0; c < b.length; ++c) {\n      b[c] = 2 * a.nextDouble();\n    }\n\n    var d = new List$1(Number_$type, 0);\n    var e = new List$1(Number_$type, 0);\n\n    for (var f = 1; f < 100; ++f) {\n      var g = f;\n      var h = LeastSquaresFit.ac(b, g);\n\n      if (!isNaN_(h)) {\n        d.add(g);\n        e.add(h);\n      }\n    }\n\n    var i = LeastSquaresFit.j(d.count, function (j) {\n      return d._inner[j];\n    }, function (j) {\n      return e._inner[j];\n    });\n\n    for (var j = 0; j < b.length; ++j) {\n      if (Math.abs(b[j] - i[j]) > 0.0001) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  LeastSquaresFit.n = function (a, b, c) {\n    var d = 0;\n    var e = 0;\n    var f = 0;\n    var g = 0;\n    var h = 0;\n\n    for (var i = 0; i < a; ++i) {\n      var j = b(i);\n      var k = c(i);\n\n      if (!isNaN_(j) && !isNaN_(k) && j > 0 && k > 0) {\n        var l = Math.log(b(i));\n        var m = Math.log(c(i));\n        d += l * m;\n        e += l;\n        f += m;\n        g += l * l;\n        ++h;\n      }\n    }\n\n    if (h < 2) {\n      return null;\n    }\n\n    var n = (h * d - e * f) / (h * g - e * e);\n    var o = Math.exp((f - n * e) / h);\n    return [o, n];\n  };\n\n  LeastSquaresFit.ag = function (a, b) {\n    if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n      return NaN;\n    }\n\n    return a[0] * Math.pow(b, a[1]);\n  };\n\n  LeastSquaresFit.w = function () {\n    var a = new Random(0);\n    var b = new Array(2);\n\n    for (var c = 0; c < b.length; ++c) {\n      b[c] = 10 * a.nextDouble();\n    }\n\n    var d = new List$1(Number_$type, 0);\n    var e = new List$1(Number_$type, 0);\n\n    for (var f = -100; f < 100; ++f) {\n      d.add(f);\n      e.add(LeastSquaresFit.ag(b, f));\n    }\n\n    var g = LeastSquaresFit.n(d.count, function (h) {\n      return d._inner[h];\n    }, function (h) {\n      return e._inner[h];\n    });\n\n    for (var h = 0; h < b.length; ++h) {\n      if (Math.abs(b[h] - g[h]) > 0.0001) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  LeastSquaresFit.o = function (a, b, c) {\n    return LeastSquaresFit.m(a, 2, b, c);\n  };\n\n  LeastSquaresFit.ah = function (a, b) {\n    return LeastSquaresFit.af(a, b);\n  };\n\n  LeastSquaresFit.x = function () {\n    return LeastSquaresFit.v(2);\n  };\n\n  LeastSquaresFit.i = function (a, b, c) {\n    return LeastSquaresFit.m(a, 3, b, c);\n  };\n\n  LeastSquaresFit.ab = function (a, b) {\n    return LeastSquaresFit.af(a, b);\n  };\n\n  LeastSquaresFit.r = function () {\n    return LeastSquaresFit.v(3);\n  };\n\n  LeastSquaresFit.p = function (a, b, c) {\n    return LeastSquaresFit.m(a, 4, b, c);\n  };\n\n  LeastSquaresFit.ai = function (a, b) {\n    return LeastSquaresFit.af(a, b);\n  };\n\n  LeastSquaresFit.y = function () {\n    return LeastSquaresFit.v(4);\n  };\n\n  LeastSquaresFit.q = function (a, b, c) {\n    return LeastSquaresFit.m(a, 5, b, c);\n  };\n\n  LeastSquaresFit.aj = function (a, b) {\n    return LeastSquaresFit.af(a, b);\n  };\n\n  LeastSquaresFit.z = function () {\n    return LeastSquaresFit.v(5);\n  };\n\n  LeastSquaresFit.m = function (a, b, c, d) {\n    var e = new Array(1 + 2 * b);\n\n    for (var f = 0; f < e.length; f++) {\n      e[f] = 0;\n    }\n\n    var g = function () {\n      var $firstRank;\n      var $ret = new Array($firstRank = b + 1);\n      var $currRet = $ret;\n\n      for (var $rankInit = 0; $rankInit < $firstRank; $rankInit++) {\n        $currRet[$rankInit] = new Array(b + 1);\n      }\n\n      return $ret;\n    }();\n\n    var h = new Array(b + 1);\n\n    for (var i = 0; i < h.length; i++) {\n      h[i] = 0;\n    }\n\n    var j = 0;\n\n    for (var k = 0; k < a; ++k) {\n      var l = 1;\n      var m = c(k);\n\n      if (!isNaN_(m) && !isNaN_(d(k))) {\n        for (var n = 0; n < e.length; ++n) {\n          e[n] += l;\n          l *= m;\n          ++j;\n        }\n      }\n    }\n\n    if (j < b) {\n      return null;\n    }\n\n    for (var o = 0; o <= b; ++o) {\n      for (var p = 0; p <= b; ++p) {\n        g[o][p] = e[o + p];\n      }\n    }\n\n    for (var q = 0; q < a; ++q) {\n      var r = c(q);\n      var s = d(q);\n\n      if (!isNaN_(r) && !isNaN_(s)) {\n        for (var t = 0; t <= b; ++t) {\n          h[t] += Math.pow(r, t) * s;\n        }\n      }\n    }\n\n    return Numeric.d(g, h) ? h : null;\n  };\n\n  LeastSquaresFit.af = function (a, b) {\n    if (a.length < 1 || isInfinity(b) || isNaN_(b)) {\n      return NaN;\n    }\n\n    var c = 0;\n\n    for (var d = 0; d < a.length; ++d) {\n      c += a[d] * Math.pow(b, d);\n    }\n\n    return c;\n  };\n\n  LeastSquaresFit.v = function (a) {\n    var b = new Random(0);\n    var c = new Array(a + 1);\n\n    for (var d = 0; d < c.length; ++d) {\n      c[d] = 2 * b.nextDouble();\n    }\n\n    var e = new List$1(Number_$type, 0);\n    var f = new List$1(Number_$type, 0);\n\n    for (var g = -100; g < 100; ++g) {\n      var h = g;\n      var i = LeastSquaresFit.af(c, h);\n\n      if (!isNaN_(i)) {\n        e.add(h);\n        f.add(i);\n      }\n    }\n\n    var j = LeastSquaresFit.m(e.count, a, function (k) {\n      return e._inner[k];\n    }, function (k) {\n      return f._inner[k];\n    });\n\n    for (var k = 0; k < a; ++k) {\n      if (Math.abs(c[k] - j[k]) > 0.0001) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  LeastSquaresFit.$t = markType(LeastSquaresFit, 'LeastSquaresFit', Numeric.$);\n  return LeastSquaresFit;\n}(Numeric);\n\nexport { LeastSquaresFit };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-core/esm5/lib/LeastSquaresFit.js"],"names":["__extends","Numeric","Number_$type","markType","Random","List$1","isNaN_","isInfinity","LeastSquaresFit","_super","call","aa","t","u","s","w","x","r","y","z","k","a","b","c","d","e","f","g","h","i","j","l","m","ad","length","NaN","Array","nextDouble","add","count","_inner","Math","abs","log","n","ae","o","exp","ac","ag","pow","ah","af","v","ab","p","ai","q","aj","$firstRank","$ret","$currRet","$rankInit","$t","$"],"mappings":"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","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends } from \"tslib\";\nimport { Numeric } from \"./Numeric\";\nimport { Number_$type, markType } from \"./type\";\nimport { Random } from \"./Random\";\nimport { List$1 } from \"./List$1\";\nimport { isNaN_, isInfinity } from \"./number\";\n/**\n * @hidden\n */\nvar LeastSquaresFit = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(LeastSquaresFit, _super);\n    function LeastSquaresFit() {\n        return _super.call(this) || this;\n    }\n    LeastSquaresFit.aa = function () {\n        return LeastSquaresFit.t() && LeastSquaresFit.u() && LeastSquaresFit.s() && LeastSquaresFit.w() && LeastSquaresFit.x() && LeastSquaresFit.r() && LeastSquaresFit.y() && LeastSquaresFit.z();\n    };\n    LeastSquaresFit.k = function (a, b, c) {\n        var d = 0;\n        var e = 0;\n        var f = 0;\n        var g = 0;\n        var h = 0;\n        for (var i = 0; i < a; ++i) {\n            var j = b(i);\n            var k = c(i);\n            if (!isNaN_(j) && !isNaN_(k)) {\n                d += k;\n                e += j * j;\n                f += j;\n                g += j * k;\n                ++h;\n            }\n        }\n        if (h < 2) {\n            return null;\n        }\n        var l = (d * e - f * g) / (h * e - f * f);\n        var m = (h * g - f * d) / (h * e - f * f);\n        return [l, m];\n    };\n    LeastSquaresFit.ad = function (a, b) {\n        if (a.length != 2) {\n            return NaN;\n        }\n        return a[0] + a[1] * b;\n    };\n    LeastSquaresFit.t = function () {\n        var a = new Random(0);\n        var b = new Array(2);\n        for (var c = 0; c < b.length; ++c) {\n            b[c] = 10 * a.nextDouble();\n        }\n        var d = new List$1(Number_$type, 0);\n        var e = new List$1(Number_$type, 0);\n        for (var f = -100; f < 100; ++f) {\n            var g = f;\n            var h = LeastSquaresFit.ad(b, g);\n            if (!isNaN_(h)) {\n                d.add(g);\n                e.add(h);\n            }\n        }\n        var i = LeastSquaresFit.k(d.count, function (j) { return d._inner[j]; }, function (j) { return e._inner[j]; });\n        for (var j = 0; j < b.length; ++j) {\n            if (Math.abs(b[j] - i[j]) > 0.0001) {\n            }\n        }\n        return true;\n    };\n    LeastSquaresFit.l = function (a, b, c) {\n        var d = 0;\n        var e = 0;\n        var f = 0;\n        var g = 0;\n        var h = 0;\n        for (var i = 0; i < a; ++i) {\n            var j = b(i);\n            var k = c(i);\n            if (!isNaN_(j) && !isNaN_(k) && j > 0) {\n                var l = Math.log(j);\n                d += k * l;\n                e += k;\n                f += l;\n                g += l * l;\n                ++h;\n            }\n        }\n        if (h < 2) {\n            return null;\n        }\n        var m = (h * d - e * f) / (h * g - f * f);\n        var n = (e - m * f) / h;\n        return [n, m];\n    };\n    LeastSquaresFit.ae = function (a, b) {\n        if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n            return NaN;\n        }\n        return a[0] + a[1] * Math.log(b);\n    };\n    LeastSquaresFit.u = function () {\n        var a = new Random(0);\n        var b = new Array(2);\n        for (var c = 0; c < b.length; ++c) {\n            b[c] = 10 * a.nextDouble();\n        }\n        var d = new List$1(Number_$type, 0);\n        var e = new List$1(Number_$type, 0);\n        for (var f = 1; f < 100; ++f) {\n            var g = f;\n            var h = LeastSquaresFit.ae(b, g);\n            if (!isNaN_(h)) {\n                d.add(g);\n                e.add(h);\n            }\n        }\n        var i = LeastSquaresFit.l(d.count, function (j) { return d._inner[j]; }, function (j) { return e._inner[j]; });\n        for (var j = 0; j < b.length; ++j) {\n            if (Math.abs(b[j] - i[j]) > 0.0001) {\n            }\n        }\n        return true;\n    };\n    LeastSquaresFit.j = function (a, b, c) {\n        var d = 0;\n        var e = 0;\n        var f = 0;\n        var g = 0;\n        var h = 0;\n        var i = 0;\n        for (var j = 0; j < a; ++j) {\n            var k = b(j);\n            var l = c(j);\n            if (!isNaN_(k) && !isNaN_(l) && l > 0) {\n                var m = Math.log(l);\n                d += k * k * l;\n                e += l * m;\n                f += k * l;\n                g += k * l * m;\n                h += l;\n                ++i;\n            }\n        }\n        if (i < 2) {\n            return null;\n        }\n        var n = (d * e - f * g) / (h * d - f * f);\n        var o = (h * g - f * e) / (h * d - f * f);\n        return [Math.exp(n), o];\n    };\n    LeastSquaresFit.ac = function (a, b) {\n        if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n            return NaN;\n        }\n        return a[0] * Math.exp(a[1] * b);\n    };\n    LeastSquaresFit.s = function () {\n        var a = new Random(0);\n        var b = new Array(2);\n        for (var c = 0; c < b.length; ++c) {\n            b[c] = 2 * a.nextDouble();\n        }\n        var d = new List$1(Number_$type, 0);\n        var e = new List$1(Number_$type, 0);\n        for (var f = 1; f < 100; ++f) {\n            var g = f;\n            var h = LeastSquaresFit.ac(b, g);\n            if (!isNaN_(h)) {\n                d.add(g);\n                e.add(h);\n            }\n        }\n        var i = LeastSquaresFit.j(d.count, function (j) { return d._inner[j]; }, function (j) { return e._inner[j]; });\n        for (var j = 0; j < b.length; ++j) {\n            if (Math.abs(b[j] - i[j]) > 0.0001) {\n                return false;\n            }\n        }\n        return true;\n    };\n    LeastSquaresFit.n = function (a, b, c) {\n        var d = 0;\n        var e = 0;\n        var f = 0;\n        var g = 0;\n        var h = 0;\n        for (var i = 0; i < a; ++i) {\n            var j = b(i);\n            var k = c(i);\n            if (!isNaN_(j) && !isNaN_(k) && j > 0 && k > 0) {\n                var l = Math.log(b(i));\n                var m = Math.log(c(i));\n                d += l * m;\n                e += l;\n                f += m;\n                g += l * l;\n                ++h;\n            }\n        }\n        if (h < 2) {\n            return null;\n        }\n        var n = (h * d - e * f) / (h * g - e * e);\n        var o = Math.exp((f - n * e) / h);\n        return [o, n];\n    };\n    LeastSquaresFit.ag = function (a, b) {\n        if (a.length != 2 || b < 0 || isInfinity(b) || isNaN_(b)) {\n            return NaN;\n        }\n        return a[0] * Math.pow(b, a[1]);\n    };\n    LeastSquaresFit.w = function () {\n        var a = new Random(0);\n        var b = new Array(2);\n        for (var c = 0; c < b.length; ++c) {\n            b[c] = 10 * a.nextDouble();\n        }\n        var d = new List$1(Number_$type, 0);\n        var e = new List$1(Number_$type, 0);\n        for (var f = -100; f < 100; ++f) {\n            d.add(f);\n            e.add(LeastSquaresFit.ag(b, f));\n        }\n        var g = LeastSquaresFit.n(d.count, function (h) { return d._inner[h]; }, function (h) { return e._inner[h]; });\n        for (var h = 0; h < b.length; ++h) {\n            if (Math.abs(b[h] - g[h]) > 0.0001) {\n                return false;\n            }\n        }\n        return true;\n    };\n    LeastSquaresFit.o = function (a, b, c) {\n        return LeastSquaresFit.m(a, 2, b, c);\n    };\n    LeastSquaresFit.ah = function (a, b) {\n        return LeastSquaresFit.af(a, b);\n    };\n    LeastSquaresFit.x = function () {\n        return LeastSquaresFit.v(2);\n    };\n    LeastSquaresFit.i = function (a, b, c) {\n        return LeastSquaresFit.m(a, 3, b, c);\n    };\n    LeastSquaresFit.ab = function (a, b) {\n        return LeastSquaresFit.af(a, b);\n    };\n    LeastSquaresFit.r = function () {\n        return LeastSquaresFit.v(3);\n    };\n    LeastSquaresFit.p = function (a, b, c) {\n        return LeastSquaresFit.m(a, 4, b, c);\n    };\n    LeastSquaresFit.ai = function (a, b) {\n        return LeastSquaresFit.af(a, b);\n    };\n    LeastSquaresFit.y = function () {\n        return LeastSquaresFit.v(4);\n    };\n    LeastSquaresFit.q = function (a, b, c) {\n        return LeastSquaresFit.m(a, 5, b, c);\n    };\n    LeastSquaresFit.aj = function (a, b) {\n        return LeastSquaresFit.af(a, b);\n    };\n    LeastSquaresFit.z = function () {\n        return LeastSquaresFit.v(5);\n    };\n    LeastSquaresFit.m = function (a, b, c, d) {\n        var e = new Array(1 + 2 * b);\n        for (var f = 0; f < e.length; f++) {\n            e[f] = 0;\n        }\n        var g = ((function () {\n            var $firstRank;\n            var $ret = new Array($firstRank = b + 1);\n            var $currRet = $ret;\n            for (var $rankInit = 0; $rankInit < $firstRank; $rankInit++) {\n                $currRet[$rankInit] = new Array(b + 1);\n            }\n            return $ret;\n        })());\n        var h = new Array(b + 1);\n        for (var i = 0; i < h.length; i++) {\n            h[i] = 0;\n        }\n        var j = 0;\n        for (var k = 0; k < a; ++k) {\n            var l = 1;\n            var m = c(k);\n            if (!isNaN_(m) && !isNaN_(d(k))) {\n                for (var n = 0; n < e.length; ++n) {\n                    e[n] += l;\n                    l *= m;\n                    ++j;\n                }\n            }\n        }\n        if (j < b) {\n            return null;\n        }\n        for (var o = 0; o <= b; ++o) {\n            for (var p = 0; p <= b; ++p) {\n                g[o][p] = e[o + p];\n            }\n        }\n        for (var q = 0; q < a; ++q) {\n            var r = c(q);\n            var s = d(q);\n            if (!isNaN_(r) && !isNaN_(s)) {\n                for (var t = 0; t <= b; ++t) {\n                    h[t] += (Math.pow(r, t) * s);\n                }\n            }\n        }\n        return Numeric.d(g, h) ? h : null;\n    };\n    LeastSquaresFit.af = function (a, b) {\n        if (a.length < 1 || isInfinity(b) || isNaN_(b)) {\n            return NaN;\n        }\n        var c = 0;\n        for (var d = 0; d < a.length; ++d) {\n            c += a[d] * Math.pow(b, d);\n        }\n        return c;\n    };\n    LeastSquaresFit.v = function (a) {\n        var b = new Random(0);\n        var c = new Array(a + 1);\n        for (var d = 0; d < c.length; ++d) {\n            c[d] = 2 * b.nextDouble();\n        }\n        var e = new List$1(Number_$type, 0);\n        var f = new List$1(Number_$type, 0);\n        for (var g = -100; g < 100; ++g) {\n            var h = g;\n            var i = LeastSquaresFit.af(c, h);\n            if (!isNaN_(i)) {\n                e.add(h);\n                f.add(i);\n            }\n        }\n        var j = LeastSquaresFit.m(e.count, a, function (k) { return e._inner[k]; }, function (k) { return f._inner[k]; });\n        for (var k = 0; k < a; ++k) {\n            if (Math.abs(c[k] - j[k]) > 0.0001) {\n                return false;\n            }\n        }\n        return true;\n    };\n    LeastSquaresFit.$t = markType(LeastSquaresFit, 'LeastSquaresFit', Numeric.$);\n    return LeastSquaresFit;\n}(Numeric));\nexport { LeastSquaresFit };\n"]},"metadata":{},"sourceType":"module"}