{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { OnBalanceVolumeIndicator } from \"./OnBalanceVolumeIndicator\";\n/**\n * Represents a IgxDataChartComponent On Balance Bolume indicator series.\n * Default required members: Close, Volume\n*\n* You can use the `IgrOnBalanceVolumeIndicator` to calculate a running total of sales volume for a stock.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrOnBalanceVolumeIndicator\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n* \t\topenMemberPath=\"Open\"\n* \t\tcloseMemberPath=\"Close\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.series = new IgrOnBalanceVolumeIndicator({ name: \"series1\" });\n* this.series.dataSource = this.data;\n* this.series.xAxis = this.categoryXAxis;\n* this.series.yAxis = this.numericYAxis;\n* this.series.xAxisName = \"xAxis\";\n* this.series.yAxisName = \"yAxis\";\n* this.series.openMemberPath = \"open\";\n* this.series.highMemberPath = \"high\";\n* this.series.lowMemberPath = \"low\";\n* this.series.closeMemberPath = \"close\";\n* ```\n*/\n\nvar IgrOnBalanceVolumeIndicator =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrOnBalanceVolumeIndicator, _super);\n\n  function IgrOnBalanceVolumeIndicator(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrOnBalanceVolumeIndicator.prototype.createImplementation = function () {\n    return new OnBalanceVolumeIndicator();\n  };\n\n  Object.defineProperty(IgrOnBalanceVolumeIndicator.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return IgrOnBalanceVolumeIndicator;\n}(IgrStrategyBasedIndicator);\n\nexport { IgrOnBalanceVolumeIndicator };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-on-balance-volume-indicator.js"],"names":["__extends","IgrStrategyBasedIndicator","OnBalanceVolumeIndicator","IgrOnBalanceVolumeIndicator","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,yBAAT,QAA0C,gCAA1C;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,2BAA2B;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;AAC7EJ,EAAAA,SAAS,CAACG,2BAAD,EAA8BC,MAA9B,CAAT;;AACA,WAASD,2BAAT,CAAqCE,KAArC,EAA4C;AACxC,WAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;AACH;;AACDF,EAAAA,2BAA2B,CAACI,SAA5B,CAAsCC,oBAAtC,GAA6D,YAAY;AACrE,WAAO,IAAIN,wBAAJ,EAAP;AACH,GAFD;;AAGAO,EAAAA,MAAM,CAACC,cAAP,CAAsBP,2BAA2B,CAACI,SAAlD,EAA6D,GAA7D,EAAkE;AAC9D;AACR;AACA;AACQI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKC,eAAZ;AACH,KAN6D;AAO9DC,IAAAA,UAAU,EAAE,KAPkD;AAQ9DC,IAAAA,YAAY,EAAE;AARgD,GAAlE;AAUA,SAAOX,2BAAP;AACH,CAnB8D,CAmB7DF,yBAnB6D,CAA/D;;AAoBA,SAASE,2BAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrStrategyBasedIndicator } from \"./igr-strategy-based-indicator\";\nimport { OnBalanceVolumeIndicator } from \"./OnBalanceVolumeIndicator\";\n/**\n * Represents a IgxDataChartComponent On Balance Bolume indicator series.\n * Default required members: Close, Volume\n*\n* You can use the `IgrOnBalanceVolumeIndicator` to calculate a running total of sales volume for a stock.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Year\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*\n*     <IgrOnBalanceVolumeIndicator\n*         name=\"series1\"\n*         xAxisName=\"xAxis\"\n*         yAxisName=\"yAxis\"\n* \t\topenMemberPath=\"Open\"\n* \t\tcloseMemberPath=\"Close\"\n*         highMemberPath=\"High\"\n*         lowMemberPath=\"Low\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* this.series = new IgrOnBalanceVolumeIndicator({ name: \"series1\" });\n* this.series.dataSource = this.data;\n* this.series.xAxis = this.categoryXAxis;\n* this.series.yAxis = this.numericYAxis;\n* this.series.xAxisName = \"xAxis\";\n* this.series.yAxisName = \"yAxis\";\n* this.series.openMemberPath = \"open\";\n* this.series.highMemberPath = \"high\";\n* this.series.lowMemberPath = \"low\";\n* this.series.closeMemberPath = \"close\";\n* ```\n*/\nvar IgrOnBalanceVolumeIndicator = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrOnBalanceVolumeIndicator, _super);\n    function IgrOnBalanceVolumeIndicator(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrOnBalanceVolumeIndicator.prototype.createImplementation = function () {\n        return new OnBalanceVolumeIndicator();\n    };\n    Object.defineProperty(IgrOnBalanceVolumeIndicator.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return IgrOnBalanceVolumeIndicator;\n}(IgrStrategyBasedIndicator));\nexport { IgrOnBalanceVolumeIndicator };\n"]},"metadata":{},"sourceType":"module"}