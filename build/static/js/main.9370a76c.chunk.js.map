{"version":3,"sources":["candy-machine.ts","utils.ts","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","connection.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","authority","isSoldOut","isActive","isPresale","isWhitelistOnly","goLiveDate","treasury","wallet","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","retainAuthority","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","getCollectionPDA","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","createAccountsForMint","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","signers","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","sendTransactions","SequenceType","StopOnFailure","undefined","txs","userTokenAccount","transaction","mintOneToken","beforeTransactions","afterTransactions","setupState","userPayingAccountAddress","remainingAccounts","cleanupInstructions","push","getNetworkToken","gatekeeperNetwork","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","map","rm","toBase58","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","collectionPDA","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","error","instructionsMatrix","signersMatrix","txns","t","mintTxn","mintTxId","metadataKey","ms","toDate","Date","numberFormater","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","formatNumber","format","val","asNumber","LAMPORTS_PER_SOL","buyer","CTAButton","styled","Button","MintButton","onMint","isMinting","setIsMinting","useWallet","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","removeAccountChangeListener","previousGatewayStatus","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","find","disabled","onClick","network","ACTIVE","findGatewayToken","gatewayToken","isValid","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","Error","variant","CircularProgress","ConnectButton","WalletDialogButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","message","severity","alertState","setAlertState","setIsActive","setItemsRemaining","isWhitelistUser","setIsPresale","isValidBalance","setIsValidBalance","discountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","useMemo","signAllTransactions","signTransaction","refreshCandyMachineState","useCallback","commitment","Connection","cndy","active","getTime","presale","isWLUser","userPrice","token","getTokenAccountBalance","balance","valid","amount","gte","getBalance","collectionPDAAccount","txnEstimate","hideDuration","startsWith","document","getElementById","click","connected","setupMint","txTimeout","mintResult","metadataStatus","remaining","msg","code","location","reload","indexOf","loop","className","Typography","color","Container","marginTop","maxWidth","position","Paper","padding","paddingBottom","backgroundColor","borderRadius","Grid","container","direction","justifyContent","wrap","item","xs","fontWeight","align","display","clusterUrl","WalletAdapterNetwork","Devnet","handleTransaction","signatures","sig","equals","sendTransaction","broadcastTransaction","options","autoShowModal","Snackbar","autoHideDuration","onClose","Alert","process","theme","parseInt","createTheme","palette","type","overrides","MuiButtonBase","root","MuiButton","textTransform","startIcon","marginRight","endIcon","marginLeft","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","autoConnect","path","element","HomeComponent","DEFAULT_TIMEOUT","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getErrorForTransaction","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","m","regex","exec","index","lastIndex","instructionSet","signersSet","sequenceType","Parallel","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","Transaction","add","recentBlockhash","blockhash","setSigners","s","partialSign","partiallySignedTransactions","filter","fullySignedTransactions","signedTxns","concat","pendingTxns","signedTxnPromise","sendSignedTransaction","signedTransaction","all","number","result","awaitConfirmation","includesFeePayer","rawTransaction","serialize","skipPreflight","sendRawTransaction","confirmation","getUnixTs","startTime","simulateResult","simulateTransaction","logs","line","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","onSignature","context","e"],"mappings":"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","file":"static/js/main.9370a76c.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\n\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport {\n  SystemProgram,\n  Transaction,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { sendTransactions, SequenceType } from './connection';\n\nimport {\n  CIVIC,\n  getAtaForMint,\n  getNetworkExpire,\n  getNetworkToken,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './utils';\n\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\n);\n\ninterface CandyMachineState {\n  authority: anchor.web3.PublicKey;\n  itemsAvailable: number;\n  itemsRedeemed: number;\n  itemsRemaining: number;\n  treasury: anchor.web3.PublicKey;\n  tokenMint: null | anchor.web3.PublicKey;\n  isSoldOut: boolean;\n  isActive: boolean;\n  isPresale: boolean;\n  isWhitelistOnly: boolean;\n  goLiveDate: anchor.BN;\n  price: anchor.BN;\n  gatekeeper: null | {\n    expireOnUse: boolean;\n    gatekeeperNetwork: anchor.web3.PublicKey;\n  };\n  endSettings: null | {\n    number: anchor.BN;\n    endSettingType: any;\n  };\n  whitelistMintSettings: null | {\n    mode: any;\n    mint: anchor.web3.PublicKey;\n    presale: boolean;\n    discountPrice: null | anchor.BN;\n  };\n  hiddenSettings: null | {\n    name: string;\n    uri: string;\n    hash: Uint8Array;\n  };\n  retainAuthority: boolean;\n}\n\nexport interface CandyMachineAccount {\n  id: anchor.web3.PublicKey;\n  program: anchor.Program;\n  state: CandyMachineState;\n}\n\nexport const awaitTransactionSignatureConfirmation = async (\n  txid: anchor.web3.TransactionSignature,\n  timeout: number,\n  connection: anchor.web3.Connection,\n  queryStatus = false,\n): Promise<anchor.web3.SignatureStatus | null | void> => {\n  let done = false;\n  let status: anchor.web3.SignatureStatus | null | void = {\n    slot: 0,\n    confirmations: 0,\n    err: null,\n  };\n  let subId = 0;\n  status = await new Promise(async (resolve, reject) => {\n    setTimeout(() => {\n      if (done) {\n        return;\n      }\n      done = true;\n      console.log('Rejecting for timeout...');\n      reject({ timeout: true });\n    }, timeout);\n\n    while (!done && queryStatus) {\n      // eslint-disable-next-line no-loop-func\n      (async () => {\n        try {\n          const signatureStatuses = await connection.getSignatureStatuses([\n            txid,\n          ]);\n          status = signatureStatuses && signatureStatuses.value[0];\n          if (!done) {\n            if (!status) {\n              console.log('REST null result for', txid, status);\n            } else if (status.err) {\n              console.log('REST error for', txid, status);\n              done = true;\n              reject(status.err);\n            } else if (!status.confirmations) {\n              console.log('REST no confirmations for', txid, status);\n            } else {\n              console.log('REST confirmation for', txid, status);\n              done = true;\n              resolve(status);\n            }\n          }\n        } catch (e) {\n          if (!done) {\n            console.log('REST connection error: txid', txid, e);\n          }\n        }\n      })();\n      await sleep(2000);\n    }\n  });\n\n  //@ts-ignore\n  if (connection._signatureSubscriptions[subId]) {\n    connection.removeSignatureListener(subId);\n  }\n  done = true;\n  console.log('Returning status', status);\n  return status;\n};\n\nconst createAssociatedTokenAccountInstruction = (\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) => {\n  const keys = [\n    { pubkey: payer, isSigner: true, isWritable: true },\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    {\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new anchor.web3.TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n};\n\nexport const getCandyMachineState = async (\n  anchorWallet: anchor.Wallet,\n  candyMachineId: anchor.web3.PublicKey,\n  connection: anchor.web3.Connection,\n): Promise<CandyMachineAccount> => {\n  const provider = new anchor.Provider(connection, anchorWallet, {\n    preflightCommitment: 'processed',\n  });\n\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\n\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\n\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\n\n  return {\n    id: candyMachineId,\n    program,\n    state: {\n      authority: state.authority,\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      isSoldOut: itemsRemaining === 0,\n      isActive: false,\n      isPresale: false,\n      isWhitelistOnly: false,\n      goLiveDate: state.data.goLiveDate,\n      treasury: state.wallet,\n      tokenMint: state.tokenMint,\n      gatekeeper: state.data.gatekeeper,\n      endSettings: state.data.endSettings,\n      whitelistMintSettings: state.data.whitelistMintSettings,\n      hiddenSettings: state.data.hiddenSettings,\n      price: state.data.price,\n      retainAuthority: state.data.retainAuthority,\n    },\n  };\n};\n\nconst getMasterEdition = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('edition'),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nconst getMetadata = async (\n  mint: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport const getCandyMachineCreator = async (\n  candyMachine: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport const getCollectionPDA = async (\n  candyMachineAddress: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\n    CANDY_MACHINE_PROGRAM,\n  );\n};\n\nexport interface CollectionData {\n  mint: anchor.web3.PublicKey;\n  candyMachine: anchor.web3.PublicKey;\n}\n\nexport const getCollectionAuthorityRecordPDA = async (\n  mint: anchor.web3.PublicKey,\n  newAuthority: anchor.web3.PublicKey,\n): Promise<anchor.web3.PublicKey> => {\n  return (\n    await anchor.web3.PublicKey.findProgramAddress(\n      [\n        Buffer.from('metadata'),\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n        mint.toBuffer(),\n        Buffer.from('collection_authority'),\n        newAuthority.toBuffer(),\n      ],\n      TOKEN_METADATA_PROGRAM_ID,\n    )\n  )[0];\n};\n\nexport type SetupState = {\n  mint: anchor.web3.Keypair;\n  userTokenAccount: anchor.web3.PublicKey;\n  transaction: string;\n};\n\nexport const createAccountsForMint = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n): Promise<SetupState> => {\n  const mint = anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const signers: anchor.web3.Keypair[] = [mint];\n  const instructions = [\n    anchor.web3.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: mint.publicKey,\n      space: MintLayout.span,\n      lamports:\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n          MintLayout.span,\n        ),\n      programId: TOKEN_PROGRAM_ID,\n    }),\n    Token.createInitMintInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      0,\n      payer,\n      payer,\n    ),\n    createAssociatedTokenAccountInstruction(\n      userTokenAccountAddress,\n      payer,\n      payer,\n      mint.publicKey,\n    ),\n    Token.createMintToInstruction(\n      TOKEN_PROGRAM_ID,\n      mint.publicKey,\n      userTokenAccountAddress,\n      payer,\n      [],\n      1,\n    ),\n  ];\n\n  return {\n    mint: mint,\n    userTokenAccount: userTokenAccountAddress,\n    transaction: (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        [instructions],\n        [signers],\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        [],\n        [],\n      )\n    ).txs[0].txid,\n  };\n};\n\ntype MintResult = {\n  mintTxId: string;\n  metadataKey: anchor.web3.PublicKey;\n};\n\nexport const mintOneToken = async (\n  candyMachine: CandyMachineAccount,\n  payer: anchor.web3.PublicKey,\n  beforeTransactions: Transaction[] = [],\n  afterTransactions: Transaction[] = [],\n  setupState?: SetupState,\n): Promise<MintResult | null> => {\n  const mint = setupState?.mint ?? anchor.web3.Keypair.generate();\n  const userTokenAccountAddress = (\n    await getAtaForMint(mint.publicKey, payer)\n  )[0];\n\n  const userPayingAccountAddress = candyMachine.state.tokenMint\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\n    : payer;\n\n  const candyMachineAddress = candyMachine.id;\n  const remainingAccounts = [];\n  const cleanupInstructions = [];\n  const instructions = [];\n  const signers: anchor.web3.Keypair[] = [];\n  console.log('SetupState: ', setupState);\n  if (!setupState) {\n    signers.push(mint);\n    instructions.push(\n      ...[\n        anchor.web3.SystemProgram.createAccount({\n          fromPubkey: payer,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports:\n            await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\n              MintLayout.span,\n            ),\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          payer,\n          payer,\n        ),\n        createAssociatedTokenAccountInstruction(\n          userTokenAccountAddress,\n          payer,\n          payer,\n          mint.publicKey,\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          userTokenAccountAddress,\n          payer,\n          [],\n          1,\n        ),\n      ],\n    );\n  }\n\n  if (candyMachine.state.gatekeeper) {\n    remainingAccounts.push({\n      pubkey: (\n        await getNetworkToken(\n          payer,\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\n        )\n      )[0],\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.gatekeeper.expireOnUse) {\n      remainingAccounts.push({\n        pubkey: CIVIC,\n        isWritable: false,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: (\n          await getNetworkExpire(\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\n          )\n        )[0],\n        isWritable: false,\n        isSigner: false,\n      });\n    }\n  }\n  if (candyMachine.state.whitelistMintSettings) {\n    const mint = new anchor.web3.PublicKey(\n      candyMachine.state.whitelistMintSettings.mint,\n    );\n\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\n    remainingAccounts.push({\n      pubkey: whitelistToken,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\n\n      remainingAccounts.push({\n        pubkey: mint,\n        isWritable: true,\n        isSigner: false,\n      });\n      remainingAccounts.push({\n        pubkey: whitelistBurnAuthority.publicKey,\n        isWritable: false,\n        isSigner: true,\n      });\n      signers.push(whitelistBurnAuthority);\n      const exists =\n        await candyMachine.program.provider.connection.getAccountInfo(\n          whitelistToken,\n        );\n      if (exists) {\n        instructions.push(\n          Token.createApproveInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            whitelistBurnAuthority.publicKey,\n            payer,\n            [],\n            1,\n          ),\n        );\n        cleanupInstructions.push(\n          Token.createRevokeInstruction(\n            TOKEN_PROGRAM_ID,\n            whitelistToken,\n            payer,\n            [],\n          ),\n        );\n      }\n    }\n  }\n\n  if (candyMachine.state.tokenMint) {\n    const transferAuthority = anchor.web3.Keypair.generate();\n\n    signers.push(transferAuthority);\n    remainingAccounts.push({\n      pubkey: userPayingAccountAddress,\n      isWritable: true,\n      isSigner: false,\n    });\n    remainingAccounts.push({\n      pubkey: transferAuthority.publicKey,\n      isWritable: false,\n      isSigner: true,\n    });\n\n    instructions.push(\n      Token.createApproveInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        transferAuthority.publicKey,\n        payer,\n        [],\n        candyMachine.state.price.toNumber(),\n      ),\n    );\n    cleanupInstructions.push(\n      Token.createRevokeInstruction(\n        TOKEN_PROGRAM_ID,\n        userPayingAccountAddress,\n        payer,\n        [],\n      ),\n    );\n  }\n  const metadataAddress = await getMetadata(mint.publicKey);\n  const masterEdition = await getMasterEdition(mint.publicKey);\n\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\n    candyMachineAddress,\n  );\n\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\n  instructions.push(\n    await candyMachine.program.instruction.mintNft(creatorBump, {\n      accounts: {\n        candyMachine: candyMachineAddress,\n        candyMachineCreator,\n        payer: payer,\n        wallet: candyMachine.state.treasury,\n        mint: mint.publicKey,\n        metadata: metadataAddress,\n        masterEdition,\n        mintAuthority: payer,\n        updateAuthority: payer,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n      },\n      remainingAccounts:\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\n    }),\n  );\n\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\n  const collectionPDAAccount =\n    await candyMachine.program.provider.connection.getAccountInfo(\n      collectionPDA,\n    );\n\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\n    try {\n      const collectionData =\n        (await candyMachine.program.account.collectionPda.fetch(\n          collectionPDA,\n        )) as CollectionData;\n      console.log(collectionData);\n      const collectionMint = collectionData.mint;\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\n        collectionMint,\n        collectionPDA,\n      );\n      console.log(collectionMint);\n      if (collectionMint) {\n        const collectionMetadata = await getMetadata(collectionMint);\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\n        console.log('Collection PDA: ', collectionPDA.toBase58());\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\n        instructions.push(\n          await candyMachine.program.instruction.setCollectionDuringMint({\n            accounts: {\n              candyMachine: candyMachineAddress,\n              metadata: metadataAddress,\n              payer: payer,\n              collectionPda: collectionPDA,\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\n              collectionMint,\n              collectionMetadata,\n              collectionMasterEdition,\n              authority: candyMachine.state.authority,\n              collectionAuthorityRecord,\n            },\n          }),\n        );\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const instructionsMatrix = [instructions, cleanupInstructions];\n  const signersMatrix = [signers, []];\n\n  try {\n    const txns = (\n      await sendTransactions(\n        candyMachine.program.provider.connection,\n        candyMachine.program.provider.wallet,\n        instructionsMatrix,\n        signersMatrix,\n        SequenceType.StopOnFailure,\n        'singleGossip',\n        () => {},\n        () => false,\n        undefined,\n        beforeTransactions,\n        afterTransactions,\n      )\n    ).txs.map(t => t.txid);\n    const mintTxn = txns[0];\n    return {\n      mintTxId: mintTxn,\n      metadataKey: metadataAddress,\n    };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\nexport const shortenAddress = (address: string, chars = 4): string => {\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\n};\n\nconst sleep = (ms: number): Promise<void> => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n};\n","import * as anchor from '@project-serum/anchor';\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\nimport { SystemProgram } from '@solana/web3.js';\nimport {\n  LAMPORTS_PER_SOL,\n  SYSVAR_RENT_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\n\nexport interface AlertState {\n  open: boolean;\n  message: string;\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\n  hideDuration?: number | null;\n}\n\nexport const toDate = (value?: anchor.BN) => {\n  if (!value) {\n    return;\n  }\n\n  return new Date(value.toNumber() * 1000);\n};\n\nconst numberFormater = new Intl.NumberFormat('en-US', {\n  style: 'decimal',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = {\n  format: (val?: number) => {\n    if (!val) {\n      return '--';\n    }\n\n    return numberFormater.format(val);\n  },\n  asNumber: (val?: anchor.BN) => {\n    if (!val) {\n      return undefined;\n    }\n\n    return val.toNumber() / LAMPORTS_PER_SOL;\n  },\n};\n\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\n\nexport const CIVIC = new anchor.web3.PublicKey(\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\n);\n\nexport const getAtaForMint = async (\n  mint: anchor.web3.PublicKey,\n  buyer: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n  );\n};\n\nexport const getNetworkExpire = async (\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\n    CIVIC,\n  );\n};\n\nexport const getNetworkToken = async (\n  wallet: anchor.web3.PublicKey,\n  gatekeeperNetwork: anchor.web3.PublicKey,\n): Promise<[anchor.web3.PublicKey, number]> => {\n  return await anchor.web3.PublicKey.findProgramAddress(\n    [\n      wallet.toBuffer(),\n      Buffer.from('gateway'),\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n      gatekeeperNetwork.toBuffer(),\n    ],\n    CIVIC,\n  );\n};\n\nexport function createAssociatedTokenAccountInstruction(\n  associatedTokenAddress: anchor.web3.PublicKey,\n  payer: anchor.web3.PublicKey,\n  walletAddress: anchor.web3.PublicKey,\n  splTokenMintAddress: anchor.web3.PublicKey,\n) {\n  const keys = [\n    {\n      pubkey: payer,\n      isSigner: true,\n      isWritable: true,\n    },\n    {\n      pubkey: associatedTokenAddress,\n      isSigner: false,\n      isWritable: true,\n    },\n    {\n      pubkey: walletAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: splTokenMintAddress,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SystemProgram.programId,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false,\n    },\n    {\n      pubkey: SYSVAR_RENT_PUBKEY,\n      isSigner: false,\n      isWritable: false,\n    },\n  ];\n  return new TransactionInstruction({\n    keys,\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n    data: Buffer.from([]),\n  });\n}\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINT';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find(state => previousGatewayStatus === state) &&\n      !invalidToStates.find(state => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log('after: ', gatewayStatus);\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              window.open(\n                `https://verify.encore.fans/?gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useCallback, useEffect, useMemo, useState } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\n\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport Typewriter from \"typewriter-effect\";\nimport {\n  Commitment,\n  Connection,\n  PublicKey,\n  Transaction,\n} from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CANDY_MACHINE_PROGRAM,\n  CandyMachineAccount,\n  createAccountsForMint,\n  getCandyMachineState,\n  getCollectionPDA,\n  mintOneToken,\n  SetupState,\n} from './candy-machine';\nimport { AlertState, formatNumber, getAtaForMint, toDate } from './utils';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\nimport './home.css';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n  network: WalletAdapterNetwork;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [isValidBalance, setIsValidBalance] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(\n    async (commitment: Commitment = 'confirmed') => {\n      if (!anchorWallet) {\n        return;\n      }\n\n      const connection = new Connection(props.rpcHost, commitment);\n\n      if (props.candyMachineId) {\n        console.log(props?.candyMachineId);\n        try {\n          const cndy = await getCandyMachineState(\n            anchorWallet,\n            props.candyMachineId,\n            connection,\n          );\n          let active =\n            cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n          let presale = false;\n\n          // duplication of state to make sure we have the right values!\n          let isWLUser = false;\n          let userPrice = cndy.state.price;\n\n          userPrice = isWLUser ? userPrice : cndy.state.price;\n\n          if (cndy?.state.tokenMint) {\n            // retrieves the SPL token\n            const mint = new anchor.web3.PublicKey(cndy.state.tokenMint);\n            const token = (\n              await getAtaForMint(mint, anchorWallet.publicKey)\n            )[0];\n            try {\n              const balance = await connection.getTokenAccountBalance(token);\n\n              const valid = new anchor.BN(balance.value.amount).gte(userPrice);\n\n              // only allow user to mint if token balance >  the user if the balance > 0\n              setIsValidBalance(valid);\n              active = active && valid;\n            } catch (e) {\n              setIsValidBalance(false);\n              active = false;\n              // no whitelist user, no mint\n              console.log('There was a problem fetching SPL token balance');\n              console.log(e);\n            }\n          } else {\n            const balance = new anchor.BN(\n              await connection.getBalance(anchorWallet.publicKey),\n            );\n            const valid = balance.gte(userPrice);\n            setIsValidBalance(valid);\n            active = active && valid;\n          }\n\n          if (cndy.state.isSoldOut) {\n            active = false;\n          }\n\n          const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n          const collectionPDAAccount = await connection.getAccountInfo(\n            collectionPDA,\n          );\n\n          setIsActive((cndy.state.isActive = active));\n          setIsPresale((cndy.state.isPresale = presale));\n          setCandyMachine(cndy);\n\n          const txnEstimate =\n            892 +\n            (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n            (cndy.state.tokenMint ? 177 : 0) +\n            (cndy.state.whitelistMintSettings ? 33 : 0) +\n            (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n            (cndy.state.gatekeeper ? 33 : 0) +\n            (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n          setNeedTxnSplit(txnEstimate > 1230);\n        } catch (e) {\n          if (e instanceof Error) {\n            if (\n              e.message === `Account does not exist ${props.candyMachineId}`\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            } else if (\n              e.message.startsWith('failed to get info about account')\n            ) {\n              setAlertState({\n                open: true,\n                message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n                severity: 'error',\n                hideDuration: null,\n              });\n            }\n          } else {\n            setAlertState({\n              open: true,\n              message: `${e}`,\n              severity: 'error',\n              hideDuration: null,\n            });\n          }\n          console.log(e);\n        }\n      } else {\n        setAlertState({\n          open: true,\n          message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n          severity: 'error',\n          hideDuration: null,\n        });\n      }\n    },\n    [anchorWallet, props.candyMachineId, props.rpcHost],\n  );\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintResult = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n\n        let status: any = { err: true };\n        let metadataStatus = null;\n        if (mintResult) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintResult.mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n\n          metadataStatus =\n            await candyMachine.program.provider.connection.getAccountInfo(\n              mintResult.metadataKey,\n              'processed',\n            );\n          console.log('Metadata status: ', !!metadataStatus);\n        }\n\n        if (status && !status.err && metadataStatus) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          console.log('status')\n          let remaining = itemsRemaining! - 1;\n          console.log(remaining);\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n            hideDuration: 7000,\n          });\n          refreshCandyMachineState('processed');\n        } else if (status && !status.err) {\n          setAlertState({\n            open: true,\n            message:\n              'Mint likely failed! Anti-bot SOL 0.01 fee potentially charged! Check the explorer to confirm the mint failed and if so, make sure you are eligible to mint before trying again.',\n            severity: 'error',\n            hideDuration: 8000,\n          });\n          refreshCandyMachineState();\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n          refreshCandyMachineState();\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n    console.log('use efect');\n    if(candyMachine) {\n      console.log('candyMachine')\n      console.log(candyMachine.state);\n      setItemsRemaining(candyMachine.state.itemsRemaining);\n      console.log(itemsRemaining);\n  } \n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  useEffect(() => {\n    (function loop() {\n      setTimeout(() => {\n        refreshCandyMachineState();\n        loop();\n      }, 20000);\n    })();\n  }, [refreshCandyMachineState]);\n\n  return (\n    <main>\n      \n      {/* {wallet && <p>Balance: {(balance || 0).toLocaleString()} SOL</p>} */}\n      <div className=\"main\">\n        <div id=\"mainEmptyDiv\"></div>\n        <div className=\"mintContainer\">\n          {anchorWallet && (\n            <Typography variant=\"body2\" color=\"textSecondary\">\n            Wallet: {(anchorWallet?.publicKey?.toBase58() || \"\")}\n          </Typography>\n          )} \n        \n        <Container style={{ marginTop: 20 }}>\n        <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n          <Paper\n            style={{\n              padding: 24,\n              paddingBottom: 24,\n              backgroundColor: '#151A1F',\n              borderRadius: 6,\n            }}\n          >\n            {!wallet.connected ? (\n              <ConnectButton>Connect Wallet</ConnectButton>\n            ) : (\n              <>\n                {candyMachine && (\n                  <Grid\n                    container\n                    direction=\"row\"\n                    justifyContent=\"center\"\n                    wrap=\"nowrap\"\n                  >\n                    <Grid item xs={3}>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        Remaining\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        color=\"textPrimary\"\n                        style={{\n                          fontWeight: 'bold',\n                        }}\n                      >\n                        {`${itemsRemaining}`}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={4}>\n                      <Typography variant=\"body2\" color=\"textSecondary\">\n                        {isWhitelistUser && discountPrice\n                          ? 'Discount Price'\n                          : 'Price'}\n                      </Typography>\n                      <Typography\n                        variant=\"h6\"\n                        color=\"textPrimary\"\n                        style={{ fontWeight: 'bold' }}\n                      >\n                        {isWhitelistUser && discountPrice\n                          ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                          : `◎ ${formatNumber.asNumber(\n                              candyMachine.state.price,\n                            )}`}\n                      </Typography>\n                    </Grid>\n                    <Grid item xs={5}>\n                              <Typography\n                                variant=\"caption\"\n                                align=\"center\"\n                                display=\"block\"\n                                style={{ fontWeight: 'bold' }}\n                              >\n                                MINT TBA\n                              </Typography>\n                    </Grid>\n                  </Grid>\n                )}\n                <MintContainer>\n                  {candyMachine?.state.isActive &&\n                  candyMachine?.state.gatekeeper &&\n                  wallet.publicKey &&\n                  wallet.signTransaction ? (\n                    <GatewayProvider\n                      wallet={{\n                        publicKey:\n                          wallet.publicKey ||\n                          new PublicKey(CANDY_MACHINE_PROGRAM),\n                        //@ts-ignore\n                        signTransaction: wallet.signTransaction,\n                      }}\n                      gatekeeperNetwork={\n                        candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                      }\n                      clusterUrl={\n                        props.network === WalletAdapterNetwork.Devnet\n                          ? 'https://api.devnet.solana.com'\n                          : rpcUrl\n                      }\n                      handleTransaction={async (transaction: Transaction) => {\n                        setIsUserMinting(true);\n                        const userMustSign = transaction.signatures.find(sig =>\n                          sig.publicKey.equals(wallet.publicKey!),\n                        );\n                        if (userMustSign) {\n                          setAlertState({\n                            open: true,\n                            message: 'Please sign one-time Civic Pass issuance',\n                            severity: 'info',\n                          });\n                          try {\n                            transaction = await wallet.signTransaction!(\n                              transaction,\n                            );\n                          } catch (e) {\n                            setAlertState({\n                              open: true,\n                              message: 'User cancelled signing',\n                              severity: 'error',\n                            });\n                            // setTimeout(() => window.location.reload(), 2000);\n                            setIsUserMinting(false);\n                            throw e;\n                          }\n                        } else {\n                          setAlertState({\n                            open: true,\n                            message: 'Refreshing Civic Pass',\n                            severity: 'info',\n                          });\n                        }\n                        try {\n                          await sendTransaction(\n                            props.connection,\n                            wallet,\n                            transaction,\n                            [],\n                            true,\n                            'confirmed',\n                          );\n                          setAlertState({\n                            open: true,\n                            message: 'Please sign minting',\n                            severity: 'info',\n                          });\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message:\n                              'Solana dropped the transaction, please try again',\n                            severity: 'warning',\n                          });\n                          console.error(e);\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                        await onMint();\n                      }}\n                      broadcastTransaction={false}\n                      options={{ autoShowModal: false }}\n                    >\n                      <MintButton\n                        candyMachine={candyMachine}\n                        isMinting={isUserMinting}\n                        setIsMinting={val => setIsUserMinting(val)}\n                        onMint={onMint}\n                        isActive={\n                          isActive ||\n                          (isPresale && isWhitelistUser && isValidBalance)\n                        }\n                      />\n                    </GatewayProvider>\n                  ) : (\n                    <MintButton \n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={val => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={\n                        isActive ||\n                        (isPresale && isWhitelistUser && isValidBalance)\n                      }\n                    />\n                  )}\n                </MintContainer>\n              </>\n            )}\n          </Paper>\n        </Container>\n\n        <Snackbar\n          open={alertState.open}\n          autoHideDuration={\n            alertState.hideDuration === undefined ? 6000 : alertState.hideDuration\n          }\n          onClose={() => setAlertState({ ...alertState, open: false })}\n        >\n          <Alert\n            onClose={() => setAlertState({ ...alertState, open: false })}\n            severity={alertState.severity}\n          >\n            {alertState.message}\n          </Alert>\n        </Snackbar>\n      </Container>\n          </div>\n\n        </div>\n\n        {<div id=\"about\"><div className=\"aboutContainer\">\n          <h1 className=\"h1\">ABOUT</h1>\n          <p>For those beginning or continuing their awakening on NFTs...\n          </p><p>A collection of 2,222 uniquely generated Awakened Sols on the Solana blockchain.  \n          </p><p>An alpha group and Sniping tool with unique features only available to holders.\n          </p><p>An open minded community.\n          </p>\n          </div></div>}\n\n          {<div id=\"roadmap\">\n            <div className=\"roadMapContainer\">\n          <h1 className=\"h1\">ROADMAP</h1>\n          <ul><h3>Phase 1</h3>\n            <li>Artwork Development</li>\n            <li>Sniping Tool Development</li>\n            <li>2,222 Awakened Sols Mint(0.5 SOL) - 50 OG(FREE) - 500 WL(0.3 SOL)</li>\n            <li>Launch Sniping Tool to the public with special features for holders</li>\n          </ul>\n          <ul><h3>Phase 2</h3>\n            <li>Listing on Secondary Market</li>\n            <li>SOL Giveaways, NFT airdrops, WL spots</li>\n            <li>Develop extra features based on feedback for Sniping Tool for NFT holders.</li>\n          </ul>\n          <ul><h3>Phase 3</h3>\n            <li>Launch Sniping Tool v2</li>\n          </ul>\n          </div>\n          </div>}\n\n    </main>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useMemo } from \"react\";\n\nimport Home from \"./Home\";\nimport {Route, Routes} from 'react-router-dom'\n\nimport * as anchor from \"@project-serum/anchor\";\nimport { clusterApiUrl } from \"@solana/web3.js\";\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\";\nimport {\n  getPhantomWallet,\n  getSlopeWallet,\n  getSolflareWallet,\n  getSolletWallet,\n  getSolletExtensionWallet,\n} from \"@solana/wallet-adapter-wallets\";\n\nimport {\n  ConnectionProvider,\n  WalletProvider,\n} from \"@solana/wallet-adapter-react\";\n\nimport { WalletDialogProvider } from \"@solana/wallet-adapter-material-ui\";\nimport { createTheme, ThemeProvider } from \"@material-ui/core\";\nimport { DEFAULT_TIMEOUT } from './connection';\nconst treasury = new anchor.web3.PublicKey(\n  process.env.REACT_APP_TREASURY_ADDRESS!\n);\n\nconst config = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_CONFIG!\n);\n\nconst candyMachineId = new anchor.web3.PublicKey(\n  process.env.REACT_APP_CANDY_MACHINE_ID!\n);\n\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\n\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\nconst connection = new anchor.web3.Connection(rpcHost);\n\nconst startDateSeed = parseInt(process.env.REACT_APP_CANDY_START_DATE!, 10);\n\nconst txTimeout = 30000; // milliseconds (confirm this works for your project)\n\nconst theme = createTheme({\n    palette: {\n        type: 'dark',\n    },\n    overrides: {\n        MuiButtonBase: {\n            root: {\n                justifyContent: 'flex-start',\n            },\n        },\n        MuiButton: {\n            root: {\n                textTransform: undefined,\n                padding: '12px 16px',\n            },\n            startIcon: {\n                marginRight: 8,\n            },\n            endIcon: {\n                marginLeft: 8,\n            },\n        },\n    },\n});\n\nconst App = () => {\n\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\n\n  const wallets = useMemo(\n    () => [\n        getPhantomWallet(),\n        getSlopeWallet(),\n        getSolflareWallet(),\n        getSolletWallet({ network }),\n        getSolletExtensionWallet({ network })\n    ],\n    []\n  );\n\n  return (\n      <ThemeProvider theme={theme}>\n        <ConnectionProvider endpoint={endpoint}>\n          <WalletProvider wallets={wallets} autoConnect>\n            <WalletDialogProvider>\n              <Routes>\n                <Route path=\"/\" element={HomeComponent()}/>\n                </Routes>\n            </WalletDialogProvider>\n          </WalletProvider>\n        </ConnectionProvider>\n      </ThemeProvider>\n  );\n};\n\nexport default App;\n\nconst HomeComponent = () => {\n  return (\n   <Home\n   candyMachineId={candyMachineId}\n   connection={connection}\n   txTimeout={DEFAULT_TIMEOUT}\n   rpcHost={rpcHost}\n   network={network}\n                />\n  );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport {BrowserRouter} from 'react-router-dom'\nReactDOM.render(\n  <BrowserRouter>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </BrowserRouter>,\n  document.getElementById('root')\n\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {\n    Keypair,\n    Commitment,\n    Connection,\n    RpcResponseAndContext,\n    SignatureStatus,\n    SimulatedTransactionResponse,\n    Transaction,\n    TransactionInstruction,\n    TransactionSignature,\n    Blockhash,\n    FeeCalculator,\n  } from '@solana/web3.js';\n  \n  import { WalletNotConnectedError } from '@solana/wallet-adapter-base';\n  \n  interface BlockhashAndFeeCalculator {\n    blockhash: Blockhash;\n    feeCalculator: FeeCalculator;\n  }\n  \n  export const DEFAULT_TIMEOUT = 60000;\n  \n  export const getErrorForTransaction = async (\n    connection: Connection,\n    txid: string,\n  ) => {\n    // wait for all confirmation before geting transaction\n    await connection.confirmTransaction(txid, 'max');\n  \n    const tx = await connection.getParsedConfirmedTransaction(txid);\n  \n    const errors: string[] = [];\n    if (tx?.meta && tx.meta.logMessages) {\n      tx.meta.logMessages.forEach(log => {\n        const regex = /Error: (.*)/gm;\n        let m;\n        while ((m = regex.exec(log)) !== null) {\n          // This is necessary to avoid infinite loops with zero-width matches\n          if (m.index === regex.lastIndex) {\n            regex.lastIndex++;\n          }\n  \n          if (m.length > 1) {\n            errors.push(m[1]);\n          }\n        }\n      });\n    }\n  \n    return errors;\n  };\n  \n  export enum SequenceType {\n    Sequential,\n    Parallel,\n    StopOnFailure,\n  }\n  \n  export async function sendTransactionsWithManualRetry(\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[][],\n    signers: Keypair[][],\n  ): Promise<(string | undefined)[]> {\n    let stopPoint = 0;\n    let tries = 0;\n    let lastInstructionsLength = null;\n    let toRemoveSigners: Record<number, boolean> = {};\n    instructions = instructions.filter((instr, i) => {\n      if (instr.length > 0) {\n        return true;\n      } else {\n        toRemoveSigners[i] = true;\n        return false;\n      }\n    });\n    let ids: string[] = [];\n    let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\n  \n    while (stopPoint < instructions.length && tries < 3) {\n      instructions = instructions.slice(stopPoint, instructions.length);\n      filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\n  \n      if (instructions.length === lastInstructionsLength) tries = tries + 1;\n      else tries = 0;\n  \n      try {\n        if (instructions.length === 1) {\n          const id = await sendTransactionWithRetry(\n            connection,\n            wallet,\n            instructions[0],\n            filteredSigners[0],\n            'single',\n          );\n          ids.push(id.txid);\n          stopPoint = 1;\n        } else {\n          const { txs } = await sendTransactions(\n            connection,\n            wallet,\n            instructions,\n            filteredSigners,\n            SequenceType.StopOnFailure,\n            'single',\n          );\n          ids = ids.concat(txs.map(t => t.txid));\n        }\n      } catch (e) {\n        console.error(e);\n      }\n      console.log(\n        'Died on ',\n        stopPoint,\n        'retrying from instruction',\n        instructions[stopPoint],\n        'instructions length is',\n        instructions.length,\n      );\n      lastInstructionsLength = instructions.length;\n    }\n  \n    return ids;\n  }\n  \n  export const sendTransactions = async (\n    connection: Connection,\n    wallet: any,\n    instructionSet: TransactionInstruction[][],\n    signersSet: Keypair[][],\n    sequenceType: SequenceType = SequenceType.Parallel,\n    commitment: Commitment = 'singleGossip',\n    successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\n    failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\n    block?: BlockhashAndFeeCalculator,\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    const unsignedTxns: Transaction[] = beforeTransactions;\n  \n    if (!block) {\n      block = await connection.getRecentBlockhash(commitment);\n    }\n  \n    for (let i = 0; i < instructionSet.length; i++) {\n      const instructions = instructionSet[i];\n      const signers = signersSet[i];\n  \n      if (instructions.length === 0) {\n        continue;\n      }\n  \n      let transaction = new Transaction();\n      instructions.forEach(instruction => transaction.add(instruction));\n      transaction.recentBlockhash = block.blockhash;\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n  \n      if (signers.length > 0) {\n        transaction.partialSign(...signers);\n      }\n  \n      unsignedTxns.push(transaction);\n    }\n    unsignedTxns.push(...afterTransactions);\n  \n    const partiallySignedTransactions = unsignedTxns.filter(t =>\n      t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n    );\n    const fullySignedTransactions = unsignedTxns.filter(\n      t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\n    );\n    let signedTxns = await wallet.signAllTransactions(\n      partiallySignedTransactions,\n    );\n    signedTxns = fullySignedTransactions.concat(signedTxns);\n    const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\n  \n    console.log(\n      'Signed txns length',\n      signedTxns.length,\n      'vs handed in length',\n      instructionSet.length,\n    );\n    for (let i = 0; i < signedTxns.length; i++) {\n      const signedTxnPromise = sendSignedTransaction({\n        connection,\n        signedTransaction: signedTxns[i],\n      });\n  \n      if (sequenceType !== SequenceType.Parallel) {\n        try {\n          await signedTxnPromise.then(({ txid, slot }) =>\n            successCallback(txid, i),\n          );\n          pendingTxns.push(signedTxnPromise);\n        } catch (e) {\n          console.log('Failed at txn index:', i);\n          console.log('Caught failure:', e);\n  \n          failCallback(signedTxns[i], i);\n          if (sequenceType === SequenceType.StopOnFailure) {\n            return {\n              number: i,\n              txs: await Promise.all(pendingTxns),\n            };\n          }\n        }\n      } else {\n        pendingTxns.push(signedTxnPromise);\n      }\n    }\n  \n    if (sequenceType !== SequenceType.Parallel) {\n      const result = await Promise.all(pendingTxns);\n      return { number: signedTxns.length, txs: result };\n    }\n  \n    return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\n  };\n  \n  export const sendTransaction = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[] | Transaction,\n    signers: Keypair[],\n    awaitConfirmation = true,\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n  ) => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    let transaction: Transaction;\n    if (instructions instanceof Transaction) {\n      transaction = instructions;\n    } else {\n      transaction = new Transaction();\n      instructions.forEach(instruction => transaction.add(instruction));\n      transaction.recentBlockhash = (\n        block || (await connection.getRecentBlockhash(commitment))\n      ).blockhash;\n  \n      if (includesFeePayer) {\n        transaction.setSigners(...signers.map(s => s.publicKey));\n      } else {\n        transaction.setSigners(\n          // fee payed by the wallet owner\n          wallet.publicKey,\n          ...signers.map(s => s.publicKey),\n        );\n      }\n  \n      if (signers.length > 0) {\n        transaction.partialSign(...signers);\n      }\n      if (!includesFeePayer) {\n        transaction = await wallet.signTransaction(transaction);\n      }\n    }\n  \n    const rawTransaction = transaction.serialize();\n    let options = {\n      skipPreflight: true,\n      commitment,\n    };\n  \n    const txid = await connection.sendRawTransaction(rawTransaction, options);\n    let slot = 0;\n  \n    if (awaitConfirmation) {\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        DEFAULT_TIMEOUT,\n        connection,\n        commitment,\n      );\n  \n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n      slot = confirmation?.slot || 0;\n  \n      if (confirmation?.err) {\n        const errors = await getErrorForTransaction(connection, txid);\n  \n        console.log(errors);\n        throw new Error(`Raw transaction ${txid} failed`);\n      }\n    }\n  \n    return { txid, slot };\n  };\n  \n  export const sendTransactionWithRetry = async (\n    connection: Connection,\n    wallet: any,\n    instructions: TransactionInstruction[],\n    signers: Keypair[],\n    commitment: Commitment = 'singleGossip',\n    includesFeePayer: boolean = false,\n    block?: BlockhashAndFeeCalculator,\n    beforeSend?: () => void,\n  ) => {\n    if (!wallet.publicKey) throw new WalletNotConnectedError();\n  \n    let transaction = new Transaction();\n    instructions.forEach(instruction => transaction.add(instruction));\n    transaction.recentBlockhash = (\n      block || (await connection.getRecentBlockhash(commitment))\n    ).blockhash;\n  \n    if (includesFeePayer) {\n      transaction.setSigners(...signers.map(s => s.publicKey));\n    } else {\n      transaction.setSigners(\n        // fee payed by the wallet owner\n        wallet.publicKey,\n        ...signers.map(s => s.publicKey),\n      );\n    }\n  \n    if (signers.length > 0) {\n      transaction.partialSign(...signers);\n    }\n    if (!includesFeePayer) {\n      transaction = await wallet.signTransaction(transaction);\n    }\n  \n    if (beforeSend) {\n      beforeSend();\n    }\n  \n    const { txid, slot } = await sendSignedTransaction({\n      connection,\n      signedTransaction: transaction,\n    });\n  \n    return { txid, slot };\n  };\n  \n  export const getUnixTs = () => {\n    return new Date().getTime() / 1000;\n  };\n  \n  export async function sendSignedTransaction({\n    signedTransaction,\n    connection,\n    timeout = DEFAULT_TIMEOUT,\n  }: {\n    signedTransaction: Transaction;\n    connection: Connection;\n    sendingMessage?: string;\n    sentMessage?: string;\n    successMessage?: string;\n    timeout?: number;\n  }): Promise<{ txid: string; slot: number }> {\n    const rawTransaction = signedTransaction.serialize();\n  \n    const startTime = getUnixTs();\n    let slot = 0;\n    const txid: TransactionSignature = await connection.sendRawTransaction(\n      rawTransaction,\n      {\n        skipPreflight: true,\n      },\n    );\n  \n    console.log('Started awaiting confirmation for', txid);\n  \n    let done = false;\n    (async () => {\n      while (!done && getUnixTs() - startTime < timeout) {\n        connection.sendRawTransaction(rawTransaction, {\n          skipPreflight: true,\n        });\n        await sleep(500);\n      }\n    })();\n    try {\n      const confirmation = await awaitTransactionSignatureConfirmation(\n        txid,\n        timeout,\n        connection,\n        'recent',\n        true,\n      );\n  \n      if (!confirmation)\n        throw new Error('Timed out awaiting confirmation on transaction');\n  \n      if (confirmation.err) {\n        console.error(confirmation.err);\n        throw new Error('Transaction failed: Custom instruction error');\n      }\n  \n      slot = confirmation?.slot || 0;\n    } catch (err: any) {\n      console.error('Timeout Error caught', err);\n      if (err.timeout) {\n        throw new Error('Timed out awaiting confirmation on transaction');\n      }\n      let simulateResult: SimulatedTransactionResponse | null = null;\n      try {\n        simulateResult = (\n          await simulateTransaction(connection, signedTransaction, 'single')\n        ).value;\n      } catch (e) {}\n      if (simulateResult && simulateResult.err) {\n        if (simulateResult.logs) {\n          for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\n            const line = simulateResult.logs[i];\n            if (line.startsWith('Program log: ')) {\n              throw new Error(\n                'Transaction failed: ' + line.slice('Program log: '.length),\n              );\n            }\n          }\n        }\n        throw new Error(JSON.stringify(simulateResult.err));\n      }\n      // throw new Error('Transaction failed');\n    } finally {\n      done = true;\n    }\n  \n    console.log('Latency', txid, getUnixTs() - startTime);\n    return { txid, slot };\n  }\n  \n  async function simulateTransaction(\n    connection: Connection,\n    transaction: Transaction,\n    commitment: Commitment,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    // @ts-ignore\n    transaction.recentBlockhash = await connection._recentBlockhash(\n      // @ts-ignore\n      connection._disableBlockhashCaching,\n    );\n  \n    const signData = transaction.serializeMessage();\n    // @ts-ignore\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = { encoding: 'base64', commitment };\n    const args = [encodedTransaction, config];\n  \n    // @ts-ignore\n    const res = await connection._rpcRequest('simulateTransaction', args);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    return res.result;\n  }\n  \n  async function awaitTransactionSignatureConfirmation(\n    txid: TransactionSignature,\n    timeout: number,\n    connection: Connection,\n    commitment: Commitment = 'recent',\n    queryStatus = false,\n  ): Promise<SignatureStatus | null | void> {\n    let done = false;\n    let status: SignatureStatus | null | void = {\n      slot: 0,\n      confirmations: 0,\n      err: null,\n    };\n    let subId = 0;\n    status = await new Promise(async (resolve, reject) => {\n      setTimeout(() => {\n        if (done) {\n          return;\n        }\n        done = true;\n        console.log('Rejecting for timeout...');\n        reject({ timeout: true });\n      }, timeout);\n      try {\n        subId = connection.onSignature(\n          txid,\n          (result, context) => {\n            done = true;\n            status = {\n              err: result.err,\n              slot: context.slot,\n              confirmations: 0,\n            };\n            if (result.err) {\n              console.log('Rejected via websocket', result.err);\n              reject(status);\n            } else {\n              console.log('Resolved via websocket', result);\n              resolve(status);\n            }\n          },\n          commitment,\n        );\n      } catch (e) {\n        done = true;\n        console.error('WS error in setup', txid, e);\n      }\n      while (!done && queryStatus) {\n        // eslint-disable-next-line no-loop-func\n        (async () => {\n          try {\n            const signatureStatuses = await connection.getSignatureStatuses([\n              txid,\n            ]);\n            status = signatureStatuses && signatureStatuses.value[0];\n            if (!done) {\n              if (!status) {\n                console.log('REST null result for', txid, status);\n              } else if (status.err) {\n                console.log('REST error for', txid, status);\n                done = true;\n                reject(status.err);\n              } else if (!status.confirmations) {\n                console.log('REST no confirmations for', txid, status);\n              } else {\n                console.log('REST confirmation for', txid, status);\n                done = true;\n                resolve(status);\n              }\n            }\n          } catch (e) {\n            if (!done) {\n              console.log('REST connection error: txid', txid, e);\n            }\n          }\n        })();\n        await sleep(2000);\n      }\n    });\n  \n    //@ts-ignore\n    if (connection._signatureSubscriptions[subId])\n      connection.removeSignatureListener(subId);\n    done = true;\n    console.log('Returning status', status);\n    return status;\n  }\n  export function sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n  "],"sourceRoot":""}