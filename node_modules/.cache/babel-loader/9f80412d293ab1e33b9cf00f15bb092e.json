{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { ConsolidatedItemsPosition_$type } from \"./ConsolidatedItemsPosition\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { ColumnSeries } from \"./ColumnSeries\";\nimport { ensureEnum, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent column series.\n * Compare values across categories by using vertical rectangles.\n * Use it when the order of categories is not important or for displaying\n * item counts such as a histogram.\n*\n* ```ts\n*  <IgrDataChart\n* \t\tref={this.onChartRef}\n*         dataSource={this.data}>\n*\n*         <IgrCategoryXAxis name=\"xAxisYears\"/>\n*         <IgrCategoryXAxis name=\"xAxisMonths\" />\n*         <IgrNumericYAxis  name=\"yAxisLeft\"  />\n*         <IgrNumericYAxis  name=\"yAxisRight\" />\n*\n*         <IgrColumnSeries name=\"series1\"\n*         valueMemberPath=\"volume\"\n*         xAxisName=\"xAxisMonths\"\n*         yAxisName=\"yAxisLeft\"\n*         isTransitionInEnabled=\"true\" />\n* </IgrDataChart>\n* ```\n*\n* ```ts\n* \tthis.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* \tthis.columnSeries1.dataSource = this.categoryData;\n* \tthis.columnSeries1.xAxis = this.categoryXAxis;\n* \tthis.columnSeries1.yAxis = this.numericYAxis;\n* \tthis.columnSeries1.xAxisName = \"categoryXAxis\";\n* \tthis.columnSeries1.yAxisName = \"numericYAxis\";\n* \tthis.columnSeries1.valueMemberPath = \"volume\";\n* ```\n*/\n\nvar IgrColumnSeries =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrColumnSeries, _super);\n\n  function IgrColumnSeries(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrColumnSeries.prototype.createImplementation = function () {\n    return new ColumnSeries();\n  };\n\n  Object.defineProperty(IgrColumnSeries.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrColumnSeries.prototype, \"isColumn\", {\n    /**\n     * Gets whether the current series shows a column shape.\n    */\n    get: function () {\n      return this.i.dh;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrColumnSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n    /**\n     * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n    */\n    get: function () {\n      return this.i.d2;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrColumnSeries.prototype, \"radiusX\", {\n    /**\n     * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function () {\n      return this.i.vb;\n    },\n    set: function (v) {\n      this.i.vb = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrColumnSeries.prototype, \"radiusY\", {\n    /**\n     * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n    */\n    get: function () {\n      return this.i.vc;\n    },\n    set: function (v) {\n      this.i.vc = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrColumnSeries.prototype, \"consolidatedColumnVerticalPosition\", {\n    /**\n     * The positioning logic to use for columns which have been consolidated into a single visual element.\n    */\n    get: function () {\n      return this.i.u9;\n    },\n    set: function (v) {\n      this.i.u9 = ensureEnum(ConsolidatedItemsPosition_$type, v);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n  \r\n  * @param world  * The world coordinate for which to get a value bounding box for\n  */\n\n  IgrColumnSeries.prototype.getSeriesValueBoundingBox = function (world) {\n    var iv = this.i.pv(toPoint(world));\n    return fromRect(iv);\n  };\n  /**\n   * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n  \r\n  */\n\n\n  IgrColumnSeries.prototype.getItemSpan = function () {\n    var iv = this.i.ga();\n    return iv;\n  };\n\n  return IgrColumnSeries;\n}(IgrHorizontalAnchoredCategorySeries);\n\nexport { IgrColumnSeries };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-column-series.js"],"names":["__extends","ConsolidatedItemsPosition_$type","IgrHorizontalAnchoredCategorySeries","ColumnSeries","ensureEnum","toPoint","fromRect","IgrColumnSeries","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","dh","d2","vb","set","v","vc","u9","getSeriesValueBoundingBox","world","iv","pv","getItemSpan","ga"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport { ConsolidatedItemsPosition_$type } from \"./ConsolidatedItemsPosition\";\nimport { IgrHorizontalAnchoredCategorySeries } from \"./igr-horizontal-anchored-category-series\";\nimport { ColumnSeries } from \"./ColumnSeries\";\nimport { ensureEnum, toPoint, fromRect } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent column series.\n * Compare values across categories by using vertical rectangles.\n * Use it when the order of categories is not important or for displaying\n * item counts such as a histogram.\n*\n* ```ts\n*  <IgrDataChart\n* \t\tref={this.onChartRef}\n*         dataSource={this.data}>\n*\n*         <IgrCategoryXAxis name=\"xAxisYears\"/>\n*         <IgrCategoryXAxis name=\"xAxisMonths\" />\n*         <IgrNumericYAxis  name=\"yAxisLeft\"  />\n*         <IgrNumericYAxis  name=\"yAxisRight\" />\n*\n*         <IgrColumnSeries name=\"series1\"\n*         valueMemberPath=\"volume\"\n*         xAxisName=\"xAxisMonths\"\n*         yAxisName=\"yAxisLeft\"\n*         isTransitionInEnabled=\"true\" />\n* </IgrDataChart>\n* ```\n*\n* ```ts\n* \tthis.columnSeries1 = new IgrColumnSeries({ name: \"colSeries1\" });\n* \tthis.columnSeries1.dataSource = this.categoryData;\n* \tthis.columnSeries1.xAxis = this.categoryXAxis;\n* \tthis.columnSeries1.yAxis = this.numericYAxis;\n* \tthis.columnSeries1.xAxisName = \"categoryXAxis\";\n* \tthis.columnSeries1.yAxisName = \"numericYAxis\";\n* \tthis.columnSeries1.valueMemberPath = \"volume\";\n* ```\n*/\nvar IgrColumnSeries = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrColumnSeries, _super);\n    function IgrColumnSeries(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrColumnSeries.prototype.createImplementation = function () {\n        return new ColumnSeries();\n    };\n    Object.defineProperty(IgrColumnSeries.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrColumnSeries.prototype, \"isColumn\", {\n        /**\n         * Gets whether the current series shows a column shape.\n        */\n        get: function () {\n            return this.i.dh;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrColumnSeries.prototype, \"isMarkerlessDisplayPreferred\", {\n        /**\n         * Overridden by derived series classes to indicate when marker-less display is preferred or not.\n        */\n        get: function () {\n            return this.i.d2;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrColumnSeries.prototype, \"radiusX\", {\n        /**\n         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.vb;\n        },\n        set: function (v) {\n            this.i.vb = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrColumnSeries.prototype, \"radiusY\", {\n        /**\n         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.\n        */\n        get: function () {\n            return this.i.vc;\n        },\n        set: function (v) {\n            this.i.vc = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrColumnSeries.prototype, \"consolidatedColumnVerticalPosition\", {\n        /**\n         * The positioning logic to use for columns which have been consolidated into a single visual element.\n        */\n        get: function () {\n            return this.i.u9;\n        },\n        set: function (v) {\n            this.i.u9 = ensureEnum(ConsolidatedItemsPosition_$type, v);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.\n    \r\n    * @param world  * The world coordinate for which to get a value bounding box for\n    */\n    IgrColumnSeries.prototype.getSeriesValueBoundingBox = function (world) {\n        var iv = this.i.pv(toPoint(world));\n        return fromRect(iv);\n    };\n    /**\n     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.\n    \r\n    */\n    IgrColumnSeries.prototype.getItemSpan = function () {\n        var iv = this.i.ga();\n        return (iv);\n    };\n    return IgrColumnSeries;\n}(IgrHorizontalAnchoredCategorySeries));\nexport { IgrColumnSeries };\n"]},"metadata":{},"sourceType":"module"}