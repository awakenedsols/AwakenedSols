{"ast":null,"code":"/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends, __values } from \"tslib\";\nimport { Base, fromEnum, markType } from \"igniteui-react-core\";\nimport { StringBuilder } from \"igniteui-react-core\";\n/**\n * @hidden\n */\n\nvar TreemapVisualData =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(TreemapVisualData, _super);\n\n  function TreemapVisualData() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._nodes = null;\n    _this._name = null;\n    _this._viewport = null;\n    return _this;\n  }\n\n  Object.defineProperty(TreemapVisualData.prototype, \"nodes\", {\n    get: function () {\n      return this._nodes;\n    },\n    set: function (a) {\n      this._nodes = a;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(TreemapVisualData.prototype, \"name\", {\n    get: function () {\n      return this._name;\n    },\n    set: function (a) {\n      this._name = a;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  TreemapVisualData.prototype.scaleByViewport = function () {\n    var e_1, _a;\n\n    if (this.nodes != null) {\n      try {\n        for (var _b = __values(fromEnum(this.nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var a = _c.value;\n          a.e(this.viewport);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n  };\n\n  TreemapVisualData.prototype.serialize = function () {\n    var e_2, _a;\n\n    var a = new StringBuilder(0);\n    var b = true;\n    a.u(\"{\");\n\n    if (this.nodes != null) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      var c = true;\n      a.l(\"Nodes: [\");\n\n      try {\n        for (var _b = __values(fromEnum(this.nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var d = _c.value;\n\n          if (c) {\n            c = false;\n          } else {\n            a.l(\", \");\n          }\n\n          a.u(d.d());\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n\n      a.u(\"]\");\n    }\n\n    if (this.name != null) {\n      if (b) {\n        b = false;\n      } else {\n        a.l(\", \");\n      }\n\n      a.l(\"name: '\");\n      a.l(this.name);\n      a.u(\"'\");\n    }\n\n    if (b) {\n      b = false;\n    } else {\n      a.l(\", \");\n    }\n\n    a.l(\"viewport: {\");\n    a.l(\"left: \" + this.viewport.left + \", top: \" + this.viewport.top + \", width: \" + this.viewport.width + \", height: \" + this.viewport.height);\n    a.u(\"}\");\n    a.u(\"}\");\n    return a.toString();\n  };\n\n  Object.defineProperty(TreemapVisualData.prototype, \"viewport\", {\n    get: function () {\n      return this._viewport;\n    },\n    set: function (a) {\n      this._viewport = a;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  TreemapVisualData.$t = markType(TreemapVisualData, 'TreemapVisualData');\n  return TreemapVisualData;\n}(Base);\n\nexport { TreemapVisualData };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/TreemapVisualData.js"],"names":["__extends","__values","Base","fromEnum","markType","StringBuilder","TreemapVisualData","_super","_this","apply","arguments","_nodes","_name","_viewport","Object","defineProperty","prototype","get","set","a","enumerable","configurable","scaleByViewport","e_1","_a","nodes","_b","_c","next","done","value","e","viewport","e_1_1","error","return","call","serialize","e_2","b","u","l","c","d","e_2_1","name","left","top","width","height","toString","$t"],"mappings":"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","sourcesContent":["/*\nTHIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT (\"AGREEMENT\") LOCATED HERE:\nhttps://www.infragistics.com/legal/license/igultimate-la\nhttps://www.infragistics.com/legal/license/igultimate-eula\nGOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.\n*/\nimport { __extends, __values } from \"tslib\";\nimport { Base, fromEnum, markType } from \"igniteui-react-core\";\nimport { StringBuilder } from \"igniteui-react-core\";\n/**\n * @hidden\n */\nvar TreemapVisualData = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(TreemapVisualData, _super);\n    function TreemapVisualData() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._nodes = null;\n        _this._name = null;\n        _this._viewport = null;\n        return _this;\n    }\n    Object.defineProperty(TreemapVisualData.prototype, \"nodes\", {\n        get: function () {\n            return this._nodes;\n        },\n        set: function (a) {\n            this._nodes = a;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(TreemapVisualData.prototype, \"name\", {\n        get: function () {\n            return this._name;\n        },\n        set: function (a) {\n            this._name = a;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TreemapVisualData.prototype.scaleByViewport = function () {\n        var e_1, _a;\n        if (this.nodes != null) {\n            try {\n                for (var _b = __values(fromEnum(this.nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var a = _c.value;\n                    a.e(this.viewport);\n                }\n            }\n            catch (e_1_1) {\n                e_1 = { error: e_1_1 };\n            }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return))\n                        _a.call(_b);\n                }\n                finally {\n                    if (e_1)\n                        throw e_1.error;\n                }\n            }\n        }\n    };\n    TreemapVisualData.prototype.serialize = function () {\n        var e_2, _a;\n        var a = new StringBuilder(0);\n        var b = true;\n        a.u(\"{\");\n        if (this.nodes != null) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            var c = true;\n            a.l(\"Nodes: [\");\n            try {\n                for (var _b = __values(fromEnum(this.nodes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var d = _c.value;\n                    if (c) {\n                        c = false;\n                    }\n                    else {\n                        a.l(\", \");\n                    }\n                    a.u(d.d());\n                }\n            }\n            catch (e_2_1) {\n                e_2 = { error: e_2_1 };\n            }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return))\n                        _a.call(_b);\n                }\n                finally {\n                    if (e_2)\n                        throw e_2.error;\n                }\n            }\n            a.u(\"]\");\n        }\n        if (this.name != null) {\n            if (b) {\n                b = false;\n            }\n            else {\n                a.l(\", \");\n            }\n            a.l(\"name: '\");\n            a.l(this.name);\n            a.u(\"'\");\n        }\n        if (b) {\n            b = false;\n        }\n        else {\n            a.l(\", \");\n        }\n        a.l(\"viewport: {\");\n        a.l(\"left: \" + this.viewport.left + \", top: \" + this.viewport.top + \", width: \" + this.viewport.width + \", height: \" + this.viewport.height);\n        a.u(\"}\");\n        a.u(\"}\");\n        return a.toString();\n    };\n    Object.defineProperty(TreemapVisualData.prototype, \"viewport\", {\n        get: function () {\n            return this._viewport;\n        },\n        set: function (a) {\n            this._viewport = a;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    TreemapVisualData.$t = markType(TreemapVisualData, 'TreemapVisualData');\n    return TreemapVisualData;\n}(Base));\nexport { TreemapVisualData };\n"]},"metadata":{},"sourceType":"module"}