{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { IgrFinancialOverlay } from \"./igr-financial-overlay\";\nimport { PriceChannelOverlay } from \"./PriceChannelOverlay\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent Financial Price Channel Overlay series.\n * Default required members: High, Low\n*\n* You can use the `IgrPriceChannelOverlay` to display price volatility.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*    <IgrPriceChannelOverlay\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPriceChannelOverlay({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* ```\n*/\n\nvar IgrPriceChannelOverlay =\n/** @class */\n\n/*@__PURE__*/\nfunction (_super) {\n  __extends(IgrPriceChannelOverlay, _super);\n\n  function IgrPriceChannelOverlay(props) {\n    return _super.call(this, props) || this;\n  }\n\n  IgrPriceChannelOverlay.prototype.createImplementation = function () {\n    return new PriceChannelOverlay();\n  };\n\n  Object.defineProperty(IgrPriceChannelOverlay.prototype, \"i\", {\n    /**\n                                 * @hidden\n                                 */\n    get: function () {\n      return this._implementation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(IgrPriceChannelOverlay.prototype, \"period\", {\n    /**\n     * Gets or sets the moving average period for the current PriceChannelOverlay object.\n     * The typical, and initial, value for Bollinger band periods is 14.\n    *\n    * You can use the `period` to set the moving average.\n    *\n    * ```ts\n    * this.series.period = 14;\n    * ```\n    *\n    * ```ts\n    * <IgrDataChart\n    *     dataSource={this.state.dataSource}\n    *     width=\"700px\"\n    *     height=\"500px\">\n    *\n    *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n    *     <IgrNumericYAxis  name=\"yAxis\" />\n    *    <IgrPriceChannelOverlay\n    *     name=\"series1\"\n    *     xAxisName=\"xAxis\"\n    *     yAxisName=\"yAxis\"\n    *     lowMemberPath=\"Low\"\n    *     highMemberPath=\"High\"\n    *     openMemberPath=\"Open\"\n    *     closeMemberPath=\"Close\"\n    *     volumeMemberPath=\"Volume\"\n    * \tperiod = {14} />\n    *  </IgrDataChart>\n    * ```\n    */\n    get: function () {\n      return this.i.tu;\n    },\n    set: function (v) {\n      this.i.tu = +v;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  IgrPriceChannelOverlay.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n    var iv = this.i.gj(toPoint(world), useInterpolation, skipUnknowns);\n    return iv;\n  };\n\n  IgrPriceChannelOverlay.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.hh(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  IgrPriceChannelOverlay.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n    var iv = this.i.hj(toPoint(world), skipUnknowns);\n    return iv;\n  };\n\n  return IgrPriceChannelOverlay;\n}(IgrFinancialOverlay);\n\nexport { IgrPriceChannelOverlay };","map":{"version":3,"sources":["/Users/genesisbarrios/Documents/coding/web3/Awakened Sols/AwakenedSols/node_modules/igniteui-react-charts/esm5/lib/igr-price-channel-overlay.js"],"names":["__extends","IgrFinancialOverlay","PriceChannelOverlay","toPoint","IgrPriceChannelOverlay","_super","props","call","prototype","createImplementation","Object","defineProperty","get","_implementation","enumerable","configurable","i","tu","set","v","getSeriesValue","world","useInterpolation","skipUnknowns","iv","gj","getNextOrExactIndex","hh","getPreviousOrExactIndex","hj"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,mBAAT,QAAoC,uBAApC;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,sBAAsB;AAAG;;AAAc;AAAe,UAAUC,MAAV,EAAkB;AACxEL,EAAAA,SAAS,CAACI,sBAAD,EAAyBC,MAAzB,CAAT;;AACA,WAASD,sBAAT,CAAgCE,KAAhC,EAAuC;AACnC,WAAOD,MAAM,CAACE,IAAP,CAAY,IAAZ,EAAkBD,KAAlB,KAA4B,IAAnC;AACH;;AACDF,EAAAA,sBAAsB,CAACI,SAAvB,CAAiCC,oBAAjC,GAAwD,YAAY;AAChE,WAAO,IAAIP,mBAAJ,EAAP;AACH,GAFD;;AAGAQ,EAAAA,MAAM,CAACC,cAAP,CAAsBP,sBAAsB,CAACI,SAA7C,EAAwD,GAAxD,EAA6D;AACzD;AACR;AACA;AACQI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKC,eAAZ;AACH,KANwD;AAOzDC,IAAAA,UAAU,EAAE,KAP6C;AAQzDC,IAAAA,YAAY,EAAE;AAR2C,GAA7D;AAUAL,EAAAA,MAAM,CAACC,cAAP,CAAsBP,sBAAsB,CAACI,SAA7C,EAAwD,QAAxD,EAAkE;AAC9D;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACQI,IAAAA,GAAG,EAAE,YAAY;AACb,aAAO,KAAKI,CAAL,CAAOC,EAAd;AACH,KAlC6D;AAmC9DC,IAAAA,GAAG,EAAE,UAAUC,CAAV,EAAa;AACd,WAAKH,CAAL,CAAOC,EAAP,GAAY,CAACE,CAAb;AACH,KArC6D;AAsC9DL,IAAAA,UAAU,EAAE,KAtCkD;AAuC9DC,IAAAA,YAAY,EAAE;AAvCgD,GAAlE;;AAyCAX,EAAAA,sBAAsB,CAACI,SAAvB,CAAiCY,cAAjC,GAAkD,UAAUC,KAAV,EAAiBC,gBAAjB,EAAmCC,YAAnC,EAAiD;AAC/F,QAAIC,EAAE,GAAG,KAAKR,CAAL,CAAOS,EAAP,CAAUtB,OAAO,CAACkB,KAAD,CAAjB,EAA0BC,gBAA1B,EAA4CC,YAA5C,CAAT;AACA,WAAQC,EAAR;AACH,GAHD;;AAIApB,EAAAA,sBAAsB,CAACI,SAAvB,CAAiCkB,mBAAjC,GAAuD,UAAUL,KAAV,EAAiBE,YAAjB,EAA+B;AAClF,QAAIC,EAAE,GAAG,KAAKR,CAAL,CAAOW,EAAP,CAAUxB,OAAO,CAACkB,KAAD,CAAjB,EAA0BE,YAA1B,CAAT;AACA,WAAQC,EAAR;AACH,GAHD;;AAIApB,EAAAA,sBAAsB,CAACI,SAAvB,CAAiCoB,uBAAjC,GAA2D,UAAUP,KAAV,EAAiBE,YAAjB,EAA+B;AACtF,QAAIC,EAAE,GAAG,KAAKR,CAAL,CAAOa,EAAP,CAAU1B,OAAO,CAACkB,KAAD,CAAjB,EAA0BE,YAA1B,CAAT;AACA,WAAQC,EAAR;AACH,GAHD;;AAIA,SAAOpB,sBAAP;AACH,CAxEyD,CAwExDH,mBAxEwD,CAA1D;;AAyEA,SAASG,sBAAT","sourcesContent":["import { __extends } from \"tslib\";\nimport { IgrFinancialOverlay } from \"./igr-financial-overlay\";\nimport { PriceChannelOverlay } from \"./PriceChannelOverlay\";\nimport { toPoint } from \"igniteui-react-core\";\n/**\n * Represents a IgxDataChartComponent Financial Price Channel Overlay series.\n * Default required members: High, Low\n*\n* You can use the `IgrPriceChannelOverlay` to display price volatility.\n*\n* ```ts\n* <IgrDataChart\n*     dataSource={this.state.dataSource}\n*     width=\"700px\"\n*     height=\"500px\">\n*\n*     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n*     <IgrNumericYAxis  name=\"yAxis\" />\n*    <IgrPriceChannelOverlay\n*     name=\"series1\"\n*     xAxisName=\"xAxis\"\n*     yAxisName=\"yAxis\"\n*     lowMemberPath=\"Low\"\n*     highMemberPath=\"High\"\n*     openMemberPath=\"Open\"\n*     closeMemberPath=\"Close\"\n*     volumeMemberPath=\"Volume\" />\n*  </IgrDataChart>\n* ```\n*\n* ```ts\n* let series = new IgrPriceChannelOverlay({name:\"series1\"});\n* series.xAxisName = this.xAxis;\n* series.yAxisName = this.yAxis;\n* series.xAxis = this.categoryXAxis;\n* series.yAxis = this.numericYAxis;\n* series.openMemberPath = \"open\";\n* series.highMemberPath = \"high\";\n* series.lowMemberPath = \"low\";\n* series.closeMemberPath = \"close\";\n* ```\n*/\nvar IgrPriceChannelOverlay = /** @class */ /*@__PURE__*/ (function (_super) {\n    __extends(IgrPriceChannelOverlay, _super);\n    function IgrPriceChannelOverlay(props) {\n        return _super.call(this, props) || this;\n    }\n    IgrPriceChannelOverlay.prototype.createImplementation = function () {\n        return new PriceChannelOverlay();\n    };\n    Object.defineProperty(IgrPriceChannelOverlay.prototype, \"i\", {\n        /**\n                                     * @hidden\n                                     */\n        get: function () {\n            return this._implementation;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(IgrPriceChannelOverlay.prototype, \"period\", {\n        /**\n         * Gets or sets the moving average period for the current PriceChannelOverlay object.\n         * The typical, and initial, value for Bollinger band periods is 14.\n        *\n        * You can use the `period` to set the moving average.\n        *\n        * ```ts\n        * this.series.period = 14;\n        * ```\n        *\n        * ```ts\n        * <IgrDataChart\n        *     dataSource={this.state.dataSource}\n        *     width=\"700px\"\n        *     height=\"500px\">\n        *\n        *     <IgrCategoryXAxis name=\"xAxis\" label=\"Date\" />\n        *     <IgrNumericYAxis  name=\"yAxis\" />\n        *    <IgrPriceChannelOverlay\n        *     name=\"series1\"\n        *     xAxisName=\"xAxis\"\n        *     yAxisName=\"yAxis\"\n        *     lowMemberPath=\"Low\"\n        *     highMemberPath=\"High\"\n        *     openMemberPath=\"Open\"\n        *     closeMemberPath=\"Close\"\n        *     volumeMemberPath=\"Volume\"\n        * \tperiod = {14} />\n        *  </IgrDataChart>\n        * ```\n        */\n        get: function () {\n            return this.i.tu;\n        },\n        set: function (v) {\n            this.i.tu = +v;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    IgrPriceChannelOverlay.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {\n        var iv = this.i.gj(toPoint(world), useInterpolation, skipUnknowns);\n        return (iv);\n    };\n    IgrPriceChannelOverlay.prototype.getNextOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.hh(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    IgrPriceChannelOverlay.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {\n        var iv = this.i.hj(toPoint(world), skipUnknowns);\n        return (iv);\n    };\n    return IgrPriceChannelOverlay;\n}(IgrFinancialOverlay));\nexport { IgrPriceChannelOverlay };\n"]},"metadata":{},"sourceType":"module"}